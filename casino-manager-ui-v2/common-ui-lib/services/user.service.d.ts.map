{"version":3,"file":"user.service.d.ts","sources":["user.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nexport interface UserSearchComplex {\n    authHistoryId: number;\n    creationDate: string;\n    employeeId: number;\n    firstName: string;\n    ip: string;\n    lastName: string;\n    location: string;\n    meta: string;\n    title: string;\n    type: string;\n    userId: number;\n    userName: string;\n    userType: string;\n}\nexport interface UserSearchNormal {\n    employeeNumber: number;\n    firstName: string;\n    isActive: number;\n    language: string;\n    lastName: string;\n    roles: Array<any>;\n    title: string;\n    userAccessGroups: Array<any>;\n    userId: number;\n    userName: string;\n}\n/**\n *  providedIn: 'root', }) export class UserService { } 'root' means that we want provide the service at the root level (AppModule)\n *  When you provide the service at the root level, Angular creates a single, shared instance of service and injects into any class\n *  that asks for it.\n */\nexport declare class UserService {\n    private http;\n    userSearchComplexUrl: string;\n    userSearchNormalUrl: string;\n    constructor(http: HttpClient);\n    getComplexSearchedUsers(): Observable<UserSearchComplex[]>;\n    getNormalSearchedUsers(options?: {}): Observable<HttpResponse<Object>>;\n    getUserById(userId: any, options: {}): Observable<HttpResponse<Object>>;\n    setFavoriteApp(paramObj: any, userId: any): Observable<Object>;\n    changeStatus(user: any, options?: {}): Observable<HttpResponse<Object>>;\n    getRoles(options: {}): Observable<HttpResponse<Object>>;\n    createUpdateUser(options?: {\n        userId: number;\n    }): Observable<HttpResponse<Object>>;\n    getAssignedRolesAppList(options: {}): Observable<HttpResponse<Object>>;\n}\n"]}