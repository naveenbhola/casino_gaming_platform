{"version":3,"file":"topology.service.d.ts","sources":["topology.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\nimport { TopologyNodeInterface, TopologyTypesInterface } from '../interface/topology-types.interface';\nimport { TopologytreeService } from './topologytree.service';\nexport declare class TopologyService {\n    private http;\n    private treeService;\n    topologyTypes: any;\n    topologyNodes: any;\n    topologyNodeNames: any;\n    siteChildren: any;\n    accessGroupNodes: any;\n    virtualGroupNodes: any;\n    unAssignedNodes: any;\n    unassignedNodesArr: any;\n    accessGroupParams: HttpParams;\n    virtualGroupParams: HttpParams;\n    initialized: EventEmitter<any>;\n    nodeClicked: EventEmitter<any>;\n    terminalClicked: EventEmitter<any>;\n    areasLabelClicked: EventEmitter<any>;\n    nodeUpdated: EventEmitter<any>;\n    nodeDragged: EventEmitter<any>;\n    constructor(http: HttpClient, treeService: TopologytreeService);\n    initTopology(): void;\n    fetchTopologyData(): void;\n    getAccessGroup(options: {}): Observable<HttpResponse<Object>>;\n    getTopologyType(options: {}): Observable<TopologyTypesInterface[]>;\n    getTopologyNodes(options: {}): Observable<TopologyNodeInterface[]>;\n    getTopologyPits(options: {}): Observable<HttpResponse<Object>>;\n    getTablesByPitId(pitId: any, options: {}): Observable<HttpResponse<Object>>;\n    updateTopologyNode(nodeId: any, params: {}): Observable<HttpResponse<Object>>;\n    updateTopologyNodeStatus(nodeId: any, params: {}): Observable<HttpResponse<Object>>;\n    createNodeOnTree(params: {}): Observable<HttpResponse<Object>>;\n    createNodeAccessGroup(params: {}): Observable<HttpResponse<Object>>;\n    updateAccessGroupNode(groupId: any, params: {}): Observable<HttpResponse<Object>>;\n    deleteAccessGroupNode(groupId: any, params: {}): Observable<HttpResponse<Object>>;\n    getAccessGroupUsers(groupId: any, options: {}): Observable<HttpResponse<Object>>;\n    getTableProperties(topologyId: any, options: {}): Observable<HttpResponse<Object>>;\n    createNodeNamesObject(nodesData: any): {};\n    simplifyTopologyTypes(typesArr: any): Map<number, object>;\n    getSiteChildren(nodeNames: any): any;\n    getSites(nodeNames: any): {};\n    getChildren(siteObj: any, nodeNames: any): any[];\n    getOtherChildren(childrenArr: any, nodeNames: any): any;\n    getAllChildren(childrenArr: any): any;\n    createVirtualGroup(node: any): Observable<HttpResponse<Object>>;\n    updateVirtualGroup(groupId: any, object: any): Observable<HttpResponse<Object>>;\n    deleteVirtualGroup(groupId: any, object: any): Observable<import(\"@angular/common/http\").HttpEvent<HttpResponse<Object>>>;\n    getVirtualGroups(userId: any): Observable<HttpResponse<Object>>;\n}\n"]}