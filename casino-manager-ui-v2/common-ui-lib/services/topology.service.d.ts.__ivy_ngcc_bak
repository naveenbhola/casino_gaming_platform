import { EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';
import { TopologyNodeInterface, TopologyTypesInterface } from '../interface/topology-types.interface';
import { TopologytreeService } from './topologytree.service';
export declare class TopologyService {
    private http;
    private treeService;
    topologyTypes: any;
    topologyNodes: any;
    topologyNodeNames: any;
    siteChildren: any;
    accessGroupNodes: any;
    virtualGroupNodes: any;
    unAssignedNodes: any;
    unassignedNodesArr: any;
    accessGroupParams: HttpParams;
    virtualGroupParams: HttpParams;
    initialized: EventEmitter<any>;
    nodeClicked: EventEmitter<any>;
    terminalClicked: EventEmitter<any>;
    areasLabelClicked: EventEmitter<any>;
    nodeUpdated: EventEmitter<any>;
    nodeDragged: EventEmitter<any>;
    constructor(http: HttpClient, treeService: TopologytreeService);
    initTopology(): void;
    fetchTopologyData(): void;
    getAccessGroup(options: {}): Observable<HttpResponse<Object>>;
    getTopologyType(options: {}): Observable<TopologyTypesInterface[]>;
    getTopologyNodes(options: {}): Observable<TopologyNodeInterface[]>;
    getTopologyPits(options: {}): Observable<HttpResponse<Object>>;
    getTablesByPitId(pitId: any, options: {}): Observable<HttpResponse<Object>>;
    updateTopologyNode(nodeId: any, params: {}): Observable<HttpResponse<Object>>;
    updateTopologyNodeStatus(nodeId: any, params: {}): Observable<HttpResponse<Object>>;
    createNodeOnTree(params: {}): Observable<HttpResponse<Object>>;
    createNodeAccessGroup(params: {}): Observable<HttpResponse<Object>>;
    updateAccessGroupNode(groupId: any, params: {}): Observable<HttpResponse<Object>>;
    deleteAccessGroupNode(groupId: any, params: {}): Observable<HttpResponse<Object>>;
    getAccessGroupUsers(groupId: any, options: {}): Observable<HttpResponse<Object>>;
    getTableProperties(topologyId: any, options: {}): Observable<HttpResponse<Object>>;
    createNodeNamesObject(nodesData: any): {};
    simplifyTopologyTypes(typesArr: any): Map<number, object>;
    getSiteChildren(nodeNames: any): any;
    getSites(nodeNames: any): {};
    getChildren(siteObj: any, nodeNames: any): any[];
    getOtherChildren(childrenArr: any, nodeNames: any): any;
    getAllChildren(childrenArr: any): any;
    createVirtualGroup(node: any): Observable<HttpResponse<Object>>;
    updateVirtualGroup(groupId: any, object: any): Observable<HttpResponse<Object>>;
    deleteVirtualGroup(groupId: any, object: any): Observable<import("@angular/common/http").HttpEvent<HttpResponse<Object>>>;
    getVirtualGroups(userId: any): Observable<HttpResponse<Object>>;
}
