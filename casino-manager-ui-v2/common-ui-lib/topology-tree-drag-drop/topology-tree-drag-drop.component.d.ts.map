{"version":3,"file":"topology-tree-drag-drop.component.d.ts","sources":["topology-tree-drag-drop.component.d.ts"],"names":[],"mappingssourcesContent":["import { FlatTreeControl } from '@angular/cdk/tree';\nimport { ElementRef, EventEmitter, OnDestroy, OnInit, AfterViewInit } from '@angular/core';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport { TopologytreeService } from '../services/topologytree.service';\nimport { DragDropItemFlatNode, DragDropItemNode, TreeDragDropItemDataBase } from './topology-dragdrop-database';\nimport { TopologyService } from '../services/topology.service';\nimport { CageService } from '../services/cage.service';\nimport { CasinomanagerService } from '../services/casinomanager.service';\nimport { Router } from '@angular/router';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { FormBuilder } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nexport declare class TopologyTreeDragDropComponent implements OnInit, OnDestroy, AfterViewInit {\n    private database;\n    private _router;\n    private _topologyTreeService;\n    private _topologyService;\n    private _cageService;\n    private _casinoManagerService;\n    snackBar: MatSnackBar;\n    dialog: MatDialog;\n    fb: FormBuilder;\n    private jwtHelper;\n    private translate;\n    flatNodeMap: Map<DragDropItemFlatNode, DragDropItemNode>;\n    nestedNodeMap: Map<DragDropItemNode, DragDropItemFlatNode>;\n    treeControl: FlatTreeControl<DragDropItemFlatNode>;\n    treeFlattener: MatTreeFlattener<DragDropItemNode, DragDropItemFlatNode>;\n    dragNode: any;\n    dragNodeExpandOverWaitTimeMs: number;\n    dragNodeExpandOverNode: any;\n    dragNodeExpandOverTime: number;\n    dragNodeExpandOverArea: string;\n    emptyItem: ElementRef;\n    arrTrees: Array<any>;\n    topologyTreeConfig: import(\"../constants/url-topologytree.constants\").UrlTopologyTreeConstantsInterface;\n    assignedDataSource: MatTreeFlatDataSource<DragDropItemNode, DragDropItemFlatNode>;\n    unassignedDataSource: MatTreeFlatDataSource<DragDropItemNode, DragDropItemFlatNode>;\n    accessGroupDataSource: MatTreeFlatDataSource<DragDropItemNode, DragDropItemFlatNode>;\n    virtualGroupDataSource: MatTreeFlatDataSource<DragDropItemNode, DragDropItemFlatNode>;\n    arrNestedDataSource: any[];\n    accessGroupNodesLength: number;\n    assingedDataNodes: any;\n    nodeNames: any;\n    searchText: string;\n    nodeUpdated: any;\n    isEditable: boolean;\n    nodeToEdit: string;\n    changedName: string;\n    currentClickedNode: any;\n    isGroupNameInvalid: boolean;\n    selectedNode: string;\n    addNode: EventEmitter<any>;\n    permissionToAccess: boolean;\n    permissionToEditAG: any;\n    constructor(database: TreeDragDropItemDataBase, _router: Router, _topologyTreeService: TopologytreeService, _topologyService: TopologyService, _cageService: CageService, _casinoManagerService: CasinomanagerService, snackBar: MatSnackBar, dialog: MatDialog, fb: FormBuilder, jwtHelper: JwtHelperService, translate: TranslateService);\n    accessGroupForm: import(\"@angular/forms\").FormGroup;\n    accessGroupEditForm: import(\"@angular/forms\").FormGroup;\n    ngAfterViewInit(): void;\n    addFormValidations(): void;\n    ngOnInit(): void;\n    onitFunction(): void;\n    handleSubscribers(): void;\n    addAccessGroupToTopology(res: any): void;\n    addNodeToTopology(newNode: any): void;\n    updateEventObj(obj: any): void;\n    private assignTreeObject;\n    private databaseSubscriber;\n    private _createDataSources;\n    private _setUnassignedNodes;\n    private _setAccessGroupNodes;\n    private createAccessGroupNodes;\n    private updateTopologyNodes;\n    private updateNodeNames;\n    private _getAssignedNodes;\n    private setAssignedNodes;\n    private setTreeData;\n    private _getAssignedNestedNodes;\n    private _getflatDataToNested;\n    private setChildrenOfChildren;\n    private setParentChildren;\n    private checkIfChildren;\n    getLevel: (node: DragDropItemFlatNode) => number;\n    isExpandable: (node: DragDropItemFlatNode) => boolean;\n    getChildren: (node: DragDropItemNode) => DragDropItemNode[];\n    hasChild: (_: number, _nodeData: DragDropItemFlatNode) => boolean;\n    hasNoContent: (_: number, _nodeData: DragDropItemFlatNode) => boolean;\n    transformer: (node: DragDropItemNode, level: number) => DragDropItemFlatNode;\n    handleDragStart(event: any, node: any): boolean;\n    handleDragOver(event: any, node: any): void;\n    handleDrop(event: any, node: any): boolean;\n    handleDragEnd(event: any): void;\n    dragToAccessGroup(node: any, draggedNodeId: any): void;\n    dragNodeToAccess(siteChildren: any, accessNode: any, draggedNodeId: any, parentNode: any): void;\n    dragAssignedToAssigned(node: any, draggedNodeId: any, nodeDetail: any): void;\n    dragNodeToAssigned(allChildren: any, childTypeId: any, parentNodeId: any, childNodeId: any, nodeDetail: any, prevParentId: any): void;\n    dragUnassignedNode(node: any): void;\n    dragUnassignedToAssigned(allTypeChildren: any, unassignedNodeType: any, unassignedNodeDesc: any, unassignedNodeId: any, parentNodeId: any, unassignedNodeName: any): void;\n    handleClick(node: any, nodeData?: string): void;\n    checkSearchText(event: any): void;\n    filterAssignedNodes(keysArr: any): void;\n    rectifyFilteredObject(obj: any, keys: any): any;\n    cancelSearch(): void;\n    openTableProperties(clickedTable: any): void;\n    ngOnDestroy(): void;\n    deleteAccessGroup(node: any): void;\n    isLastChild(node: any, nodeNames: any, accessNodes: any): boolean;\n    isChildOfActiveAG(node: any, nodeNames: any, accessNodes: any): void;\n    removeAccessGroup(node: any, accessNodes: any): void;\n    removeAccessGroupChild(node: any, accessNodes: any, nodeNames: any): void;\n    isActiveAccessGroup(node: any, nodeNames: any, accessNodes: any): void;\n    editAccessGroupName(node: any): void;\n    getNodeName(value: any): void;\n    updateAccessGroup(): void;\n    updateUnassignedItems(): void;\n    updateAssignedNodes(): void;\n    updateNodeName(node: any, formName: any): void;\n    isDuplicateName(formName: any): boolean;\n    validateGroupName: ErrorStateMatcher;\n    validateAccessGroupName: ErrorStateMatcher;\n    clearNodeName(): void;\n    valChangeFunction(evt: any, gName: any, fName: any): void;\n    addToTopologyNodesArr(res: any, prevParentId?: number): void;\n    deleteFromTopologyNodesArr(prevParentId: any, res: any): void;\n    isTerminal(draggedNodeId: any): boolean;\n    nodeAlreadyExists(draggedNodeId: any, node: any): boolean;\n    openConfirmDeleteBox(node: any, accessNodes: any, nodeNames: any): void;\n    isTerminalOfPit(node: any): boolean;\n}\n"]}