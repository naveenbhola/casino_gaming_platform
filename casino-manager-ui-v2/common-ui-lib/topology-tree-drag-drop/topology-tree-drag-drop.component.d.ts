import { FlatTreeControl } from '@angular/cdk/tree';
import { ElementRef, EventEmitter, OnDestroy, OnInit, AfterViewInit } from '@angular/core';
import { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';
import { TopologytreeService } from '../services/topologytree.service';
import { DragDropItemFlatNode, DragDropItemNode, TreeDragDropItemDataBase } from './topology-dragdrop-database';
import { TopologyService } from '../services/topology.service';
import { CageService } from '../services/cage.service';
import { CasinomanagerService } from '../services/casinomanager.service';
import { Router } from '@angular/router';
import { ErrorStateMatcher } from '@angular/material/core';
import { MatDialog } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { FormBuilder } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { JwtHelperService } from '@auth0/angular-jwt';
import * as ɵngcc0 from '@angular/core';
export declare class TopologyTreeDragDropComponent implements OnInit, OnDestroy, AfterViewInit {
    private database;
    private _router;
    private _topologyTreeService;
    private _topologyService;
    private _cageService;
    private _casinoManagerService;
    snackBar: MatSnackBar;
    dialog: MatDialog;
    fb: FormBuilder;
    private jwtHelper;
    private translate;
    flatNodeMap: Map<DragDropItemFlatNode, DragDropItemNode>;
    nestedNodeMap: Map<DragDropItemNode, DragDropItemFlatNode>;
    treeControl: FlatTreeControl<DragDropItemFlatNode>;
    treeFlattener: MatTreeFlattener<DragDropItemNode, DragDropItemFlatNode>;
    dragNode: any;
    dragNodeExpandOverWaitTimeMs: number;
    dragNodeExpandOverNode: any;
    dragNodeExpandOverTime: number;
    dragNodeExpandOverArea: string;
    emptyItem: ElementRef;
    arrTrees: Array<any>;
    topologyTreeConfig: import("../constants/url-topologytree.constants").UrlTopologyTreeConstantsInterface;
    assignedDataSource: MatTreeFlatDataSource<DragDropItemNode, DragDropItemFlatNode>;
    unassignedDataSource: MatTreeFlatDataSource<DragDropItemNode, DragDropItemFlatNode>;
    accessGroupDataSource: MatTreeFlatDataSource<DragDropItemNode, DragDropItemFlatNode>;
    virtualGroupDataSource: MatTreeFlatDataSource<DragDropItemNode, DragDropItemFlatNode>;
    arrNestedDataSource: any[];
    accessGroupNodesLength: number;
    assingedDataNodes: any;
    nodeNames: any;
    searchText: string;
    nodeUpdated: any;
    isEditable: boolean;
    nodeToEdit: string;
    changedName: string;
    currentClickedNode: any;
    isGroupNameInvalid: boolean;
    selectedNode: string;
    addNode: EventEmitter<any>;
    permissionToAccess: boolean;
    permissionToEditAG: any;
    constructor(database: TreeDragDropItemDataBase, _router: Router, _topologyTreeService: TopologytreeService, _topologyService: TopologyService, _cageService: CageService, _casinoManagerService: CasinomanagerService, snackBar: MatSnackBar, dialog: MatDialog, fb: FormBuilder, jwtHelper: JwtHelperService, translate: TranslateService);
    accessGroupForm: import("@angular/forms").FormGroup;
    accessGroupEditForm: import("@angular/forms").FormGroup;
    ngAfterViewInit(): void;
    addFormValidations(): void;
    ngOnInit(): void;
    onitFunction(): void;
    handleSubscribers(): void;
    addAccessGroupToTopology(res: any): void;
    addNodeToTopology(newNode: any): void;
    updateEventObj(obj: any): void;
    private assignTreeObject;
    private databaseSubscriber;
    private _createDataSources;
    private _setUnassignedNodes;
    private _setAccessGroupNodes;
    private createAccessGroupNodes;
    private updateTopologyNodes;
    private updateNodeNames;
    private _getAssignedNodes;
    private setAssignedNodes;
    private setTreeData;
    private _getAssignedNestedNodes;
    private _getflatDataToNested;
    private setChildrenOfChildren;
    private setParentChildren;
    private checkIfChildren;
    getLevel: (node: DragDropItemFlatNode) => number;
    isExpandable: (node: DragDropItemFlatNode) => boolean;
    getChildren: (node: DragDropItemNode) => DragDropItemNode[];
    hasChild: (_: number, _nodeData: DragDropItemFlatNode) => boolean;
    hasNoContent: (_: number, _nodeData: DragDropItemFlatNode) => boolean;
    transformer: (node: DragDropItemNode, level: number) => DragDropItemFlatNode;
    handleDragStart(event: any, node: any): boolean;
    handleDragOver(event: any, node: any): void;
    handleDrop(event: any, node: any): boolean;
    handleDragEnd(event: any): void;
    dragToAccessGroup(node: any, draggedNodeId: any): void;
    dragNodeToAccess(siteChildren: any, accessNode: any, draggedNodeId: any, parentNode: any): void;
    dragAssignedToAssigned(node: any, draggedNodeId: any, nodeDetail: any): void;
    dragNodeToAssigned(allChildren: any, childTypeId: any, parentNodeId: any, childNodeId: any, nodeDetail: any, prevParentId: any): void;
    dragUnassignedNode(node: any): void;
    dragUnassignedToAssigned(allTypeChildren: any, unassignedNodeType: any, unassignedNodeDesc: any, unassignedNodeId: any, parentNodeId: any, unassignedNodeName: any): void;
    handleClick(node: any, nodeData?: string): void;
    checkSearchText(event: any): void;
    filterAssignedNodes(keysArr: any): void;
    rectifyFilteredObject(obj: any, keys: any): any;
    cancelSearch(): void;
    openTableProperties(clickedTable: any): void;
    ngOnDestroy(): void;
    deleteAccessGroup(node: any): void;
    isLastChild(node: any, nodeNames: any, accessNodes: any): boolean;
    isChildOfActiveAG(node: any, nodeNames: any, accessNodes: any): void;
    removeAccessGroup(node: any, accessNodes: any): void;
    removeAccessGroupChild(node: any, accessNodes: any, nodeNames: any): void;
    isActiveAccessGroup(node: any, nodeNames: any, accessNodes: any): void;
    editAccessGroupName(node: any): void;
    getNodeName(value: any): void;
    updateAccessGroup(): void;
    updateUnassignedItems(): void;
    updateAssignedNodes(): void;
    updateNodeName(node: any, formName: any): void;
    isDuplicateName(formName: any): boolean;
    validateGroupName: ErrorStateMatcher;
    validateAccessGroupName: ErrorStateMatcher;
    clearNodeName(): void;
    valChangeFunction(evt: any, gName: any, fName: any): void;
    addToTopologyNodesArr(res: any, prevParentId?: number): void;
    deleteFromTopologyNodesArr(prevParentId: any, res: any): void;
    isTerminal(draggedNodeId: any): boolean;
    nodeAlreadyExists(draggedNodeId: any, node: any): boolean;
    openConfirmDeleteBox(node: any, accessNodes: any, nodeNames: any): void;
    isTerminalOfPit(node: any): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TopologyTreeDragDropComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TopologyTreeDragDropComponent, "app-toplogy-tree-dragdrop", never, { "permissionToAccess": "permissionToAccess"; "arrTrees": "arrTrees"; "permissionToEditAG": "permissionToEditAG"; }, { "addNode": "addNode"; }, never, never>;
}

//# sourceMappingURL=topology-tree-drag-drop.component.d.ts.map