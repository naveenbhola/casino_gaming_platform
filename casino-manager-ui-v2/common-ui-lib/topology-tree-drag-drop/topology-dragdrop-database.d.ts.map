{"version":3,"file":"topology-dragdrop-database.d.ts","sources":["topology-dragdrop-database.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { BehaviorSubject } from 'rxjs';\nexport declare class DragDropItemNode {\n    children: DragDropItemNode[];\n    item: string;\n    dataSourceName: string;\n    nodeId: number;\n    parentName: string;\n}\nexport declare class DragDropItemFlatNode {\n    item: string;\n    level: number;\n    expandable: boolean;\n    dataSourceName: string;\n    nodeId: number;\n    parentName: string;\n}\nexport declare class TreeDragDropItemDataBase {\n    dataChangeAssigned: BehaviorSubject<DragDropItemNode[]>;\n    dataChangeUnassigned: BehaviorSubject<DragDropItemNode[]>;\n    dataChangeAG: BehaviorSubject<DragDropItemNode[]>;\n    dataChangeVG: BehaviorSubject<DragDropItemNode[]>;\n    data(node: DragDropItemNode): DragDropItemNode[];\n    /**\n     * if tree.expandAll called and get an erro of dataNodes we need to set\n        this.treeControl.dataNodes = data; in all four group.\n     * @param data\n     * @param node\n     */\n    dispatchNextData(data: DragDropItemNode[], node: DragDropItemNode): void;\n    constructor();\n    initialize(): void;\n    buildFileTree(obj: object, level: number, dataSourceName: string): DragDropItemNode[];\n    insertItem(parent: DragDropItemNode, name: string): DragDropItemNode;\n    insertItemAbove(node: DragDropItemNode, name: string): DragDropItemNode;\n    insertItemBelow(node: DragDropItemNode, name: string): DragDropItemNode;\n    getParentFromNodes(node: DragDropItemNode): DragDropItemNode;\n    getParent(currentRoot: DragDropItemNode, node: DragDropItemNode): DragDropItemNode;\n    updateItem(node: DragDropItemNode, name: string): void;\n    deleteItem(node: DragDropItemNode): void;\n    copyPasteItem(from: DragDropItemNode, to: DragDropItemNode): DragDropItemNode;\n    copyPasteItemAbove(from: DragDropItemNode, to: DragDropItemNode): DragDropItemNode;\n    copyPasteItemBelow(from: DragDropItemNode, to: DragDropItemNode): DragDropItemNode;\n    deleteNode(nodes: DragDropItemNode[], nodeToDelete: DragDropItemNode): void;\n}\n"]}