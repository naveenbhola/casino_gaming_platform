import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { urls } from '../constants/urls';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 *  providedIn: 'root', }) export class UserService { } 'root' means that we want provide the service at the root level (AppModule)
 *  When you provide the service at the root level, Angular creates a single, shared instance of service and injects into any class
 *  that asks for it.
 */
export class UserService {
    constructor(http) {
        this.http = http;
        this.userSearchComplexUrl = '';
        this.userSearchNormalUrl = '';
    }
    getComplexSearchedUsers() {
        return this.http.get(this.userSearchComplexUrl);
    }
    getNormalSearchedUsers(options) {
        const url = `${urls.user.usersPath}`;
        return this.http.get(url, options);
    }
    getUserById(userId, options) {
        const url = `${urls.user.usersPath}${userId}`;
        return this.http.get(url, options);
    }
    setFavoriteApp(paramObj, userId) {
        const url = `${urls.user.users}` + userId;
        return this.http.post(url, paramObj);
    }
    changeStatus(user, options = {}) {
        let url = `${urls.user.usersPath}${user.userId}/`;
        url += user.isActive === 1 ? 'reActivate' : 'suspend';
        return this.http.post(url, options);
    }
    getRoles(options) {
        return this.http.get(urls.user.roles, options);
    }
    createUpdateUser(options = { userId: 0 }) {
        if (options.userId) {
            const url = `${urls.user.usersPath}${options.userId}`;
            return this.http.put(url, options);
        }
        else {
            const url = `${urls.user.usersPath}`;
            return this.http.post(url, options);
        }
    }
    getAssignedRolesAppList(options) {
        return this.http.get(urls.user.applications, options);
    }
}
UserService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserService_Factory() { return new UserService(i0.ɵɵinject(i1.HttpClient)); }, token: UserService, providedIn: "root" });
UserService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
UserService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29tbW9uLXVpLXYyL3NyYy9hcHAvc2VydmljZXMvdXNlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFVBQVUsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBRTlELE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7O0FBK0J2Qzs7OztHQUlHO0FBSUgsTUFBTSxPQUFPLFdBQVc7SUFJcEIsWUFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUhwQyx5QkFBb0IsR0FBRyxFQUFFLENBQUM7UUFDMUIsd0JBQW1CLEdBQUcsRUFBRSxDQUFDO0lBR3pCLENBQUM7SUFFRCx1QkFBdUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQW9DLENBQUM7SUFDdkYsQ0FBQztJQUVELHNCQUFzQixDQUFDLE9BQVk7UUFDL0IsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQXVCLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsV0FBVyxDQUFDLE1BQU0sRUFBRSxPQUFXO1FBQzNCLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFDOUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBdUIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxjQUFjLENBQUMsUUFBUSxFQUFFLE1BQU07UUFDM0IsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLE1BQU0sQ0FBQztRQUMxQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsWUFBWSxDQUFDLElBQUksRUFBRSxPQUFPLEdBQUcsRUFBRTtRQUMzQixJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQztRQUNsRCxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3RELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQXVCLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsUUFBUSxDQUFDLE9BQVc7UUFDaEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBdUIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVELGdCQUFnQixDQUFDLE9BQU8sR0FBRyxFQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUM7UUFFbEMsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ2hCLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3RELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQXVCLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM1RDthQUFNO1lBQ0gsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3JDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQXVCLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM3RDtJQUVMLENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxPQUFXO1FBQy9CLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQXVCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hGLENBQUM7Ozs7WUFyREosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7WUF4Q08sVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0h0dHBDbGllbnQsIEh0dHBSZXNwb25zZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7dXJsc30gZnJvbSAnLi4vY29uc3RhbnRzL3VybHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJTZWFyY2hDb21wbGV4IHtcbiAgICBhdXRoSGlzdG9yeUlkOiBudW1iZXI7XG4gICAgY3JlYXRpb25EYXRlOiBzdHJpbmc7XG4gICAgZW1wbG95ZWVJZDogbnVtYmVyO1xuICAgIGZpcnN0TmFtZTogc3RyaW5nO1xuICAgIGlwOiBzdHJpbmc7XG4gICAgbGFzdE5hbWU6IHN0cmluZztcbiAgICBsb2NhdGlvbjogc3RyaW5nO1xuICAgIG1ldGE6IHN0cmluZztcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbiAgICB1c2VySWQ6IG51bWJlcjtcbiAgICB1c2VyTmFtZTogc3RyaW5nO1xuICAgIHVzZXJUeXBlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlclNlYXJjaE5vcm1hbCB7XG4gICAgZW1wbG95ZWVOdW1iZXI6IG51bWJlcjtcbiAgICBmaXJzdE5hbWU6IHN0cmluZztcbiAgICBpc0FjdGl2ZTogbnVtYmVyO1xuICAgIGxhbmd1YWdlOiBzdHJpbmc7XG4gICAgbGFzdE5hbWU6IHN0cmluZztcbiAgICByb2xlczogQXJyYXk8YW55PjtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIHVzZXJBY2Nlc3NHcm91cHM6IEFycmF5PGFueT47XG4gICAgdXNlcklkOiBudW1iZXI7XG4gICAgdXNlck5hbWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiAgcHJvdmlkZWRJbjogJ3Jvb3QnLCB9KSBleHBvcnQgY2xhc3MgVXNlclNlcnZpY2UgeyB9ICdyb290JyBtZWFucyB0aGF0IHdlIHdhbnQgcHJvdmlkZSB0aGUgc2VydmljZSBhdCB0aGUgcm9vdCBsZXZlbCAoQXBwTW9kdWxlKVxuICogIFdoZW4geW91IHByb3ZpZGUgdGhlIHNlcnZpY2UgYXQgdGhlIHJvb3QgbGV2ZWwsIEFuZ3VsYXIgY3JlYXRlcyBhIHNpbmdsZSwgc2hhcmVkIGluc3RhbmNlIG9mIHNlcnZpY2UgYW5kIGluamVjdHMgaW50byBhbnkgY2xhc3NcbiAqICB0aGF0IGFza3MgZm9yIGl0LlxuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJTZXJ2aWNlIHtcbiAgICB1c2VyU2VhcmNoQ29tcGxleFVybCA9ICcnO1xuICAgIHVzZXJTZWFyY2hOb3JtYWxVcmwgPSAnJztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xuICAgIH1cblxuICAgIGdldENvbXBsZXhTZWFyY2hlZFVzZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLnVzZXJTZWFyY2hDb21wbGV4VXJsKSBhcyBPYnNlcnZhYmxlPFVzZXJTZWFyY2hDb21wbGV4W10+O1xuICAgIH1cblxuICAgIGdldE5vcm1hbFNlYXJjaGVkVXNlcnMob3B0aW9ucz86IHt9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8T2JqZWN0Pj4ge1xuICAgICAgICBjb25zdCB1cmwgPSBgJHt1cmxzLnVzZXIudXNlcnNQYXRofWA7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PEh0dHBSZXNwb25zZTxPYmplY3Q+Pih1cmwsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGdldFVzZXJCeUlkKHVzZXJJZCwgb3B0aW9uczoge30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxPYmplY3Q+PiB7XG4gICAgICAgIGNvbnN0IHVybCA9IGAke3VybHMudXNlci51c2Vyc1BhdGh9JHt1c2VySWR9YDtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8SHR0cFJlc3BvbnNlPE9iamVjdD4+KHVybCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgc2V0RmF2b3JpdGVBcHAocGFyYW1PYmosIHVzZXJJZCkge1xuICAgICAgICBjb25zdCB1cmwgPSBgJHt1cmxzLnVzZXIudXNlcnN9YCArIHVzZXJJZDtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHVybCwgcGFyYW1PYmopO1xuICAgIH1cblxuICAgIGNoYW5nZVN0YXR1cyh1c2VyLCBvcHRpb25zID0ge30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxPYmplY3Q+PiB7XG4gICAgICAgIGxldCB1cmwgPSBgJHt1cmxzLnVzZXIudXNlcnNQYXRofSR7dXNlci51c2VySWR9L2A7XG4gICAgICAgIHVybCArPSB1c2VyLmlzQWN0aXZlID09PSAxID8gJ3JlQWN0aXZhdGUnIDogJ3N1c3BlbmQnO1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8SHR0cFJlc3BvbnNlPE9iamVjdD4+KHVybCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZ2V0Um9sZXMob3B0aW9uczoge30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxPYmplY3Q+PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PEh0dHBSZXNwb25zZTxPYmplY3Q+Pih1cmxzLnVzZXIucm9sZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGNyZWF0ZVVwZGF0ZVVzZXIob3B0aW9ucyA9IHt1c2VySWQ6IDB9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8T2JqZWN0Pj4ge1xuXG4gICAgICAgIGlmIChvcHRpb25zLnVzZXJJZCkge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gYCR7dXJscy51c2VyLnVzZXJzUGF0aH0ke29wdGlvbnMudXNlcklkfWA7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLnB1dDxIdHRwUmVzcG9uc2U8T2JqZWN0Pj4odXJsLCBvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGAke3VybHMudXNlci51c2Vyc1BhdGh9YDtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxIdHRwUmVzcG9uc2U8T2JqZWN0Pj4odXJsLCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgZ2V0QXNzaWduZWRSb2xlc0FwcExpc3Qob3B0aW9uczoge30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxPYmplY3Q+PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PEh0dHBSZXNwb25zZTxPYmplY3Q+Pih1cmxzLnVzZXIuYXBwbGljYXRpb25zLCBvcHRpb25zKTtcbiAgICB9XG5cbn1cbiJdfQ==