import { Injectable } from '@angular/core';
import { urls } from '../constants/urls';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class CasinomanagerService {
    constructor(http) {
        this.http = http;
    }
    getTopologyStatisticsTabularView(options) {
        const url = urls.casinoMgr.topologyStatisticsTabularView;
        return this.http.get(url, options);
    }
    getTopologyStatsTabularView(options) {
        const url = urls.casinoMgr.topologyStatsTabularView;
        return this.http.get(url, options);
    }
    getTopologyStatisticsGridView(options) {
        const url = urls.casinoMgr.topologyStatisticsGridView;
        return this.http.get(url, options);
    }
    getTopologyStatsByTableType(options, url) {
        const finalUrl = urls.casinoMgr.topologyStatsByTableType + url;
        return this.http.get(finalUrl, options);
    }
    getTopologyStatistics(gamingDay, topologyIds, viewId, options) {
        const url = `${urls.casinoMgr.topologyStatistics}?gamingDay=${gamingDay}&topologyIds=${topologyIds}&viewId=${viewId}`;
        return this.http.get(url, options);
    }
    getTopologyStatisticsForVirtualGroup(gamingDay, topologyGroupId, viewId, options) {
        const url = `${urls.casinoMgr.topologyStatisticsForVirtualGroup}?gamingDay=${gamingDay}&topologyGroupId=${topologyGroupId}&viewId=${viewId}`;
        return this.http.get(url, options);
    }
    getTopLosingCasino(gamingDay, topologyId) {
        const url = `${urls.casinoMgr.topLosingCasino}?gamingDay=${gamingDay}&topologyId=${topologyId}`;
        return this.http.get(url);
    }
    getTopWinningCasino(gamingDay, topologyId) {
        const url = `${urls.casinoMgr.topWinningCasino}?gamingDay=${gamingDay}&topologyId=${topologyId}`;
        return this.http.get(url);
    }
    getTopLosingPlayersVirtualGroup(gamingDay, topologyId) {
        const url = `${urls.casinoMgr.topLosingPlayersVirtualGroup}?gamingDay=${gamingDay}&topologyGroupId=${topologyId}`;
        return this.http.get(url);
    }
    getTopWinningPlayersVirtualGroup(gamingDay, topologyId) {
        const url = `${urls.casinoMgr.topWinningPlayersVirtualGroup}?gamingDay=${gamingDay}&topologyGroupId=${topologyId}`;
        return this.http.get(url);
    }
    getPlayerStatistics(options) {
        const url = urls.casinoMgr.playerStatistics;
        return this.http.get(url, options);
    }
    getPaginatedOpenerCloser(options) {
        const finalUrl = urls.cage.paginatedOpenerCloser;
        return this.http.get(finalUrl, options);
    }
    getPaginatedSearchManualRatings(url, options) {
        const finalUrl = urls.game.paginatedSearchManualRatings + url;
        return this.http.post(finalUrl, options);
    }
    getpaginatedSessions(payload, options) {
        const finalUrl = urls.game.paginatedSessions;
        return this.http.post(finalUrl, payload, options);
    }
    getpaginatedGames(options) {
        const finalUrl = urls.game.paginatedGames;
        return this.http.get(finalUrl, options);
    }
    getFilterForTable(options) {
        const url = urls.casinoMgr.tableFilter;
        return this.http.get(url, options);
    }
    getFilterForPlayer(options) {
        const url = urls.casinoMgr.playerFilter;
        return this.http.get(url, options);
    }
    getActivePlayer(options) {
        const url = urls.casinoMgr.activePlayer;
        return this.http.get(url, options);
    }
    getUserSearch(options) {
        const url = urls.casinoMgr.userSearch;
        return this.http.get(url, options);
    }
}
CasinomanagerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CasinomanagerService_Factory() { return new CasinomanagerService(i0.ɵɵinject(i1.HttpClient)); }, token: CasinomanagerService, providedIn: "root" });
CasinomanagerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
CasinomanagerService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,