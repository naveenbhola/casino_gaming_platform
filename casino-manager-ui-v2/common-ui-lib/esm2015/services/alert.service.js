import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { urls } from '../constants/urls';
export class AlertService {
    constructor(_http) {
        this._http = _http;
    }
    getAlertsData(url, options) {
        return this._http.get(url, options);
    }
    getEventData() {
    }
    getAlertCounts(topologyId) {
        const url = `${urls.alert.alertCountsPath}?topologyId=${topologyId}`;
        return this._http.get(url);
    }
    getAlertCountsByCategory(alertStatus, topologyId, category) {
        const url = `${urls.alert.alertCountsByCategoryPath}?alertStatus=${alertStatus}&topologyIds=${topologyId}&category=${category}`;
        return this._http.get(url);
    }
    getAlertCountsByCategoryVG(alertStatus, topologyId, category) {
        const url = `${urls.alert.alertCountsByCategoryPath}?alertStatus=${alertStatus}&topologyGroupId=${topologyId}&category=${category}`;
        return this._http.get(url);
    }
    changeStatus(statusUrl, statusObj) {
        return this._http.post(statusUrl, statusObj);
    }
    changeSeverity() {
    }
    addNote(noteUrl, noteObj) {
        return this._http.post(noteUrl, noteObj);
    }
    saveCustomerKnowledgeBase(baseUrl, baseObj) {
        return this._http.post(baseUrl, baseObj);
    }
    saveTableCustomerKnowledgeBase(baseUrl, baseObj) {
        return this._http.put(baseUrl, baseObj);
    }
    getAlertConfiguration(options = {}) {
        return this._http.get(urls.alert.alertConfigurationPath, options);
    }
    updateAlertConfiguration(data = {}, params = {}) {
        return this._http.post(urls.alert.alertConfigurationPath, data, params);
    }
    getTableAlertsCount(options) {
        return this._http.get(urls.alert.tableAlerts, options);
    }
}
AlertService.decorators = [
    { type: Injectable }
];
AlertService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NvbW1vbi11aS12Mi9zcmMvYXBwL3NlcnZpY2VzL2FsZXJ0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsVUFBVSxFQUFlLE1BQU0sc0JBQXNCLENBQUM7QUFFOUQsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBR3ZDLE1BQU0sT0FBTyxZQUFZO0lBQ3JCLFlBQW9CLEtBQWlCO1FBQWpCLFVBQUssR0FBTCxLQUFLLENBQVk7SUFDckMsQ0FBQztJQUVELGFBQWEsQ0FBQyxHQUFHLEVBQUUsT0FBVztRQUMxQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUF1QixHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELFlBQVk7SUFFWixDQUFDO0lBRUQsY0FBYyxDQUFDLFVBQVU7UUFDckIsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsZUFBZSxVQUFVLEVBQUUsQ0FBQztRQUNyRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDRCx3QkFBd0IsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLFFBQVE7UUFDdEQsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLHlCQUF5QixnQkFBZ0IsV0FBVyxnQkFBZ0IsVUFBVSxhQUFhLFFBQVEsRUFBRSxDQUFDO1FBQ2hJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUssR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELDBCQUEwQixDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsUUFBUTtRQUN4RCxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMseUJBQXlCLGdCQUFnQixXQUFXLG9CQUFvQixVQUFVLGFBQWEsUUFBUSxFQUFFLENBQUM7UUFDcEksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBSyxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsWUFBWSxDQUFDLFNBQVMsRUFBRSxTQUFTO1FBQzdCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQXVCLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsY0FBYztJQUVkLENBQUM7SUFFRCxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU87UUFDcEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBdUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxPQUFPLEVBQUUsT0FBTztRQUN0QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUF1QixPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELDhCQUE4QixDQUFDLE9BQU8sRUFBRSxPQUFPO1FBQzNDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQXVCLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQscUJBQXFCLENBQUMsT0FBTyxHQUFHLEVBQUU7UUFDOUIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHNCQUFzQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCx3QkFBd0IsQ0FBQyxJQUFJLEdBQUcsRUFBRSxFQUFFLE1BQU0sR0FBRyxFQUFFO1FBQzNDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELG1CQUFtQixDQUFDLE9BQVc7UUFDM0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzRCxDQUFDOzs7WUF6REosVUFBVTs7O1lBSkgsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0h0dHBDbGllbnQsIEh0dHBSZXNwb25zZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7dXJsc30gZnJvbSAnLi4vY29uc3RhbnRzL3VybHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWxlcnRTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9odHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgfVxuXG4gICAgZ2V0QWxlcnRzRGF0YSh1cmwsIG9wdGlvbnM6IHt9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8T2JqZWN0Pj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQ8SHR0cFJlc3BvbnNlPE9iamVjdD4+KHVybCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZ2V0RXZlbnREYXRhKCk6IHZvaWQge1xuXG4gICAgfVxuXG4gICAgZ2V0QWxlcnRDb3VudHModG9wb2xvZ3lJZCk6IE9ic2VydmFibGU8W10+IHtcbiAgICAgICAgY29uc3QgdXJsID0gYCR7dXJscy5hbGVydC5hbGVydENvdW50c1BhdGh9P3RvcG9sb2d5SWQ9JHt0b3BvbG9neUlkfWA7XG4gICAgICAgIHJldHVybiB0aGlzLl9odHRwLmdldDxbXT4odXJsKTtcbiAgICB9XG4gICAgZ2V0QWxlcnRDb3VudHNCeUNhdGVnb3J5KGFsZXJ0U3RhdHVzLCB0b3BvbG9neUlkLCBjYXRlZ29yeSk6IE9ic2VydmFibGU8W10+IHtcbiAgICAgICAgY29uc3QgdXJsID0gYCR7dXJscy5hbGVydC5hbGVydENvdW50c0J5Q2F0ZWdvcnlQYXRofT9hbGVydFN0YXR1cz0ke2FsZXJ0U3RhdHVzfSZ0b3BvbG9neUlkcz0ke3RvcG9sb2d5SWR9JmNhdGVnb3J5PSR7Y2F0ZWdvcnl9YDtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0PFtdPih1cmwpO1xuICAgIH1cblxuICAgIGdldEFsZXJ0Q291bnRzQnlDYXRlZ29yeVZHKGFsZXJ0U3RhdHVzLCB0b3BvbG9neUlkLCBjYXRlZ29yeSk6IE9ic2VydmFibGU8W10+IHtcbiAgICAgICAgY29uc3QgdXJsID0gYCR7dXJscy5hbGVydC5hbGVydENvdW50c0J5Q2F0ZWdvcnlQYXRofT9hbGVydFN0YXR1cz0ke2FsZXJ0U3RhdHVzfSZ0b3BvbG9neUdyb3VwSWQ9JHt0b3BvbG9neUlkfSZjYXRlZ29yeT0ke2NhdGVnb3J5fWA7XG4gICAgICAgIHJldHVybiB0aGlzLl9odHRwLmdldDxbXT4odXJsKTtcbiAgICB9XG5cbiAgICBjaGFuZ2VTdGF0dXMoc3RhdHVzVXJsLCBzdGF0dXNPYmopOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxPYmplY3Q+PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9odHRwLnBvc3Q8SHR0cFJlc3BvbnNlPE9iamVjdD4+KHN0YXR1c1VybCwgc3RhdHVzT2JqKTtcbiAgICB9XG5cbiAgICBjaGFuZ2VTZXZlcml0eSgpOiB2b2lkIHtcblxuICAgIH1cblxuICAgIGFkZE5vdGUobm90ZVVybCwgbm90ZU9iaik6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPE9iamVjdD4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHAucG9zdDxIdHRwUmVzcG9uc2U8T2JqZWN0Pj4obm90ZVVybCwgbm90ZU9iaik7XG4gICAgfVxuXG4gICAgc2F2ZUN1c3RvbWVyS25vd2xlZGdlQmFzZShiYXNlVXJsLCBiYXNlT2JqKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8T2JqZWN0Pj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faHR0cC5wb3N0PEh0dHBSZXNwb25zZTxPYmplY3Q+PihiYXNlVXJsLCBiYXNlT2JqKTtcbiAgICB9XG5cbiAgICBzYXZlVGFibGVDdXN0b21lcktub3dsZWRnZUJhc2UoYmFzZVVybCwgYmFzZU9iaik6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPE9iamVjdD4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHAucHV0PEh0dHBSZXNwb25zZTxPYmplY3Q+PihiYXNlVXJsLCBiYXNlT2JqKTtcbiAgICB9XG5cbiAgICBnZXRBbGVydENvbmZpZ3VyYXRpb24ob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9odHRwLmdldCh1cmxzLmFsZXJ0LmFsZXJ0Q29uZmlndXJhdGlvblBhdGgsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHVwZGF0ZUFsZXJ0Q29uZmlndXJhdGlvbihkYXRhID0ge30sIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9odHRwLnBvc3QodXJscy5hbGVydC5hbGVydENvbmZpZ3VyYXRpb25QYXRoLCBkYXRhLCBwYXJhbXMpO1xuICAgIH1cblxuICAgIGdldFRhYmxlQWxlcnRzQ291bnQob3B0aW9uczoge30pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHVybHMuYWxlcnQudGFibGVBbGVydHMsIG9wdGlvbnMpO1xuICAgIH1cbn1cbiJdfQ==