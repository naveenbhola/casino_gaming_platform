import { EventEmitter, Injectable } from '@angular/core';
import { forkJoin } from 'rxjs';
import { HttpClient, HttpParams } from '@angular/common/http';
import { urls } from '../constants/urls';
import { TopologytreeService } from './topologytree.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./topologytree.service";
export class TopologyService {
    constructor(http, treeService) {
        this.http = http;
        this.treeService = treeService;
        this.accessGroupParams = new HttpParams().set('groupType', 'ACCESS');
        this.virtualGroupParams = new HttpParams().set('groupType', 'VIRTUAL');
        this.initialized = new EventEmitter();
        this.nodeClicked = new EventEmitter();
        this.terminalClicked = new EventEmitter();
        this.areasLabelClicked = new EventEmitter();
        this.nodeUpdated = new EventEmitter();
        this.nodeDragged = new EventEmitter();
        this.initTopology();
    }
    initTopology() {
        //Need To Fix
        if (!this.topologyTypes && !this.topologyNodes && !this.accessGroupNodes) {
            //GR-3058 changes.authValues clientId
            const authValues = JSON.parse(localStorage.getItem('authValues'));
            if (!authValues) {
                this.fetchTopologyData();
            }
            else {
                if (authValues && authValues.clientId !== 'lgn') {
                    this.fetchTopologyData();
                }
            }
        }
        // if (!this.virtualGroupNodes) {
        //     this.fetchTopologyDataWithVG();
        // }
    }
    fetchTopologyData() {
        forkJoin(this.getTopologyType({}), this.treeService.getTopologyNodes(urls.topologyTree.topologyTreeNodesUrl), this.treeService.getAccessOrVirtualGroupNodes(urls.topologyTree.accessGroupNodesUrl, this.accessGroupParams))
            .subscribe((result) => {
            this.topologyTypes = this.simplifyTopologyTypes(result[0]);
            this.topologyNodes = result[1];
            this.topologyNodeNames = this.createNodeNamesObject(result[1]);
            this.siteChildren = this.getSiteChildren(this.topologyNodeNames);
            // this.getCompanyNodeId();
            this.accessGroupNodes = result[2];
            if (result.length > 0) {
                this.initialized.next('nodesInitialized');
            }
        });
    }
    // fetchTopologyDataWithVG() {
    //     forkJoin(
    //         this.getTopologyType({}),
    //         this.treeService.getTopologyNodes(urls.topologyTree.topologyTreeNodesUrl),
    //         this.treeService.getAccessOrVirtualGroupNodes(urls.topologyTree.accessGroupNodesUrl, this.virtualGroupParams))
    //         .subscribe((result) => {
    //             //console.log(' fetchTopologyDataWithVGfork join result', JSON.stringify(result));
    //             this.topologyTypes = this.simplifyTopologyTypes(result[0]);
    //             this.topologyNodes = result[1];
    //             //console.log("this.topologyNodes"+JSON.stringify(this.topologyNodes))
    //             this.topologyNodeNames = this.createNodeNamesObject(result[1]);
    //             //this.getCompanyNodeId();
    //             this.siteChildren = this.getSiteChildren(this.topologyNodeNames);
    //             this.virtualGroupNodes = result[2];
    //             if (result.length > 0) {
    //                 this.initialized.next('nodesInitializedWithVg');
    //             }
    //         });
    // }
    // getCompanyNodeId(){
    //     for (const key in this.topologyNodeNames){
    //         if (this.topologyNodeNames[key].type === 100){
    //             this.companyNode = {
    //                 "nodeId": this.topologyNodeNames[key].nodeId,
    //                 "name": this.topologyNodeNames[key].name,
    //                 "shortName": this.topologyNodeNames[key].shortName
    //             }
    //                 this.topologyNodeNames[key].nodeId;
    //             console.log("this.companyNode "+JSON.stringify(this.companyNode ))
    //         }
    //     }
    // }
    getAccessGroup(options) {
        const url = `${urls.topology.topologyGroups}`;
        return this.http.get(url, options);
    }
    getTopologyType(options) {
        return this.http.get(urls.topology.topologyTypes, options);
    }
    getTopologyNodes(options) {
        return this.http.get(urls.topology.topologyNodes, options);
    }
    getTopologyPits(options) {
        const url = `${urls.topology.topologyNodes}?typeId=400`;
        return this.http.get(url, options);
    }
    getTablesByPitId(pitId, options) {
        const url = `${urls.topology.topologyNodes}?parentId=${pitId}`;
        return this.http.get(url, options);
    }
    updateTopologyNode(nodeId, params) {
        const url = `${urls.topologyTree.topologyNodesUrls}${nodeId}`;
        return this.http.post(url, params);
    }
    updateTopologyNodeStatus(nodeId, params) {
        const url = `${urls.topologyTree.topologyNodesUrls}${nodeId}`;
        return this.http.put(url, params);
    }
    createNodeOnTree(params) {
        const url = `${urls.topologyTree.topologyNodesUrls}`;
        return this.http.post(url, params);
    }
    createNodeAccessGroup(params) {
        const url = `${urls.topologyTree.accessGroupNodesUrl}`;
        return this.http.post(url, params);
    }
    updateAccessGroupNode(groupId, params) {
        const url = `${urls.topologyTree.accessGroupNodesUrl}${groupId}`;
        return this.http.put(url, params);
    }
    deleteAccessGroupNode(groupId, params) {
        const url = `${urls.topologyTree.accessGroupNodesUrl}${groupId}`;
        return this.http.delete(url, params);
    }
    getAccessGroupUsers(groupId, options) {
        const url = `${urls.user.usersPath}?topologyGroup=${groupId}`;
        return this.http.get(url, options);
    }
    getTableProperties(topologyId, options) {
        const tablePropertiesArr = ['com.wdts.table.num.player.positions', 'com.wdts.table.rfid.enabled', 'com.wdts.table.lucky6.enabled', 'com.wdts.table.lucky6.antenna'];
        const url = `${urls.config.configurations}devices?topologyId=${topologyId}&propertyCodes=${tablePropertiesArr}&templateTypeCode=BACCARAT`;
        return this.http.get(url, options);
    }
    // getCurrentGamingDay(topologyId): Observable<HttpResponse<Object>> {
    //     const url = `${urls.cage.localGamingDay}?topologyId=${topologyId}`;
    //     console.log("topology service"+url)
    //     return this.http.get<HttpResponse<Object>>(url);
    // }
    createNodeNamesObject(nodesData) {
        const namesObj = {};
        for (const obj in nodesData) {
            if (nodesData.hasOwnProperty(obj) && nodesData[obj].length > 0) {
                for (let i = 0, len = nodesData[obj].length; i < len; i++) {
                    namesObj[nodesData[obj][i].nodeId] = nodesData[obj][i];
                }
            }
        }
        return namesObj;
    }
    simplifyTopologyTypes(typesArr) {
        const typesMap = new Map();
        for (const obj in typesArr) {
            if (typesArr.hasOwnProperty(obj)) {
                typesMap.set(typesArr[obj].topologyTypeId, typesArr[obj]);
            }
        }
        return typesMap;
    }
    getSiteChildren(nodeNames) {
        const keysArr = Object.keys(nodeNames);
        const allKeys = [];
        for (let i = 0, iLen = keysArr.length; i < iLen; i++) {
            allKeys.push(parseInt(keysArr[i], 10));
        }
        let sites;
        sites = this.getSites(nodeNames);
        const siteKeys = [];
        for (const a in sites) {
            if (sites.hasOwnProperty(a)) {
                siteKeys.push(sites[a].id);
            }
        }
        for (const obj in sites) {
            if (sites.hasOwnProperty(obj)) {
                sites[obj].children = this.getChildren(sites[obj], nodeNames);
            }
        }
        return sites;
    }
    getSites(nodeNames) {
        const nodes = nodeNames;
        const sites = {};
        for (const node in nodes) {
            if (nodes.hasOwnProperty(node) && nodes[node].type === 150) {
                const nodeObj = { id: 'number', children: [] };
                nodeObj.id = nodes[node].nodeId;
                nodeObj.children = [];
                sites[nodes[node].name] = nodeObj;
            }
        }
        return sites;
    }
    getChildren(siteObj, nodeNames) {
        let childrenArr = [];
        for (const obj in nodeNames) {
            if (siteObj.id === nodeNames[obj].parentNodeId) {
                childrenArr.push(nodeNames[obj].nodeId);
            }
        }
        childrenArr = this.getOtherChildren(childrenArr, nodeNames);
        return childrenArr;
    }
    getOtherChildren(childrenArr, nodeNames) {
        for (const obj in nodeNames) {
            for (let i = 0, iLen = childrenArr.length; i < iLen; i++) {
                if (childrenArr[i] === nodeNames[obj].parentNodeId) {
                    if (!(childrenArr.indexOf(nodeNames[obj].nodeId) > -1)) {
                        childrenArr.push(nodeNames[obj].nodeId);
                    }
                }
            }
        }
        childrenArr = this.getAllChildren(childrenArr);
        return childrenArr;
    }
    getAllChildren(childrenArr) {
        const nodeKeys = Object.keys(this.topologyNodes);
        const keysArr = [];
        for (let i = 0, iLen = nodeKeys.length; i < iLen; i++) {
            keysArr.push(parseInt(nodeKeys[i], 10));
        }
        for (const a in childrenArr) {
            if (keysArr.indexOf(childrenArr[a]) > -1) {
                const childrenOfNode = this.topologyNodes[childrenArr[a]];
                for (let i = 0, iLen = childrenOfNode.length; i < iLen; i++) {
                    if (childrenArr.indexOf(childrenOfNode[i].nodeId) === -1) {
                        childrenArr.push(childrenOfNode[i].nodeId);
                    }
                }
            }
        }
        for (const b in childrenArr) {
            if (keysArr.indexOf(childrenArr[b]) > -1) {
                const allChildren = this.topologyNodes[childrenArr[b]];
                for (let i = 0, iLen = allChildren.length; i < iLen; i++) {
                    if (childrenArr.indexOf(allChildren[i].nodeId) === -1) {
                        childrenArr.push(allChildren[i].nodeId);
                    }
                }
            }
        }
        return childrenArr;
    }
    createVirtualGroup(node) {
        const url = `${urls.topology.topologyGroups}`;
        return this.http.post(url, node);
    }
    updateVirtualGroup(groupId, object) {
        const url = `${urls.topology.topologyGroups}${groupId}`;
        return this.http.put(url, object);
    }
    deleteVirtualGroup(groupId, object) {
        const url = `${urls.topology.topologyGroups}${groupId}`;
        return this.http.delete(url, object);
    }
    getVirtualGroups(userId) {
        const url = `${urls.topology.virtualGroupNodesUrl}${userId}`;
        return this.http.get(url);
    }
}
TopologyService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TopologyService_Factory() { return new TopologyService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TopologytreeService)); }, token: TopologyService, providedIn: "root" });
TopologyService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
TopologyService.ctorParameters = () => [
    { type: HttpClient },
    { type: TopologytreeService }
];
//# sourceMappingURL=data:application/json;base64,