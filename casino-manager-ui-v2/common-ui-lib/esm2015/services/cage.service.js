import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { urls } from '../constants/urls';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class CageService {
    constructor(http) {
        this.http = http;
    }
    getInventoryData(id, options) {
        return this.http.get(urls.cage.chipsInventory + id, options);
    }
    getCurrentGamingDay(topologyId) {
        const url = `${urls.cage.localGamingDay}?topologyId=${topologyId}`;
        return this.http.get(url);
    }
    getLocalGamingDay(id) {
        return this.http.get(urls.cage.localGamingDay, {
            params: {
                topologyId: id
            }
        });
    }
    getRollTimeData(options) {
        const url = urls.cage.nextRollDtm;
        return this.http.get(url, options);
    }
    getRollDTM(topologyId) {
        const url = `${urls.cage.nextRollDtm}?topologyId=${topologyId}`;
        return this.http.get(url);
    }
    localGamingDaysInHierarchy(topologyId) {
        const url = `${urls.cage.gamingDays}?topologyId=${topologyId}`;
        return this.http.get(url);
    }
    postRollTimeData(payLoad, userId = '', employeeId = '') {
        let url = urls.cage.nextRollDtm;
        if (userId && employeeId) {
            url += `?userId=${userId}&employeeId=${employeeId}`;
        }
        return this.http.post(url, payLoad);
    }
    getChipTrayOpenerCloser(options) {
        const url = urls.cage.chipTrayOpenerCloser;
        return this.http.get(url, options);
    }
    getOpenerCloserReportData(options) {
        const url = urls.cage.openerCloserReport;
        return this.http.get(url, options);
    }
    getReportUrl(data) {
        const url = `${urls.cage.printReport}?print=true&format=PDF&reportName=OpenerCloserForm&reportData=${data}`;
        return url;
    }
    getReportData(data) {
        const url = urls.cage.printReport;
        const payLoad = { print: true, format: 'PDF', reportName: 'OpenerCloserForm', reportData: JSON.stringify(data) };
        const httpOptions = {
            'responseType': 'arraybuffer'
        };
        return this.http.post(url, payLoad, httpOptions);
    }
    getfcTransactions(options) {
        console.log('common options', options);
        const url = urls.cage.getfcTransactions;
        return this.http.get(url, options);
    }
}
CageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CageService_Factory() { return new CageService(i0.ɵɵinject(i1.HttpClient)); }, token: CageService, providedIn: "root" });
CageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
CageService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,