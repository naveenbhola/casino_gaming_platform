import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { urls } from '../constants/urls';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class ConfigurationService {
    constructor(http) {
        this.http = http;
    }
    getLimits(options) {
        const url = `${urls.config.configurations}?templateTypeCode=TABLE_LIMITS&type=TEMPLATE`;
        return this.http.get(url, options);
    }
    getInActiveLimits(options) {
        const url = `${urls.config.configurations}?templateTypeCode=TABLE_LIMITS&type=TEMPLATE&state=INACTIVE`;
        return this.http.get(url, options);
    }
    getConfigurationProperties(options, type) {
        const url = `${urls.config.properties}?topologyTypeId=${type}`;
        return this.http.get(url, options);
    }
    getConfigurationPropertyValues(options, topologyId) {
        const url = `${urls.config.configurations}?topologyId=${topologyId}`;
        return this.http.get(url, options);
    }
    saveConfigurationproperties(options) {
        const url = `${urls.config.configurations}`;
        return this.http.post(url, options);
    }
    getSystemData() {
        return this.http.get(urls.config.configurations, {
            params: {
                templateTypeCode: 'SYSTEM',
                type: 'TEMPLATE'
            }
        });
    }
    getConfigurations(topologyId) {
        const urlConfig = urls.config.configurations + '?topologyId=' + topologyId;
        return this.http.get(urlConfig);
    }
    isGlobalAnonymousHostEnabled() {
        const url = `${urls.config.configurations}?propertyCodes=com.wdts.anonymous.session.alert.enabled&templateTypeCode=SYSTEM&type=TEMPLATE`;
        return this.http.get(url);
    }
    checkGlobalCbpt() {
        const url = `${urls.config.configurations}?propertyCodes=com.wdts.cbpt.enabled&templateTypeCode=SYSTEM&type=TEMPLATE`;
        return this.http.get(url);
    }
    checkFctxnEnabled() {
        const url = `${urls.config.configurations}?propertyCodes=com.wdts.fctxn.enabled&templateTypeCode=SYSTEM&type=TEMPLATE`;
        return this.http.get(url);
    }
    getHostcallTemplate() {
        const url = `${urls.config.configurations}/?templateTypeCode=PLAY_CRITERIA&type=TEMPLATE`;
        return this.http.get(url);
    }
    getHostcallDataOnTopology(topologyId) {
        const url = `${urls.config.configurations}/?templateTypeCode=PLAY_CRITERIA&type=CURRENT&topologyId=${topologyId}`;
        return this.http.get(url);
    }
    postHostcallDataOnTopology(data) {
        const url = `${urls.config.configurations}/?templateTypeCode=PLAY_CRITERIA&type=CURRENT`;
        return this.http.post(url, data);
    }
    putHostcallData(data, id) {
        const url = `${urls.config.configurations}/${id}/?templateTypeCode=PLAY_CRITERIA&type=CURRENT`;
        return this.http.put(url, data);
    }
    isPlayerAdustmentEnabled() {
        const url = `${urls.config.configurations}/?propertyCodes=com.wdts.rating.adjustment.enabled&templateTypeCode=SYSTEM&type=TEMPLATE`;
        return this.http.get(url);
    }
    getPlayerRankingList() {
        const url = `${urls.config.configurations}/?propertyCodes=com.wdts.player.tier.types&templateTypeCode=SYSTEM&type=TEMPLATE`;
        return this.http.get(url);
    }
    getPlayerAdjustment(topologyId, propertyId) {
        const url = `${urls.config.configurations}/?topologyId=${topologyId}&propertyId=${propertyId}&templateTypeCode=PLAYER_ADJUSTMENT&type=CURRENT&state=ACTIVE`;
        return this.http.get(url);
    }
    postPlayerAdjustment(topologyId, propertyId, objData) {
        const url = `${urls.config.configurations}/?fromTopologyId=${topologyId}&propertyId=${propertyId}&templateTypeCode=PLAYER_ADJUSTMENT&type=CURRENT&state=ACTIVE`;
        return this.http.post(url, objData);
    }
    updatePlayerAdjustment(topologyId, propertyId, objData) {
        const url = `${urls.config.configurations}/?topologyId=${topologyId}&propertyId=${propertyId}&templateTypeCode=PLAYER_ADJUSTMENT&type=CURRENT&state=ACTIVE`;
        return this.http.post(url, objData);
    }
    putPlayerAdjustment(configId, propertyId, objData) {
        const url = `${urls.config.configurations}/${configId}/?body=true`;
        return this.http.put(url, objData);
    }
}
ConfigurationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConfigurationService_Factory() { return new ConfigurationService(i0.ɵɵinject(i1.HttpClient)); }, token: ConfigurationService, providedIn: "root" });
ConfigurationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ConfigurationService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,