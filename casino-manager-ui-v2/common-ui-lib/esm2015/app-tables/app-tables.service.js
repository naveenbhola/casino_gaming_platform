import { EventEmitter, Injectable } from '@angular/core';
export class AppTablesService {
    constructor() {
        this.reqObj = {
            observe: 'response',
            params: {
                start: 1,
                limit: 10
            }
        };
        this.initPagination = new EventEmitter();
        this.filterConfigOptions = [];
    }
    clearPreFilters() {
        for (const key in this.reqObj.params) {
            if (this.reqObj.params.hasOwnProperty(key) &&
                ['sortOrder', 'sortField', 'start', 'limit', 'reqFilter'].indexOf(key) === -1) {
                delete this.reqObj.params[key];
            }
        }
    }
    clearFilter() {
        this.clearPreFilters();
        return this.filterConfigOptions.map((config) => {
            config.selectedOptions = [];
            return config;
        });
    }
    setFilterOptions(options) {
        for (const key in options) {
            if (options.hasOwnProperty(key)) {
                this.filterConfigOptions = this.filterConfigOptions.map((config) => {
                    if (config.column === key) {
                        config.selectedOptions = [...options[key]];
                    }
                    return config;
                });
                this.reqObj.params[key] = options[key] instanceof Array ? options[key].join(',') : options[key];
            }
        }
        this.clearEmptyParams();
    }
    clearEmptyParams() {
        for (const key in this.reqObj.params) {
            if (this.reqObj.params.hasOwnProperty(key) &&
                ['sortOrder', 'sortField', 'start', 'limit', 'reqFilter'].indexOf(key) === -1 &&
                !this.reqObj.params[key].length) {
                delete this.reqObj.params[key];
            }
        }
    }
    updateFilter(obj) {
        switch (obj.state) {
            case 'apply':
                this.setFilterOptions(obj.selectedFilter);
                break;
            case 'clear':
                this.clearFilter();
                break;
        }
        this.initPagination.next();
    }
}
AppTablesService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXRhYmxlcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29tbW9uLXVpLXYyL3NyYy9hcHAvYXBwLXRhYmxlcy9hcHAtdGFibGVzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFlBQVksRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFJdkQsTUFBTSxPQUFPLGdCQUFnQjtJQUQ3QjtRQUVJLFdBQU0sR0FBRztZQUNMLE9BQU8sRUFBRSxVQUFVO1lBQ25CLE1BQU0sRUFBRTtnQkFDSixLQUFLLEVBQUUsQ0FBQztnQkFDUixLQUFLLEVBQUUsRUFBRTthQUNaO1NBQ0osQ0FBQztRQUVGLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVwQyx3QkFBbUIsR0FBaUMsRUFBRSxDQUFDO0lBdUQzRCxDQUFDO0lBckRHLGVBQWU7UUFDWCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2xDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQztnQkFDdEMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUMvRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2xDO1NBQ0o7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN2QixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUMzQyxNQUFNLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztZQUM1QixPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxPQUFPO1FBQ3BCLEtBQUssTUFBTSxHQUFHLElBQUksT0FBTyxFQUFFO1lBQ3ZCLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtvQkFDL0QsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTt3QkFDdkIsTUFBTSxDQUFDLGVBQWUsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7cUJBQzlDO29CQUNELE9BQU8sTUFBTSxDQUFDO2dCQUNsQixDQUFDLENBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDbkc7U0FDSjtRQUNELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxnQkFBZ0I7UUFDWixLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2xDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQztnQkFDdEMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDN0UsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ2pDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDbEM7U0FDSjtJQUNMLENBQUM7SUFFRCxZQUFZLENBQUMsR0FBRztRQUNaLFFBQVEsR0FBRyxDQUFDLEtBQUssRUFBRTtZQUNmLEtBQUssT0FBTztnQkFDUixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUMxQyxNQUFNO1lBQ1YsS0FBSyxPQUFPO2dCQUNSLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDbkIsTUFBTTtTQUNiO1FBQ0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMvQixDQUFDOzs7WUFsRUosVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RXZlbnRFbWl0dGVyLCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VGFibGVGaWx0ZXJzSW50ZXJmYWNlfSBmcm9tICcuLi9pbnRlcmZhY2UvdGFibGUtZmlsdGVycy5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXBwVGFibGVzU2VydmljZSB7XG4gICAgcmVxT2JqID0ge1xuICAgICAgICBvYnNlcnZlOiAncmVzcG9uc2UnLFxuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIHN0YXJ0OiAxLFxuICAgICAgICAgICAgbGltaXQ6IDEwXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaW5pdFBhZ2luYXRpb24gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBmaWx0ZXJDb25maWdPcHRpb25zOiBBcnJheTxUYWJsZUZpbHRlcnNJbnRlcmZhY2U+ID0gW107XG5cbiAgICBjbGVhclByZUZpbHRlcnMoKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMucmVxT2JqLnBhcmFtcykge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVxT2JqLnBhcmFtcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmXG4gICAgICAgICAgICAgICAgWydzb3J0T3JkZXInLCAnc29ydEZpZWxkJywgJ3N0YXJ0JywgJ2xpbWl0JywgJ3JlcUZpbHRlciddLmluZGV4T2Yoa2V5KSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5yZXFPYmoucGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhckZpbHRlcigpIHtcbiAgICAgICAgdGhpcy5jbGVhclByZUZpbHRlcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyQ29uZmlnT3B0aW9ucy5tYXAoKGNvbmZpZykgPT4ge1xuICAgICAgICAgICAgY29uZmlnLnNlbGVjdGVkT3B0aW9ucyA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0RmlsdGVyT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlckNvbmZpZ09wdGlvbnMgPSB0aGlzLmZpbHRlckNvbmZpZ09wdGlvbnMubWFwKChjb25maWcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5jb2x1bW4gPT09IGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLnNlbGVjdGVkT3B0aW9ucyA9IFsuLi5vcHRpb25zW2tleV1dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXFPYmoucGFyYW1zW2tleV0gPSBvcHRpb25zW2tleV0gaW5zdGFuY2VvZiBBcnJheSA/IG9wdGlvbnNba2V5XS5qb2luKCcsJykgOiBvcHRpb25zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGVhckVtcHR5UGFyYW1zKCk7XG4gICAgfVxuXG4gICAgY2xlYXJFbXB0eVBhcmFtcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5yZXFPYmoucGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXFPYmoucGFyYW1zLmhhc093blByb3BlcnR5KGtleSkgJiZcbiAgICAgICAgICAgICAgICBbJ3NvcnRPcmRlcicsICdzb3J0RmllbGQnLCAnc3RhcnQnLCAnbGltaXQnLCAncmVxRmlsdGVyJ10uaW5kZXhPZihrZXkpID09PSAtMSAmJlxuICAgICAgICAgICAgICAgICF0aGlzLnJlcU9iai5wYXJhbXNba2V5XS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5yZXFPYmoucGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVGaWx0ZXIob2JqKSB7XG4gICAgICAgIHN3aXRjaCAob2JqLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICdhcHBseSc6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRGaWx0ZXJPcHRpb25zKG9iai5zZWxlY3RlZEZpbHRlcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjbGVhcic6XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckZpbHRlcigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5pdFBhZ2luYXRpb24ubmV4dCgpO1xuICAgIH1cbn1cbiJdfQ==