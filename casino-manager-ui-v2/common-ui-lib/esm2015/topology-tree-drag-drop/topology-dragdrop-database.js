/*
 * Topology Drag-Drop Item database, it can build a tree structured Json object.
 * Each node in Json object represents a drag drop item or a category(different item may be nested).
 * If a node is a category(different item may be nested), it has children items and new items
 * can be added under the category(different item may be nested).
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
/*
 * Node for drag drop item
 */
export class DragDropItemNode {
}
/* Flat drag drop item node with expandable and level information */
export class DragDropItemFlatNode {
}
const ASSIGNEDDATA = new Map();
ASSIGNEDDATA.set(3, 4);
export class TreeDragDropItemDataBase {
    constructor() {
        this.dataChangeAssigned = new BehaviorSubject([]);
        this.dataChangeUnassigned = new BehaviorSubject([]);
        this.dataChangeAG = new BehaviorSubject([]);
        this.dataChangeVG = new BehaviorSubject([]);
        this.initialize();
    }
    data(node) {
        // console.log('data::', node.dataSourceName);
        if (node.dataSourceName === 'assignednode') {
            return this.dataChangeAssigned.value;
        }
        else if (node.dataSourceName === 'unassignednode') {
            return this.dataChangeUnassigned.value;
        }
        else if (node.dataSourceName === 'accessgroup') {
            return this.dataChangeAG.value;
        }
        else if (node.dataSourceName === 'virtualgroup') {
            return this.dataChangeVG.value;
        }
    }
    /**
     * if tree.expandAll called and get an erro of dataNodes we need to set
        this.treeControl.dataNodes = data; in all four group.
     * @param data
     * @param node
     */
    dispatchNextData(data, node) {
        // console.log('dispatchNextData::', data, node.dataSourceName);
        if (node.dataSourceName) {
            if (node.dataSourceName === 'assignednode') {
                this.dataChangeAssigned.next(data);
            }
            else if (node.dataSourceName === 'unassignednode') {
                this.dataChangeUnassigned.next(data);
            }
            else if (node.dataSourceName === 'accessgroup') {
                this.dataChangeAG.next(data);
            }
            else if (node.dataSourceName === 'virtualgroup') {
                this.dataChangeVG.next(data);
            }
        }
    }
    initialize() {
        // Build the tree nodes from Json object. The result is a list of `DragDropItemNode` with nested
        //     file node as children.
        const dataAssigned = this.buildFileTree(ASSIGNEDDATA, 0, 'assignednode');
        this.dataChangeAssigned.next(dataAssigned);
    }
    /*
     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
     * The return value is the list of `DragDropItemNode`.
     */
    buildFileTree(obj, level, dataSourceName) {
        return Object.keys(obj).reduce((accumulator, key) => {
            const value = obj[key];
            const node = new DragDropItemNode();
            node.item = key;
            node.dataSourceName = dataSourceName;
            if (value != null) {
                if (typeof value === 'object') {
                    node.children = this.buildFileTree(value, level + 1, node.dataSourceName);
                }
                else {
                    node.item = value;
                }
            }
            return accumulator.concat(node);
        }, []);
    }
    /* Add an item to drag drop list */
    insertItem(parent, name) {
        if (!parent.children) {
            parent.children = [];
        }
        const newItem = { item: name, dataSourceName: parent.dataSourceName };
        parent.children.push(newItem);
        this.dispatchNextData(this.data(newItem), newItem);
        return newItem;
    }
    insertItemAbove(node, name) {
        const parentNode = this.getParentFromNodes(node);
        const newItem = { item: name, dataSourceName: node.dataSourceName };
        if (parentNode != null) {
            parentNode.children.splice(parentNode.children.indexOf(node), 0, newItem);
        }
        else {
            this.data(node).splice(this.data(node).indexOf(node), 0, newItem);
        }
        this.dispatchNextData(this.data(newItem), newItem);
        return newItem;
    }
    insertItemBelow(node, name) {
        const parentNode = this.getParentFromNodes(node);
        const newItem = { item: name, dataSourceName: node.dataSourceName };
        if (parentNode != null) {
            parentNode.children.splice(parentNode.children.indexOf(node) + 1, 0, newItem);
        }
        else {
            this.data(node).splice(this.data(node).indexOf(node) + 1, 0, newItem);
        }
        this.dispatchNextData(this.data(newItem), newItem);
        return newItem;
    }
    getParentFromNodes(node) {
        for (let i = 0; i < this.data(node).length; ++i) {
            const currentRoot = this.data(node)[i];
            const parent = this.getParent(currentRoot, node);
            if (parent != null) {
                return parent;
            }
        }
        return null;
    }
    getParent(currentRoot, node) {
        if (currentRoot.children && currentRoot.children.length > 0) {
            for (let i = 0; i < currentRoot.children.length; ++i) {
                const child = currentRoot.children[i];
                if (child === node) {
                    return currentRoot;
                }
                else if (child.children && child.children.length > 0) {
                    const parent = this.getParent(child, node);
                    if (parent != null) {
                        return parent;
                    }
                }
            }
        }
        return null;
    }
    updateItem(node, name) {
        node.item = name;
        node.dataSourceName = node.dataSourceName;
        this.dispatchNextData(this.data(node), node);
    }
    deleteItem(node) {
        this.deleteNode(this.data(node), node);
        this.dispatchNextData(this.data(node), node);
    }
    copyPasteItem(from, to) {
        // console.log('in copyPasteItem to is', to, 'from is', from);
        const newItem = this.insertItem(to, from.item);
        if (from.children) {
            from.children.forEach(child => {
                this.copyPasteItem(child, newItem);
            });
        }
        return newItem;
    }
    copyPasteItemAbove(from, to) {
        // console.log('in copyPasteItemAbove to is', to, 'from is', from);
        const newItem = this.insertItemAbove(to, from.item);
        if (from.children) {
            from.children.forEach(child => {
                this.copyPasteItem(child, newItem);
            });
        }
        return newItem;
    }
    copyPasteItemBelow(from, to) {
        // console.log('in copyPasteItemBelow to is', to, 'from is', from);
        const newItem = this.insertItemBelow(to, from.item);
        if (from.children) {
            from.children.forEach(child => {
                this.copyPasteItem(child, newItem);
            });
        }
        return newItem;
    }
    deleteNode(nodes, nodeToDelete) {
        const index = nodes.indexOf(nodeToDelete, 0);
        if (index > -1) {
            nodes.splice(index, 1);
        }
        else {
            nodes.forEach(node => {
                if (node.children && node.children.length > 0) {
                    this.deleteNode(node.children, nodeToDelete);
                }
            });
        }
    }
}
TreeDragDropItemDataBase.decorators = [
    { type: Injectable }
];
TreeDragDropItemDataBase.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,