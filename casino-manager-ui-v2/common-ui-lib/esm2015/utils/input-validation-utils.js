export function tokenGetter() {
    const authValues = JSON.parse(localStorage.getItem('authValues'));
    if (authValues) {
        return localStorage.getItem(authValues.jwtTokenKey);
    }
}
export class WDTSUtility {
    static validateNumberField(_event, maxLength, value) {
        let valLen;
        if (_event) {
            if (_event.currentTarget) {
                valLen = _event.currentTarget.value.length;
            }
            else if (_event.target) {
                valLen = _event.target.value.length;
            }
        }
        else {
            valLen = (value && value.length);
        }
        if (valLen === undefined || maxLength === undefined) {
            return (_event.keyCode >= 48 && _event.keyCode <= 57);
        }
        return (valLen < maxLength && _event.keyCode >= 48 && _event.keyCode <= 57);
    }
    static numberWithDecimal(event) {
        let dotCount = 0;
        const charCode = (event.which) ? event.which : event.keyCode;
        const checkNumberOnly = (event.target.value);
        if (charCode === 46) {
            dotCount += 1;
            const numericCheck = (event.target.value).toString();
            if (numericCheck.includes('.')) {
                dotCount += 1;
            }
            if (dotCount > 1) {
                dotCount = 0;
                return false;
            }
        }
        if (charCode > 31 && (charCode < 45 || charCode > 57 || charCode === 47)) {
            return false;
        }
        if (checkNumberOnly != null) {
            const numeric = (event.target.value).toString();
            if (numeric.includes('.')) {
                const checkNumeric = numeric.split('.');
                if (checkNumeric.length > 2) {
                    return false;
                }
                const checkString = checkNumeric[1].split('');
                if (checkString.length > 1) {
                    const cursorPosition = event.target.selectionStart;
                    const dotPosition = event.target.value.indexOf('.');
                    if (cursorPosition > dotPosition) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    static equalIgnoreCase(string1, string2, ignoreCase, useLocale) {
        if (ignoreCase) {
            if (useLocale) {
                string1 = string1.toLocaleLowerCase();
                string2 = string2.toLocaleLowerCase();
            }
            else {
                string1 = string1.toLowerCase();
                string2 = string2.toLowerCase();
            }
        }
        return string1 === string2;
    }
    static isNonZeroRegex(evt, maxlen) {
        let isNonZeroValue = false;
        if (evt.length && maxlen) {
            if (evt.length <= maxlen && /^\d+$/.test(evt)) {
                const regEx = /^0+$/;
                isNonZeroValue = regEx.test(evt);
            }
        }
        else {
            if (/^\d+$/.test(evt)) {
                const regEx = /^0+$/;
                isNonZeroValue = regEx.test(evt);
            }
        }
        return isNonZeroValue;
    }
}
/**
 * @description: this function flat the nested object and return
 * Array containg object: Leve1 object.
 * @param obj
 * @param arr
 */
export function flatObject(obj, arr) {
    for (let item in obj) {
        if (typeof obj[item] === 'object' && obj[item].length > 0) {
            flatObject(obj[item], arr);
        }
        else {
            if (!Array.isArray(obj[item])) {
                arr.push(obj[item]);
            }
        }
    }
    return arr;
}
/**
 * check if object properties is equal
 */
export function isEquivalent(a, b) {
    // Create arrays of property names
    const aProps = Object.getOwnPropertyNames(a);
    const bProps = Object.getOwnPropertyNames(b);
    // If number of properties is different,
    // objects are not equivalent
    if (aProps.length !== bProps.length) {
        return false;
    }
    for (let i = 0; i < aProps.length; i++) {
        const propName = aProps[i];
        // If values of same property are not equal,
        // objects are not equivalent
        if (a[propName] !== b[propName]) {
            return false;
        }
    }
    // If we made it this far, objects
    // are considered equivalent
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdmFsaWRhdGlvbi11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NvbW1vbi11aS12Mi9zcmMvYXBwL3V0aWxzL2lucHV0LXZhbGlkYXRpb24tdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLFdBQVc7SUFDekIsTUFBTSxVQUFVLEdBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDdkUsSUFBSSxVQUFVLEVBQUU7UUFDZCxPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQ3JEO0FBQ0gsQ0FBQztBQUVELE1BQU0sT0FBTyxXQUFXO0lBRXRCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsU0FBVSxFQUFFLEtBQU07UUFDbkQsSUFBSSxNQUFNLENBQUM7UUFDWCxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksTUFBTSxDQUFDLGFBQWEsRUFBRTtnQkFDeEIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQzthQUM1QztpQkFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7Z0JBQ3hCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7YUFDckM7U0FDRjthQUFNO1lBQ0wsTUFBTSxHQUFHLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNsQztRQUNELElBQUksTUFBTSxLQUFLLFNBQVMsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO1lBQ25ELE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBRSxDQUFDO1NBQ3hEO1FBQ0QsT0FBTyxDQUFFLE1BQU0sR0FBRyxTQUFTLElBQUks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QUFDO0lBQzdDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3Qyx3Q0FBd0M7SUFDeEMsNkJBQTZCO0lBQzdCLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ25DLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN0QyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFM0IsNENBQTRDO1FBQzVDLDZCQUE2QjtRQUM3QixJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDL0IsT0FBTyxLQUFLLENBQUM7U0FDZDtLQUNGO0lBRUQsa0NBQWtDO0lBQ2xDLDRCQUE0QjtJQUM1QixPQUFPLElBQUksQ0FBQztBQUNkLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gdG9rZW5HZXR0ZXIoKSB7XG4gIGNvbnN0IGF1dGhWYWx1ZXM6IGFueSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2F1dGhWYWx1ZXMnKSk7XG4gIGlmIChhdXRoVmFsdWVzKSB7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKGF1dGhWYWx1ZXMuand0VG9rZW5LZXkpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBXRFRTVXRpbGl0eSB7XG5cbiAgc3RhdGljIHZhbGlkYXRlTnVtYmVyRmllbGQoX2V2ZW50LCBtYXhMZW5ndGg/LCB2YWx1ZT8pIHtcbiAgICBsZXQgdmFsTGVuO1xuICAgIGlmIChfZXZlbnQpIHtcbiAgICAgIGlmIChfZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICB2YWxMZW4gPSBfZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZS5sZW5ndGg7XG4gICAgICB9IGVsc2UgaWYgKF9ldmVudC50YXJnZXQpIHtcbiAgICAgICAgdmFsTGVuID0gX2V2ZW50LnRhcmdldC52YWx1ZS5sZW5ndGg7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbExlbiA9ICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpO1xuICAgIH1cbiAgICBpZiAodmFsTGVuID09PSB1bmRlZmluZWQgfHwgbWF4TGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAoX2V2ZW50LmtleUNvZGUgPj0gNDggJiYgX2V2ZW50LmtleUNvZGUgPD0gNTcgKTtcbiAgICB9XG4gICAgcmV0dXJuICggdmFsTGVuIDwgbWF4TGVuZ3RoICYmIF9ldmVudC5rZXlDb2RlID49IDQ4ICYmIF9ldmVudC5rZXlDb2RlIDw9IDU3ICk7XG4gIH1cblxuICBzdGF0aWMgbnVtYmVyV2l0aERlY2ltYWwoZXZlbnQpOiBib29sZWFuIHtcbiAgICBsZXQgZG90Q291bnQgPSAwO1xuICAgIGNvbnN0IGNoYXJDb2RlID0gKGV2ZW50LndoaWNoKSA/IGV2ZW50LndoaWNoIDogZXZlbnQua2V5Q29kZTtcbiAgICBjb25zdCBjaGVja051bWJlck9ubHkgPSAoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICBpZiAoY2hhckNvZGUgPT09IDQ2KSB7XG4gICAgICBkb3RDb3VudCArPSAxO1xuICAgICAgY29uc3QgbnVtZXJpY0NoZWNrID0gKGV2ZW50LnRhcmdldC52YWx1ZSkudG9TdHJpbmcoKTtcbiAgICAgIGlmIChudW1lcmljQ2hlY2suaW5jbHVkZXMoJy4nKSkge1xuICAgICAgICBkb3RDb3VudCArPSAxO1xuICAgICAgfVxuICAgICAgaWYgKGRvdENvdW50ID4gMSkge1xuICAgICAgICBkb3RDb3VudCA9IDA7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNoYXJDb2RlID4gMzEgJiYgKGNoYXJDb2RlIDwgNDUgfHwgY2hhckNvZGUgPiA1NyB8fCBjaGFyQ29kZSA9PT0gNDcpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChjaGVja051bWJlck9ubHkgIT0gbnVsbCkge1xuICAgICAgY29uc3QgbnVtZXJpYyA9IChldmVudC50YXJnZXQudmFsdWUpLnRvU3RyaW5nKCk7XG4gICAgICBpZiAobnVtZXJpYy5pbmNsdWRlcygnLicpKSB7XG4gICAgICAgIGNvbnN0IGNoZWNrTnVtZXJpYyA9IG51bWVyaWMuc3BsaXQoJy4nKTtcbiAgICAgICAgaWYgKGNoZWNrTnVtZXJpYy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoZWNrU3RyaW5nID0gY2hlY2tOdW1lcmljWzFdLnNwbGl0KCcnKTtcbiAgICAgICAgaWYgKGNoZWNrU3RyaW5nLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBjb25zdCBjdXJzb3JQb3NpdGlvbiA9IGV2ZW50LnRhcmdldC5zZWxlY3Rpb25TdGFydDtcbiAgICAgICAgICBjb25zdCBkb3RQb3NpdGlvbiA9IGV2ZW50LnRhcmdldC52YWx1ZS5pbmRleE9mKCcuJylcbiAgICAgICAgICBpZiAoY3Vyc29yUG9zaXRpb24gPiBkb3RQb3NpdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbElnbm9yZUNhc2Uoc3RyaW5nMSwgc3RyaW5nMiwgaWdub3JlQ2FzZSwgdXNlTG9jYWxlKSB7XG4gICAgaWYgKGlnbm9yZUNhc2UpIHtcbiAgICAgIGlmICh1c2VMb2NhbGUpIHtcbiAgICAgICAgc3RyaW5nMSA9IHN0cmluZzEudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgc3RyaW5nMiA9IHN0cmluZzIudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmluZzEgPSBzdHJpbmcxLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHN0cmluZzIgPSBzdHJpbmcyLnRvTG93ZXJDYXNlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmcxID09PSBzdHJpbmcyO1xuICB9XG5cbiAgc3RhdGljIGlzTm9uWmVyb1JlZ2V4KGV2dCwgbWF4bGVuKSB7XG4gICAgbGV0IGlzTm9uWmVyb1ZhbHVlID0gZmFsc2U7XG4gICAgaWYgKGV2dC5sZW5ndGggJiYgbWF4bGVuKSB7XG4gICAgICBpZiAoZXZ0Lmxlbmd0aCA8PSBtYXhsZW4gJiYgL15cXGQrJC8udGVzdChldnQpKSB7XG4gICAgICAgIGNvbnN0IHJlZ0V4ID0gL14wKyQvO1xuICAgICAgICBpc05vblplcm9WYWx1ZSA9IHJlZ0V4LnRlc3QoZXZ0KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKC9eXFxkKyQvLnRlc3QoZXZ0KSkge1xuICAgICAgICBjb25zdCByZWdFeCA9IC9eMCskLztcbiAgICAgICAgaXNOb25aZXJvVmFsdWUgPSByZWdFeC50ZXN0KGV2dCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpc05vblplcm9WYWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbjogdGhpcyBmdW5jdGlvbiBmbGF0IHRoZSBuZXN0ZWQgb2JqZWN0IGFuZCByZXR1cm5cbiAqIEFycmF5IGNvbnRhaW5nIG9iamVjdDogTGV2ZTEgb2JqZWN0LlxuICogQHBhcmFtIG9ialxuICogQHBhcmFtIGFyclxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxhdE9iamVjdChvYmosIGFycikge1xuICBmb3IgKGxldCBpdGVtIGluIG9iaikge1xuICAgIGlmICh0eXBlb2Ygb2JqW2l0ZW1dID09PSAnb2JqZWN0JyAmJiBvYmpbaXRlbV0ubGVuZ3RoID4gMCkge1xuICAgICAgZmxhdE9iamVjdChvYmpbaXRlbV0sIGFycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShvYmpbaXRlbV0pKSB7XG4gICAgICAgIGFyci5wdXNoKG9ialtpdGVtXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbi8qKlxuICogY2hlY2sgaWYgb2JqZWN0IHByb3BlcnRpZXMgaXMgZXF1YWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNFcXVpdmFsZW50KGEsIGIpIHtcbiAgLy8gQ3JlYXRlIGFycmF5cyBvZiBwcm9wZXJ0eSBuYW1lc1xuICBjb25zdCBhUHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhKTtcbiAgY29uc3QgYlByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYik7XG5cbiAgLy8gSWYgbnVtYmVyIG9mIHByb3BlcnRpZXMgaXMgZGlmZmVyZW50LFxuICAvLyBvYmplY3RzIGFyZSBub3QgZXF1aXZhbGVudFxuICBpZiAoYVByb3BzLmxlbmd0aCAhPT0gYlByb3BzLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYVByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcHJvcE5hbWUgPSBhUHJvcHNbaV07XG5cbiAgICAvLyBJZiB2YWx1ZXMgb2Ygc2FtZSBwcm9wZXJ0eSBhcmUgbm90IGVxdWFsLFxuICAgIC8vIG9iamVjdHMgYXJlIG5vdCBlcXVpdmFsZW50XG4gICAgaWYgKGFbcHJvcE5hbWVdICE9PSBiW3Byb3BOYW1lXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHdlIG1hZGUgaXQgdGhpcyBmYXIsIG9iamVjdHNcbiAgLy8gYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudFxuICByZXR1cm4gdHJ1ZTtcbn1cbiJdfQ==