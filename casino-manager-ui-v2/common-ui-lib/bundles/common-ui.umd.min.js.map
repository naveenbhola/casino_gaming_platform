{"version":3,"sources":["../../common-ui-v2/src/app/constants/url.common.constants.ts","../../common-ui-v2/src/app/constants/url-alert.constants.ts","../../common-ui-v2/src/app/constants/url-authentication.constants.ts","../../common-ui-v2/src/app/constants/url-configuration.constants.ts","../../common-ui-v2/src/app/constants/url-casinomanager.constants.ts","../../common-ui-v2/src/app/constants/url-user.constants.ts","../../common-ui-v2/src/app/constants/url-chipset.constants.ts","../../common-ui-v2/src/app/constants/url-roles.constants.ts","../../common-ui-v2/src/app/constants/url-topology.constants.ts","../../common-ui-v2/src/app/constants/url-cage.constants.ts","../../common-ui-v2/src/app/constants/url-topologytree.constants.ts","../../common-ui-v2/src/app/constants/url-promotion.constants.ts","../../common-ui-v2/src/app/constants/url-game.constants.ts","../../common-ui-v2/src/app/constants/url-device.constants.ts","../../common-ui-v2/src/app/constants/url-players.constant.ts","../../common-ui-v2/src/app/constants/url-table.constants.ts","../../common-ui-v2/src/app/constants/urls.ts","../../common-ui-v2/src/app/constants/constants.ts","../../common-ui-v2/src/app/services/topologytree.service.ts","../../common-ui-v2/src/app/services/topology.service.ts","../../common-ui-v2/src/app/filter/filter.component.ts","../../common-ui-v2/src/app/app-switcher/app-menu.component.ts","../../common-ui-v2/src/app/services/utility.service.ts","../../common-ui-v2/src/app/app-switcher/app-switcher.component.ts","../../common-ui-v2/src/app/services/Authentication/auth.service.ts","../../common-ui-v2/src/app/services/user.service.ts","../../common-ui-v2/src/app/services/Authentication/decoded-token.service.ts","../../common-ui-v2/src/app/services/configuration.service.ts","../../common-ui-v2/src/app/app-switcher/app-list.component.ts","../../common-ui-v2/src/app/breadcrumb/breadcrumb.component.ts","../../common-ui-v2/src/app/services/alert.service.ts","../../common-ui-v2/src/app/sorting/sorting.service.ts","../../common-ui-v2/src/app/services/cage.service.ts","../../common-ui-v2/src/app/services/logout-utility.service.ts","../../common-ui-v2/src/app/services/Authentication/token-handling.service.ts","../../common-ui-v2/src/app/services/top-nav-bar.service.ts","../../common-ui-v2/src/app/services/table-ui.service.ts","../../common-ui-v2/src/app/services/Authentication/auth.guard.ts","../../common-ui-v2/src/app/services/Authentication/jwt-interceptor.service.ts","../../common-ui-v2/src/app/directives/wdts-special-char.directive.ts","../../common-ui-v2/src/app/pipes/wdts-special-char.pipe.ts","../../common-ui-v2/src/app/pipes/amount-format.pipe.ts","../../common-ui-v2/src/app/pipes/round-up.pipe.ts","../../common-ui-v2/src/app/common-translation/common-translation.module.ts","../../common-ui-v2/src/app/common-translation/common-translation.service.ts","../../common-ui-v2/src/app/header/top-nav-bar/top-nav-bar.component.ts","../../common-ui-v2/src/app/services/casinomanager.service.ts","../../common-ui-v2/src/app/player-search/player-search.component.ts","../../common-ui-v2/src/app/header/subnav-bar/subnav-bar.component.ts","../../common-ui-v2/src/app/services/current-topology.service.ts","../../common-ui-v2/src/app/header/subnav-data-bar/subnav-data-bar.component.ts","../../common-ui-v2/src/app/material-component/material-component.module.ts","../../common-ui-v2/src/app/loader/loader.component.ts","../../common-ui-v2/src/app/web-sockets/ws-auth.config.ts","../../common-ui-v2/src/app/chip-icons/chip-icons.component.ts","../../common-ui-v2/src/app/services/promotion.service.ts","../../common-ui-v2/src/app/header/winner-eligible-sessions/winner-eligible-sessions.component.ts","../../common-ui-v2/src/app/action-menu/action-menu.component.ts","../../common-ui-v2/src/app/roll-time/roll-time-diaglog/roll-time-dialog.component.ts","../../common-ui-v2/src/app/roll-time/roll-time.component.ts","../../common-ui-v2/src/app/roll-time/app-roll-time.module.ts","../../common-ui-v2/src/app/access-denied/access-denied.component.ts","../../common-ui-v2/src/app/app-add-node-topology/app-add-node-topology.component.ts","../../common-ui-v2/src/app/app-tab-bar/app-tab-bar.component.ts","../../common-ui-v2/src/app/buy-ins/buy-ins.component.ts","../../common-ui-v2/src/app/opener-closer/opener-closer.component.ts","../../common-ui-v2/src/app/fill-credit/fill-credit.component.ts","../../common-ui-v2/src/app/game-history/game-history.component.ts","../../common-ui-v2/src/app/chipset-panel/chipset-panel.component.ts","../../common-ui-v2/src/app/common-ui-lib.module.ts","../../common-ui-v2/src/app/web-sockets/ws-alert.config.ts","../../common-ui-v2/src/app/services/chip.service.ts","../../common-ui-v2/src/app/utils/input-validation-utils.ts","../../common-ui-v2/src/app/app-tables/app-tables.component.ts","../../common-ui-v2/src/app/utils.ts","../../common-ui-v2/src/app/app-tables/app-tables.service.ts","../../common-ui-v2/src/app/pagination/pagination.component.ts","../../common-ui-v2/src/app/app-tables/app-tables.module.ts","../../common-ui-v2/src/app/topology-tree-drag-drop/topology-dragdrop-database.ts","../../common-ui-v2/src/app/topology-tree-drag-drop/confirm-delete/confirm-delete.component.ts","../../common-ui-v2/src/app/topology-tree-drag-drop/topology-tree-drag-drop.component.ts","../../common-ui-v2/src/app/topology-tree-drag-drop/topology-tree.module.ts","../../common-ui-v2/src/app/services/transactions.service.ts","../../common-ui-v2/src/app/footer/footer-nav.component.ts","../../common-ui-v2/src/app/pipes/minussigntoparenthesis.pipe.ts","../../common-ui-v2/src/app/footer/footer-nav.module.ts","../../common-ui-v2/src/app/services/table-dashboard.service.ts"],"names":["protocol","webServerDNS","tableUIProtocol","baseUrl","alert","socketAlert","alertsPath","alertCountsPath","tableAlerts","alertConfigurationPath","metricsPath","filter","alertCountsByCategoryPath","auth","login","refresh","logoutWS","logout","configuration","categories","configurations","properties","luckyChipEnabled","globalAnonymousHostEnabled","insuranceEnabled","casinoMgr","topologyStatistics","topologyStatisticsForVirtualGroup","topologyStatisticsTabularView","topologyStatisticsGridView","topologyStatsByTableType","playerStatistics","topLosingCasino","topWinningCasino","topLosingPlayersVirtualGroup","topWinningPlayersVirtualGroup","tableFilter","playerFilter","updatePlayer","activePlayer","userSearch","paginatedSearchManualRatings","updateManualRating","manualRatingNote","topologyStatsTabularView","user","usersPath","users","roles","applications","chipSet","currencyList","companyList","updateChipSet","chipTrayScan_NEW","missingChips","missingChipScan","getScanCompDetail","roleData","permission","topology","topologyGroups","topologyTypes","topologyNodes","virtualGroupNodesUrl","casinoBaseUrl","cage","chipsInventory","localGamingDay","nextRollDtm","gamingDays","buyInTransaction","chipTrayScan","paginatedOpenerCloser","chipTrayOpenerCloser","openerCloserReport","printReport","printBaseUrl","getfcTransactions","cageBaseUrl","gamingDay","topologyTree","topologyNodesUrls","topologyTreeNodesUrl","unassignedNondeUrl","accessGroupNodesUrl","promotion","promotionPath","promotionUpdatePath","managePromotionEnabled","winners","promotionsEligibleDays","promotionsWinnerVoucher","promotionsCompApi","game","paginatedSessions","paginatedGames","bets","sessions","sessionsByIds","updateIrcNumber","sessionNote","manualRatings","device","deviceBasePath","player","playersSearch","table","playerSearch","urls","config","dialogSize","xsmall","small","medium","large","xlarge","fullscreen","TopologytreeService","_http","this","prototype","getTopologyNodes","url","get","getTopologyTypes","getTopologyNodeByNodeId","params","getAccessOrVirtualGroupNodes","getTopologyNodeUnassigned","Injectable","args","providedIn","HttpClient","TopologyService","http","treeService","accessGroupParams","HttpParams","set","virtualGroupParams","initialized","EventEmitter","nodeClicked","terminalClicked","areasLabelClicked","nodeUpdated","nodeDragged","initTopology","accessGroupNodes","authValues","JSON","parse","localStorage","getItem","clientId","fetchTopologyData","_this","forkJoin","getTopologyType","subscribe","result","simplifyTopologyTypes","topologyNodeNames","createNodeNamesObject","siteChildren","getSiteChildren","length","next","getAccessGroup","options","getTopologyPits","getTablesByPitId","pitId","updateTopologyNode","nodeId","post","updateTopologyNodeStatus","put","createNodeOnTree","createNodeAccessGroup","updateAccessGroupNode","groupId","deleteAccessGroupNode","delete","getAccessGroupUsers","getTableProperties","topologyId","nodesData","namesObj","obj","hasOwnProperty","i","len","typesArr","typesMap","Map","topologyTypeId","nodeNames","sites","keysArr","Object","keys","allKeys","iLen","push","parseInt","getSites","siteKeys","a","id","children","getChildren","nodes","node","type","nodeObj","name","siteObj","childrenArr","parentNodeId","getOtherChildren","indexOf","getAllChildren","nodeKeys","childrenOfNode","b","allChildren","createVirtualGroup","updateVirtualGroup","object","deleteVirtualGroup","getVirtualGroups","userId","FilterComponent","translate","topologyService","decimalPipe","datePipe","isDisabled","EMIT_FILTER","EMIT_FILTER_ALL","filterConfigOption","title","column","class","isTopology","selectedOptions","isPromotionPit","filterNeedsTranslation","filterNeedsCapsUnderscore","disableOption","searchKey","index","ngOnChanges","configOptions","defaultSelectAll","selectDeselectAll","tmpOption","Array","from","emitFilter","tslib","__spread","selectOption","selectDeselectOtherOptions","shift","emit","columnName","selectedOption","translateFilterOptions","option","translateStr","undefined","translatePath","instant","replace","toUpperCase","getFormattedValue","columnType","transform","Component","selector","template","TranslateService","DecimalPipe","DatePipe","Input","Output","AppMenuComponent","dialogRef","data","currentAppCode","ngOnInit","MatDialogRef","Inject","MAT_DIALOG_DATA","UtilityService","updateDimensions","updatePageNumbers","closeDialog","broadcastGlobalCalendarGamingDay","broadcastBreadCrumClick","isCBPT","updateCurrentDimensions","updateGlobalCalendarGamingDay","globalCalendarGamingDay","updateBreadCrumClick","breadcrum","window","addEventListener","scrnWidth","innerWidth","scrnHeight","innerHeight","AppSwitcherComponent","snackBar","dialog","utilService","res","closeAppMenu","err","console","log","isLoginApp","location","href","includes","isPPMaster","openAppMenu","open","width","panelClass","closeAll","MatSnackBar","MatDialog","AuthService","httpBackend","getRefreshToken","httpOptions","headers","HttpHeaders","Content-Type","Authorization","jwtTokenKey","client_id","HttpBackend","UserService","userSearchComplexUrl","userSearchNormalUrl","getComplexSearchedUsers","getNormalSearchedUsers","getUserById","setFavoriteApp","paramObj","changeStatus","isActive","getRoles","createUpdateUser","getAssignedRolesAppList","DecodedTokenService","jwtHelper","getDecodedJwtToken","token","decodeToken","setDecodedJwtToken","key","setItem","getJwtToken","JwtHelperService","ConfigurationService","getLimits","getInActiveLimits","getConfigurationProperties","getConfigurationPropertyValues","saveConfigurationproperties","getSystemData","templateTypeCode","getConfigurations","urlConfig","isGlobalAnonymousHostEnabled","checkGlobalCbpt","checkFctxnEnabled","getHostcallTemplate","getHostcallDataOnTopology","postHostcallDataOnTopology","putHostcallData","isPlayerAdustmentEnabled","getPlayerRankingList","getPlayerAdjustment","propertyId","postPlayerAdjustment","objData","updatePlayerAdjustment","putPlayerAdjustment","configId","AppListComponent","authService","userService","utilities","configurationService","decodedTokenService","loading","callInProg","propertyValues","propertyValue","toLowerCase","initMenuItems","appSwitcher","menuRows","appMenuItems","applicationCodesFromJwt","favoriteApp","defaultApplication","divideMenuItems","error","applicationCode","storeKey","iconClass","translateLabel","openUrl","isVisible","forEach","menuItem","event","appCode","preventDefault","stopPropagation","response","openApp","clientID","tokenData","currentApp","accessToken","access_token","token_type","expires_in","scope","target","sessionStorage","clear","BreadcrumbComponent","utilityService","clickOnBreadCrumb","setDefaultLang","homeUrl","labelName","labelShortName","clickEvnt","itemObj","breadCrumbArray","AlertService","getAlertsData","getEventData","getAlertCounts","getAlertCountsByCategory","alertStatus","category","getAlertCountsByCategoryVG","statusUrl","statusObj","changeSeverity","addNote","noteUrl","noteObj","saveCustomerKnowledgeBase","baseObj","saveTableCustomerKnowledgeBase","getAlertConfiguration","updateAlertConfiguration","getTableAlertsCount","SortingService","getSortObject","sort","sortObj","sortOrder","direction","sortField","active","CageService","getInventoryData","getCurrentGamingDay","getLocalGamingDay","getRollTimeData","getRollDTM","localGamingDaysInHierarchy","postRollTimeData","payLoad","employeeId","getChipTrayOpenerCloser","getOpenerCloserReportData","getReportUrl","getReportData","print","format","reportName","reportData","stringify","responseType","LogoutUtilityService","logOutInactiveUser","logoOutTime","logOutClicked","val","Idle","whenNotInteractive","within","do","start","removeAndRedirect","loginUrl","isPP","removeItem","redirectAfterLogout","TokenHandlingService","cageService","logoutUtilityService","redirectURI","jwtToken","decodedToken","CLIENT_ID","isTokenValid","hasPermission","isTokenExpired","authorities","permissions","accessCode","superuser","terminalRedirection","app","appPort","tableId_1","topologyIds","successObj","HandleTokenExpiration","setInterval","tokenExpirationTime","getTokenExpirationDate","getTime","Date","TopNavBarService","userDetailsSubject","BehaviorSubject","userDetails","userDetailsObservable","asObservable","updateUserDetails","TableUIService","isLoggedIn","AuthGuard","tokenHandlingService","topNavBarService","router","tableUIService","split","uerDetails","firstName","lastName","firstLoad","canActivate","state","every","Router","JwtInterceptorService","logger","jwtTokenFromUrl","intercept","req","interceptHeader","pipe","catchError","throwError","clone","setHeaders","handle","NGXLogger","WdtsSpecialCharDirective","_el","valChangeEvent","onlyAlphaNumaric","isLimitTabSpecialChar","onInputChange","SPLCHARSREJX","RegExp","nativeElement","value","Directive","ElementRef","HostListener","WdtsSpecialCharPipe","Pipe","AmountFormatPipe","Number","Math","round","toFixed","toString","RoundUpPipe","ceil","TranslationFactory","TranslateHttpLoader","NgModule","imports","TranslateModule","forRoot","loader","provide","TranslateLoader","useFactory","deps","providers","declarations","exports","CommonTranslationService","tokenService","language","languageChanged","configIndex","findIndex","setTimeout","lang","handleSubscription","TopNavBarComponent","_router","_route","rxStompService","commonTranslationService","logoutService","getCurrentCalendarDate","events","e","NavigationEnd","hideAppSwitcher","loginPagesFlag","getLastRefresh","getUserName","watch","message","messageData","body","substring","hideLanguageMenu","checkIfConfigApp","getTopologyData","changes","selectedGamingDay","currentValue","calendarDate","setCalendarGamingDay","gday","lastRefresh","hideLanguage","isConfigApp","showMenu","userFirstName","userLastName","toggleTranslation","currentLanguage","getDefaultLang","routeReuseStrategy","shouldReuseRoute","currentUrl","navigateByUrl","then","currentTime","navigated","navigate","initTopologyData","topologyData","companyName","shortName","ActivatedRoute","RxStompService","CasinomanagerService","getTopologyStatisticsTabularView","getTopologyStatsTabularView","getTopologyStatisticsGridView","getTopologyStatsByTableType","finalUrl","getTopologyStatistics","viewId","getTopologyStatisticsForVirtualGroup","topologyGroupId","getTopLosingCasino","getTopWinningCasino","getTopLosingPlayersVirtualGroup","getTopWinningPlayersVirtualGroup","getPlayerStatistics","getPaginatedOpenerCloser","getPaginatedSearchManualRatings","getpaginatedSessions","payload","getpaginatedGames","getFilterForTable","getFilterForPlayer","getActivePlayer","getUserSearch","PlayerSearchComponent","casinoManagerService","searchOption","viewValue","reqObj","searchObj","activePlayerApi","isCMSUp","isInvalidPlayerId","isInvalidCardId","handleKeyboardEvent","keyCode","checkEvent","prevKeyCode","searchText","updateNameAfterSearch","searchPlayer","isValidPlayerId","casinoPlayerId","invalidMsg","duration","horizontalPosition","playerLastName","playerFirstName","isValidCardId","casinoCardData","trim","fetch","getActivePlayers","getRequestedPlayers","players","banned","bannedMsg","playerId","getLastSixDigits","cardId","substr","isNaN","isInteger","cardValue","isValidCard","match","strLen","cardVal","onKeyPressSearchText","SubnavBarComponent","CurrentTopologyService","defaultTopologyID","currentTopology","defaultGamingDay","currentGamingDay","updateTopology","topologyID","SubnavDataBarComponent","currentToplogyId","convertToNumber","parseFloat","MatButtonModule","MatCardModule","MatGridListModule","MatInputModule","MatSelectModule","MatFormFieldModule","MatRadioModule","MatListModule","MatIconModule","MatButtonToggleModule","MatTableModule","FormsModule","ReactiveFormsModule","MatMenuModule","MatTabsModule","MatExpansionModule","MatBottomSheetModule","MatCheckboxModule","MatSnackBarModule","MatTooltipModule","MatDialogModule","MatDatepickerModule","MatNativeDateModule","MatToolbarModule","MatStepperModule","MatTreeModule","MatSidenavModule","MatDividerModule","MatSlideToggleModule","MatProgressBarModule","MatProgressSpinnerModule","MatAutocompleteModule","LoaderComponent","generateFake","count","indexes","configRxLogoutStompConfig","brokerURL","heartbeatIncoming","heartbeatOutgoing","reconnectDelay","debug","msg","ChipIconsComponent","getChipIcon","chipIconKey","strKey","chipLabel","getChipLabel","strCss","chipKey","isFractionalChipDenom","denom","PromotionService","getPromotions","promotionId","createPromotion","getWinners","getEligibleDays","getCompApi","path","ELEMENT_DATA_W","creationTime","prizeName","totalamount","pitName","tableName","seat","sessionId","WinnerEligibleSessionsComponent","promotionService","perPageOption","totalRecord","displayedColumns_W","displayedColumns_ES","dataSource_ES","init","command","cmd","close","observe","getTopologyNameById","updatePagination","ActionMenuComponent","winnerEligibleSessions","height","afterClosed","openPlayerSearch","RollTimeDialogComponent","currentTopologyService","displayedColumns","currentGamingDays","rollTimeTopologyMap","selectedNodeIds","rollTimePayloadData","setCurrentData","requestObject","dateTime","rollTimeData","processTopology","userConditions","renderView","disableRollTimeSelection","setTimeOnCalender","selectedRollTime","maxDate","startAt","minStartTime","setDate","getDate","maxDateTime","rollTime","toISOString","selectLocation","childrenNodeMap","childrenNodes","allChildrenNodes","callRecursively","locationSelection","isChecked","topologyNode","renderedRollTimeData","map","childrenIds","extractNodeIdFromHref","childNodesHrefs","currentChildrenNodes","hrefArray","idArr","ids","topologyObj","allGamingDays","locationPath","currentGamingDayViewValue","nextRollDtmViewValue","uniqueGamingDays","Set","currentTopologyName","slice","reverse","onClose","onGamingDaySelection","sortDataObj","submitRollTime","RollTimeComponent","openDialog","OwlDateTimeModule","OwlNativeDateTimeModule","CommonModule","CommonTranslationModule","AccessDeniedComponent","AppAddNodeTopologyComponent","_topologyService","fb","optionArr","min","max","isHost","addedNodeEvent","sitesFromTopology","isAccessGroup","isAGNameInvalid","isShortNameInvalid","isLongNameInvalid","limitForm","group","description","validateShortName","isErrorState","control","isDuplicate","validateName","validateAccessGroupName","called","addValidations","valChangeFunction","evt","fName","valObj","patchValue","onlySelf","addControl","FormControl","Validators","required","compose","noWhitespace","maxLength","whitespace","showHost","opt","removeControl","createDataForDropdownForAccessGroup","createDataForDropdownForAssingedNode","typeMap","topologyType","siteTopologyCode","companyLevelCode","keyOfSits","keyOfSits_1","__values","keyOfSits_1_1","done","types","clickedNode","childTypeIds","temp","temp_1","temp_1_1","tp","labelCode","createAccessGroup","groupName","accessGroupName","param","typeValAGroup","groupType","code","savedAccessGroup","closeDialogBox","createAssingedNode","longName","typeVal","host","savedLocation","typeName","clickNode","createNode","field","isRedundant","accessGroups","allNodes","isSaveDisabled","invalid","FormBuilder","PLAYERS_DATA","playername","playerwinloss","AppTabBarComponent","playersListColumns","winningPlayersList","BuyInsComponent","OpenerCloserComponent","FillCreditComponent","ELEMENT_DATA","position","weight","symbol","GameHistoryComponent","dataSource","columnsToDisplay","animations","trigger","style","minHeight","display","transition","animate","ChipsetPanelComponent","panelOpenState","chipSetData","csPanelHeaderHeight","ɵ1","rxStompServiceFactory","MaterialComponentModule","AppRollTimeModule","LoggerModule","serverLoggingUrl","level","NgxLoggerLevel","OFF","serverLogLevel","disableConsoleLogging","InjectableRxStompConfig","useValue","ɵ0$1","HTTP_INTERCEPTORS","useClass","multi","entryComponents","HttpClientModule","configRxAlertStompConfig","ChipService","getChipset","WDTSUtility","validateNumberField","_event","valLen","currentTarget","numberWithDecimal","dotCount","charCode","which","checkNumberOnly","numeric","checkNumeric","selectionStart","equalIgnoreCase","string1","string2","ignoreCase","useLocale","toLocaleLowerCase","isNonZeroRegex","maxlen","isNonZeroValue","test","MY_CUSTOM_FORMATS","fullPickerInput","year","month","day","hour","minute","hour12","datePickerInput","timePickerInput","monthYearLabel","dateA11yLabel","monthYearA11yLabel","AppTablesComponent","rowHeader","isCheckedAll","selectedFilter","isFilterOpen","noDataAvailable","bulkUpdateActive","fromToFilter","fromTimeArr","toTimeArr","isDblClicked","editableColumnWidth","disableFilterButton","tableRows","tableHeaders","totalRecords","filterOptions","editableTable","tableTitle","isPitClicked","tableExpandableRows","checkAll","checkBoxEvent","checkBoxAllEvent","filterChange","pagination","math","textAutofillControl","setRowHeaders","setSelectedFilters","filteredOptionsAutofillControl","valueChanges","startWith","_filter","previousValue","item","updateRowStatus","filterValue","checkForDisable","isChanged","deletePPId","valueTextAutofill","checked","alertSeverity","sortFirst","clearFilterFlag","find","o","ob","checkAllRows","elm","bulkCheckBoxClickEvt","unCheckAllRows","updateEventObj","isDisable","sortData","resetValues","updateFilter","applyFilter","fromTime","toTimeString","toTime","promoFromDate","promoToDate","timeForLocalGamingDay","time","gamingDayAry","getHours","getMinutes","clearFilter","requestAnimationFrame","filterComponents","filterComponent","inputStart","inputCurrentPage","currentPage","inputLimit","limit","perPageLimit","bulkStatusUpdate","status","updateCheckedStatus","_index","elem","cancelUpdate","isEdited","headerSelected","indexDblClicked","editedCol","getLabel","oldName","changedLabel","trimWhiteSpace","labelDblClicked","element","header","col","headerType","colAlreadyEdited","input01","focus","input02","validation","input04","input03","updateLabel","throwValueError","setPath","colValue","apath","absolutePath","getText","isUndefinedValue","x","numberFormatterRequired","needsFormatter","validateInputs","toMinTime","setTime","toMaxTime","setHours","isArrayEmpty","_array","retVal","isArray","getRoundedNum","reqValue","concatEmpId","headerRowElem","empCode","isPPMasterRow","ELEM","employeeNumber","userName","getCustomTranslatedText","text","separator","join","loadDefaultImage","src","restrictNumberField","_evt","maxLen","validateInputsTime","domdateTime4","ngAfterViewChecked","getAnonymousTranslatedVal","OWL_DATE_TIME_FORMATS","ViewChild","ViewChildren","AppTablesService","initPagination","filterConfigOptions","clearPreFilters","setFilterOptions","this_1","clearEmptyParams","PaginationComponent","tableService","isTableGrid","EMIT_PAGINATION","totalPage","firstPage","paginationSubscriber","nextPage","emitPagination","previousPage","lastPage","changePageLimit","goToAnyPage","currntPage","paginationObj","ngOnDestroy","unsubscribe","MatSortModule","DragDropItemNode","DragDropItemFlatNode","ASSIGNEDDATA","TreeDragDropItemDataBase","dataChangeAssigned","dataChangeUnassigned","dataChangeAG","dataChangeVG","initialize","dataSourceName","dispatchNextData","dataAssigned","buildFileTree","reduce","accumulator","concat","insertItem","parent","newItem","insertItemAbove","parentNode","getParentFromNodes","splice","insertItemBelow","currentRoot","getParent","child","updateItem","deleteItem","deleteNode","copyPasteItem","to","copyPasteItemAbove","copyPasteItemBelow","nodeToDelete","ConfirmDeleteComponent","TopologyTreeDragDropComponent","database","_topologyTreeService","_cageService","_casinoManagerService","flatNodeMap","nestedNodeMap","dragNodeExpandOverWaitTimeMs","topologyTreeConfig","arrNestedDataSource","isEditable","isGroupNameInvalid","addNode","permissionToAccess","accessGroupForm","accessGroupEditForm","getLevel","isExpandable","expandable","hasChild","_","_nodeData","hasNoContent","transformer","parentName","existingNode","flatNode","validateGroupName","isDuplicateName","treeFlattener","MatTreeFlattener","treeControl","FlatTreeControl","handleSubscribers","addFormValidations","ngAfterViewInit","expandAll","onitFunction","updateTopologyNodes","updateNodeNames","_getAssignedNodes","assignTreeObject","setAssignedNodes","createAccessGroupNodes","unAssignedNodes","databaseSubscriber","_createDataSources","_setUnassignedNodes","_setAccessGroupNodes","addNodeToTopology","handleClick","currentClickedNode","nodeDetails","addAccessGroupToTopology","newNode","assignData","assignedDataSource","MatTreeFlatDataSource","unassignedDataSource","accessGroupDataSource","virtualGroupDataSource","unassignedItemsArr","unassignedresponse","childNodes","response_1","response_1_1","unassignedNodesArr","dataUnassigned","agresponse","accessGroupNodesLength","agresponse_1","agresponse_1_1","ag","topologyNodeIds","childArr","childId","childNode","dataAG","isForSearch","newData","assigndata","treeData","assignedNodesKeys","firstKey","_getflatDataToNested","setTreeData","topologyParentAssignedGroup","_getAssignedNestedNodes","dataAssignedNodes","assingedDataNodes","arr","arrNodes","parentId","output","nodeIdsArr","lastKey","nodesDetail","setParentChildren","setChildrenOfChildren","checkIfChildren","nodesArr","handleDragStart","dataTransfer","setData","emptyItem","setDragImage","dragNode","collapse","handleDragOver","dragNodeExpandOverNode","isExpanded","dragNodeExpandOverTime","expand","offsetX","clientWidth","percentageY","offsetY","clientHeight","dragNodeExpandOverArea","handleDrop","draggedNodeId","nodeDetail","dragNodeObject_1","openTables","stats","dragAssignedToAssigned","isTerminal","nodeAlreadyExists","dragToAccessGroup","dragUnassignedNode","handleDragEnd","accessNode","dragNodeToAccess","j","jLen","agNode","keysArr_1","aLen","accessObj","bLen","updateAccessGroup","this_2","keysArr_2","childNodeId","childTypeId","parentTypeId","prevParentId","isActualChild","parentChildren","dragNodeToAssigned","objToDrag","addToTopologyNodesArr","updateAssignedNodes","childName","label","allTypeChildren","unassignedNodeId","unassignedNodeType","unassignedNodeName","unassignedNodeDesc","dragUnassignedToAssigned","nodeToDrag","responseArr","updateUnassignedItems","nodeData","openTableProperties","objToSend","selectedNode","checkSearchText","assignedKeys","filterAssignedNodes","filteredAssignedNodes","reqNodeId","rectifyFilteredObject","tempArr","cancelSearch","clickedTable","tableId","deleteAccessGroup","accessNodes","isActiveAccessGroup","isLastChild","isChildOfActiveAG","removeAccessGroupChild","arrLength","accessGroupId","totalRecordsReturned","openConfirmDeleteBox","removeAccessGroup","objToDelete_1","this_3","idArr_1","accessNodeObj_1","this_4","c","cLen","editAccessGroupName","nodeToEdit","groupParentName","getNodeName","changedName","_b","_c","updateNodeName","formName","newValue","prevName_1","clearNodeName","gName","draggedNode","newParentId","parentIdString","deleteFromTopologyNodesArr","newArr","isNodeATerminal","isNodePresent","isTerminalOfPit","parentID","AppTablesModule","TransactionsService","getBuyInData","getCreditData","getFillData","getChipTrayScanData","handleError","operation","of","FooterNavComponent","MinusSignToParenthesisPipe","charAt","TableDashboardService","getPlayers","getBetsUsingUuid","getPlayerById","getSessionDetailBySessionID","getSessionDetailSessionsByIds","sessionIdAry","UpdatedPlayerId","updateTime","sessionIds","ircNumbers","updateNotes","createManualRating"],"mappings":"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","sourcesContent":["export const protocol = 'https://';\nexport const authenticationType = 'LDAP';\nexport const webServerDNS = 'wdts-gateway-qe6.wdtablesystems.com';\nexport const treasuryPort = '785';\nexport const webDashboardPort = '792';\nexport const webConfigurationTLSPort = '782';\nexport const webCasinoManagerTLSPort = '783';\nexport const webPlayerDashboardTLSPort = '789';\nexport const webAlertsTLSPort = '791';\nexport const webTableDashboardTLSPort = '#@webTableDashboardTLSPort@#';\nexport const webCamTLSPort = '781';\nexport const webCashierTLSPort = '786';\nexport const webLoginPort = '#@webLoginTLSPort@#';\nexport const tableUIProtocol = '#@webserverTableUIProtocol@#';\nexport const tableUIPort = '#@singleTablePort@#';\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlAlertConstantsInterface {\n    socketAlert: string;\n    alertsPath: string;\n    alertCountsPath: string;\n    alertConfigurationPath: string;\n    metricsPath: string;\n    filter: string;\n    tableAlerts: string;\n    alertCountsByCategoryPath: string;\n}\n\nconst basePath = '/api/alert';\nconst version = '/v1/';\nconst baseUrl = protocol + webServerDNS + basePath + version;\n\nexport const alert: UrlAlertConstantsInterface = {\n    socketAlert: 'wss://' + webServerDNS + '/alert/websocket',\n    alertsPath: baseUrl + 'alerts',\n    alertCountsPath: baseUrl + 'alertCounts',\n    tableAlerts: baseUrl + 'alertCounts/tables',\n    alertConfigurationPath: baseUrl + 'alertConfiguration',\n    metricsPath: baseUrl + 'metrics',\n    filter: baseUrl + 'filters',\n    alertCountsByCategoryPath: baseUrl + 'alertCountsByCategory'\n};\n\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlAuthenticationInterface {\n    login: string;\n    refresh: string;\n    logoutWS: string;\n    logout: string;\n}\n\nconst basePath = '/api/auth';\nconst oAuth = '/oauth/token';\nconst baseUrl = protocol + webServerDNS + basePath + oAuth;\n\nexport const auth: UrlAuthenticationInterface = {\n    login: baseUrl + '/login',\n    refresh: baseUrl + '/refresh',\n    logoutWS: 'wss://' + webServerDNS + basePath + '/logoutRequest/websocket',\n    logout: baseUrl + '/logout'\n};\n\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlConfigurationConstantsInterface {\n    categories: string;\n    configurations: string;\n    properties: string;\n    luckyChipEnabled: string;\n    globalAnonymousHostEnabled: string;\n    insuranceEnabled: string;\n}\n\nconst basePath = '/api/configuration';\nconst version = '/v1/';\nconst baseUrl = protocol + webServerDNS + basePath + version;\n\nexport const configuration: UrlConfigurationConstantsInterface = {\n    categories: baseUrl + 'categories/',\n    configurations: baseUrl + 'configurations/',\n    properties: baseUrl + 'properties/',\n    luckyChipEnabled: baseUrl +\n    'configurations/?propertyCodes=com.wdts.bonus.luckyChip.enabled&templateTypeCode=SYSTEM&type=TEMPLATE',\n    globalAnonymousHostEnabled: baseUrl +\n    'configurations/?propertyCodes=com.wdts.anonymous.session.alert.enabled&templateTypeCode=SYSTEM&type=TEMPLATE',\n    insuranceEnabled: baseUrl + 'configurations/insurance-bet-enabled/status'\n};\n\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlCasinoConstantsInterface {\n    topologyStatistics: string;\n    topologyStatisticsForVirtualGroup: String;\n    topologyStatisticsTabularView: string;\n    topologyStatisticsGridView: string;\n    topologyStatsByTableType: string;\n    playerStatistics: string;\n    topLosingCasino: string;\n    topWinningCasino: string;\n    topLosingPlayersVirtualGroup: string;\n    topWinningPlayersVirtualGroup: string;\n    tableFilter: string;\n    playerFilter: string;\n    updatePlayer: string;\n    activePlayer: string;\n    userSearch: string;\n    paginatedSearchManualRatings: string;\n    updateManualRating: string;\n    manualRatingNote: string;\n    topologyStatsTabularView: string;\n}\n\nconst basePath = '/api/casinomanager';\nconst version = '/v1/';\nconst authBasePath = '/api/auth';\nconst baseUrl = protocol + webServerDNS + basePath + version;\n\nexport const casinoMgr: UrlCasinoConstantsInterface = {\n    topologyStatistics: baseUrl + 'topologyStatistics',\n    topologyStatisticsForVirtualGroup: baseUrl + 'topologyStatisticsForVirtualGroup',\n    topologyStatisticsTabularView: baseUrl + 'topologyStatisticsTabularView',\n    topologyStatisticsGridView: baseUrl + 'topologyStatisticsWithCount',\n    topologyStatsByTableType: baseUrl + 'topologyStatsByTableType',\n    playerStatistics: baseUrl + 'playerStatistics',\n    topLosingCasino: baseUrl + 'playerStats/topLosingCasino',\n    topWinningCasino: baseUrl + 'playerStats/topWinningCasino',\n    topLosingPlayersVirtualGroup: baseUrl + 'playerStats/topLosingPlayersVirtualGroup',\n    topWinningPlayersVirtualGroup: baseUrl + 'playerStats/topWinningPlayersVirtualGroup',\n    tableFilter: baseUrl + 'filter',\n    playerFilter: baseUrl + 'playerFilter',\n    updatePlayer: baseUrl + 'updatePlayer',\n    activePlayer: baseUrl + 'activePlayer',\n    userSearch: protocol + webServerDNS + authBasePath + version + 'users/',\n    paginatedSearchManualRatings: baseUrl + 'paginatedSearchManualRatings',\n    updateManualRating: baseUrl + 'manualRatings/',\n    manualRatingNote: baseUrl + 'manualRatingNote/',\n    topologyStatsTabularView: baseUrl + 'topologyStatsTabularView'\n};\n\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlUserConstantsInterface {\n    usersPath: String;\n    users: String;\n    roles: string;\n    applications: string;\n}\n\nconst basePath = '/api/user';\nconst version = '/v1/';\nconst baseUrl = protocol + webServerDNS + basePath + version;\n\nexport const user: UrlUserConstantsInterface = {\n    usersPath: baseUrl + 'users/',\n    users: baseUrl + 'users/',\n    roles: baseUrl + 'roles/',\n    applications: baseUrl + 'applications/',\n};\n\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlChipSetConstantsInterface {\n    chipSet: string;\n    currencyList: string;\n    companyList: string;\n    updateChipSet: string;\n    chipTrayScan_NEW: string;\n    missingChips: string;\n    missingChipScan: string;\n    getScanCompDetail: string;\n}\n\nconst basePath = '/api/chip';\nconst version = '/v1/';\nconst baseUrl = protocol + webServerDNS + basePath + version;\n\nexport const chipSet: UrlChipSetConstantsInterface = {\n    chipSet: baseUrl + 'chipsets/configurationChipsets',\n    currencyList: baseUrl + 'currency',\n    companyList: baseUrl + 'company',\n    updateChipSet: baseUrl + 'chipsets',\n    chipTrayScan_NEW: baseUrl + 'chipTrayScans',\n    missingChips: baseUrl + 'missingChipList',\n    missingChipScan: baseUrl + 'getScanDetail',\n    getScanCompDetail: baseUrl + 'getScanCompDetail'\n};\n\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlRolesConstantsInterface {\n    roleData: string;\n    permission: string;\n}\n\nconst basePath = '/api/user';\nconst version = '/v1/';\nconst baseUrl = protocol + webServerDNS + basePath + version;\nexport const roles: UrlRolesConstantsInterface = {\n    roleData: baseUrl + 'roles',\n    permission: baseUrl + 'permissions'\n};\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlTopologyConstantsInterface {\n    topologyGroups: string;\n    topologyTypes: string;\n    topologyNodes: string;\n    virtualGroupNodesUrl: string;\n}\n\nconst basePath = '/api/topology';\nconst version = '/v1/';\nconst baseUrl = protocol + webServerDNS + basePath + version;\n\nexport const topology: UrlTopologyConstantsInterface = {\n    topologyGroups: baseUrl + 'topologyGroups/',\n    topologyTypes: baseUrl + 'topologyTypes/',\n    topologyNodes: baseUrl + 'topologyNodes/',\n    virtualGroupNodesUrl: baseUrl + 'topologyGroups/?groupType=VIRTUAL&userId='\n};\n\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlCageConstantsInterface {\n    chipsInventory: string;\n    localGamingDay: string;\n    nextRollDtm: string;\n    gamingDays: string;\n    buyInTransaction: string;\n    chipTrayScan: string;\n    paginatedOpenerCloser: string;\n    missingChips: string;\n    missingChipScan: string;\n    getScanCompDetail: string;\n    chipTrayOpenerCloser: string;\n    openerCloserReport: string;\n    printReport: string;\n    getfcTransactions: string;\n    gamingDay: string;\n}\n\nconst basePath = '/api/chip';\nconst cageBasePath = '/api/cage';\nconst printBasePath = '/api/print';\nconst casinoBasePath = '/api/casinomanager';\nconst version = '/v1/';\nconst transactions = 'transactions';\nconst baseUrl = protocol + webServerDNS + basePath + version;\nconst cageBaseUrl = protocol + webServerDNS + cageBasePath + version;\nconst casinoBaseUrl = protocol + webServerDNS + casinoBasePath + version;\nconst printBaseUrl = protocol + webServerDNS + printBasePath + version;\n\nexport const cage: UrlCageConstantsInterface = {\n    chipsInventory: baseUrl + 'chipTrayInventory/',\n    localGamingDay: casinoBaseUrl + 'localGamingDay',\n    nextRollDtm: casinoBaseUrl + 'nextRollDtm',\n    gamingDays: casinoBaseUrl + 'localGamingDaysInHierarchy',\n    buyInTransaction: baseUrl + transactions,\n    chipTrayScan: baseUrl + 'chipTrayScans/table/',\n    paginatedOpenerCloser: baseUrl + 'paginatedOpenerCloser',\n    missingChips: baseUrl + 'missingChipList',\n    missingChipScan: baseUrl + 'getScanDetail',\n    getScanCompDetail: baseUrl + 'getScanCompDetail',\n    chipTrayOpenerCloser: baseUrl + 'chipTrayOpenerCloser',\n    openerCloserReport: baseUrl + 'openerCloserReportData',\n    printReport: printBaseUrl + 'renderReport',\n    getfcTransactions: cageBaseUrl + 'fcTransactions',\n    gamingDay: '2019-03-28'\n};\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlTopologyTreeConstantsInterface {\n    topologyTreeNodesUrl: string;\n    unassignedNondeUrl: string;\n    topologyNodesUrls: string;\n    accessGroupNodesUrl: string;\n}\n\nconst basePath = '/api/topology';\nconst version = '/v1/';\nconst commonPath = 'topologyNodes/';\nconst topologyGroupPath = 'topologyGroups/';\nconst baseUrl = protocol + webServerDNS + basePath + version;\n\nexport const topologyTree: UrlTopologyTreeConstantsInterface = {\n    topologyNodesUrls: baseUrl + commonPath,\n    topologyTreeNodesUrl: baseUrl + commonPath + 'hierarchy',\n    unassignedNondeUrl: baseUrl + commonPath + 'global/UNASSIGNED',\n    accessGroupNodesUrl: baseUrl + topologyGroupPath\n};\n\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlPromotionConstantsInterface {\n    promotionPath: string;\n    promotionUpdatePath: string;\n    managePromotionEnabled: string;\n    winners: string;\n    promotionsEligibleDays: string;\n    promotionsWinnerVoucher: string;\n    promotionsCompApi: string;\n}\n\nconst basePath = '/api/promotion';\nconst version = '/v1/';\nconst baseUrl = protocol + webServerDNS + basePath + version;\nconst compApiBasePath = protocol + webServerDNS + '/api/integration' + version + 'integration/'\n\nexport const promotion: UrlPromotionConstantsInterface = {\n    promotionPath: baseUrl + 'promotions',\n    promotionUpdatePath: baseUrl,\n    managePromotionEnabled: baseUrl + 'promotion-management-enabled/status',\n    winners: baseUrl + 'winners',\n    promotionsEligibleDays: baseUrl + 'promotions-eligible-days',\n    promotionsWinnerVoucher: baseUrl,\n    promotionsCompApi: compApiBasePath\n};\n\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlGameInterface {\n    paginatedSearchManualRatings: string;\n    paginatedSessions: string;\n    paginatedGames: string;\n    bets: string;\n    sessions: string;\n    sessionsByIds: string;\n    updateIrcNumber: string;\n    sessionNote: string;\n    manualRatings: string;\n}\n\nconst basePath = '/api/game';\nconst version = '/v1/';\nconst baseUrl = protocol + webServerDNS + basePath + version;\n\nexport const game: UrlGameInterface = {\n    paginatedSearchManualRatings: baseUrl + 'paginatedSearchManualRatings',\n    paginatedSessions: baseUrl + 'paginatedSessions',\n    paginatedGames: baseUrl + 'paginatedGames',\n    bets: baseUrl + 'bets',\n    sessions: baseUrl + 'sessions',\n    sessionsByIds: baseUrl + 'sessionsByIds',\n    updateIrcNumber: baseUrl + 'updateIrcNumber',\n    sessionNote: baseUrl + 'sessionNote',\n    manualRatings: baseUrl + 'manualRatings'\n};\n\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlDeviceConstantsInterface {\n    deviceBasePath: string;\n}\n\nconst basePath = '/device';\nconst baseUrl = protocol + webServerDNS + basePath;\n\nexport const device: UrlDeviceConstantsInterface = {\n    deviceBasePath: baseUrl + '/'\n};\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlPlayersInterface {\n    playersSearch: string;\n}\n\nconst basePath = '/api/player';\nconst version = '/v1/';\nconst baseUrl = protocol + webServerDNS + basePath + version;\n\nexport const player: UrlPlayersInterface = {\n    playersSearch: baseUrl + 'players/'\n};\n","import {protocol, webServerDNS} from './url.common.constants';\n\nexport interface UrlTableConstantsInterface {\n  playerSearch: string;\n}\n\nconst basePath = '/api/table';\nconst version = '/v1/';\nconst baseUrl = protocol + webServerDNS + basePath + version;\nexport const table: UrlTableConstantsInterface = {\n    playerSearch: baseUrl + 'players/'\n};\n","import {alert, UrlAlertConstantsInterface} from './url-alert.constants';\nimport {auth, UrlAuthenticationInterface} from './url-authentication.constants';\nimport {UrlUserConstantsInterface, user} from './url-user.constants';\nimport {configuration, UrlConfigurationConstantsInterface} from './url-configuration.constants';\nimport {chipSet, UrlChipSetConstantsInterface} from './url-chipset.constants';\nimport {roles, UrlRolesConstantsInterface} from './url-roles.constants';\nimport {topology, UrlTopologyConstantsInterface} from './url-topology.constants';\nimport {cage, UrlCageConstantsInterface} from './url-cage.constants';\nimport {UrlTopologyTreeConstantsInterface, topologyTree} from './url-topologytree.constants';\nimport {promotion, UrlPromotionConstantsInterface} from './url-promotion.constants';\nimport {casinoMgr, UrlCasinoConstantsInterface} from './url-casinomanager.constants';\nimport {game, UrlGameInterface} from './url-game.constants';\nimport {device, UrlDeviceConstantsInterface} from './url-device.constants';\nimport {player, UrlPlayersInterface} from './url-players.constant';\nimport {table, UrlTableConstantsInterface} from './url-table.constants';\n\nexport interface URLInterface {\n    alert: UrlAlertConstantsInterface;\n    auth: UrlAuthenticationInterface;\n    user: UrlUserConstantsInterface;\n    config: UrlConfigurationConstantsInterface;\n    chipSet: UrlChipSetConstantsInterface;\n    roles: UrlRolesConstantsInterface;\n    topology: UrlTopologyConstantsInterface;\n    cage: UrlCageConstantsInterface;\n    topologyTree: UrlTopologyTreeConstantsInterface;\n    promotion: UrlPromotionConstantsInterface;\n    casinoMgr: UrlCasinoConstantsInterface;\n    game: UrlGameInterface;\n    device: UrlDeviceConstantsInterface;\n    player: UrlPlayersInterface;\n    table: UrlTableConstantsInterface;\n}\n\nexport const urls: URLInterface = {\n    alert: alert,\n    auth: auth,\n    user: user,\n    config: configuration,\n    chipSet: chipSet,\n    roles: roles,\n    topology: topology,\n    cage: cage,\n    topologyTree: topologyTree,\n    promotion: promotion,\n    casinoMgr: casinoMgr,\n    game: game,\n    device: device,\n    player : player,\n    table: table\n};\n\n\n","/**\n * Created by akgupta on 11/19/18.\n */\nexport const dialogSize = {\n    xsmall: '30vw',\n    small: '50vw',\n    medium: '65vw',\n    large: '80vw',\n    xlarge: '90vw',\n    fullscreen: '98vw'\n};","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpParams, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\n\nexport interface ITopologyNodes {\n    meta: {\n        href: string,\n        mediaType: string\n    };\n    nodeId: string;\n    name: string;\n    shortName: string;\n    type: number;\n    description: string;\n    deleted: boolean;\n    retired: boolean;\n    parentNodeId: number;\n    parentNodeHref: string;\n    path: string;\n    childNodesHrefs: Array<any>;\n    createdDtm: string;\n    updatedDtm: string;\n    status: string;\n    children: Array<any>;\n}\n\n\n/**\n * AVG:(Access or Virtual Group) nodes, this interface has common properties for access and virtual group.\n */\nexport interface ITopologyAVGNodes {\n    createdDtm: string;\n    groupName: string;\n    groupType: string;\n    meta: {\n        href: string,\n        mediaType: string\n    };\n    topologyGroupId: number;\n    topologyId: number;\n    topologyNodeIds: Array<any>;\n    updatedDtm: string;\n    userId: number;\n}\n\n/**\n * if you need to provide it at global level do not specify the module here just write the 'root', this is restricted to module if you\n * want to use the service need to import TopologyTreeModule.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TopologytreeService {\n  constructor(private _http: HttpClient) { }\n\n    getTopologyNodes(url) {\n        return this._http.get(url) as Observable<ITopologyNodes[]>;\n    }\n    getTopologyTypes(url) {\n        return this._http.get(url) as Observable<ITopologyNodes[]>;\n    }\n\n    getTopologyNodeByNodeId(url, params: HttpParams = null) {\n        return this._http.get(url, { params }) as Observable<ITopologyNodes[]>;\n    }\n    getAccessOrVirtualGroupNodes(url, params: HttpParams = null) {\n        return this._http.get(url, { params }) as Observable<ITopologyAVGNodes[]>;\n    }\n    getTopologyNodeUnassigned(url) {\n        return this._http.get(url) as Observable<ITopologyNodes[]>;\n    }\n}\n","import {EventEmitter, Injectable} from '@angular/core';\nimport {forkJoin, Observable} from 'rxjs';\nimport {HttpClient, HttpParams, HttpResponse} from '@angular/common/http';\nimport {urls} from '../constants/urls';\nimport {TopologyNodeInterface, TopologyTypesInterface} from '../interface/topology-types.interface';\nimport {TopologytreeService} from './topologytree.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TopologyService {\n    topologyTypes;\n    topologyNodes;\n    topologyNodeNames;\n    //companyNode;\n    siteChildren;\n    accessGroupNodes;\n    virtualGroupNodes;\n    unAssignedNodes;\n    unassignedNodesArr;\n    accessGroupParams = new HttpParams().set('groupType', 'ACCESS');\n    virtualGroupParams = new HttpParams().set('groupType', 'VIRTUAL');\n    initialized = new EventEmitter();\n    nodeClicked = new EventEmitter();\n    terminalClicked = new EventEmitter();\n    areasLabelClicked = new EventEmitter();\n    nodeUpdated = new EventEmitter();\n    nodeDragged = new EventEmitter();\n\n    constructor(private http: HttpClient,\n                private treeService: TopologytreeService) {\n            this.initTopology();\n\n    }\n\n    initTopology() {\n        //Need To Fix\n                    if (!this.topologyTypes && !this.topologyNodes && !this.accessGroupNodes) {\n                        //GR-3058 changes.authValues clientId\n                        const authValues = JSON.parse(localStorage.getItem('authValues'));\n                        if (!authValues) {\n                            this.fetchTopologyData();\n                        } else {\n                            if (authValues && authValues.clientId !== 'lgn') {\n                                this.fetchTopologyData();\n                            }\n                        }\n                    }\n\n        // if (!this.virtualGroupNodes) {\n        //     this.fetchTopologyDataWithVG();\n        // }\n    }\n\n    fetchTopologyData() {\n        forkJoin(\n            this.getTopologyType({}),\n            this.treeService.getTopologyNodes(urls.topologyTree.topologyTreeNodesUrl),\n            this.treeService.getAccessOrVirtualGroupNodes(urls.topologyTree.accessGroupNodesUrl, this.accessGroupParams))\n            .subscribe((result) => {\n                this.topologyTypes = this.simplifyTopologyTypes(result[0]);\n                this.topologyNodes = result[1];\n                this.topologyNodeNames = this.createNodeNamesObject(result[1]);\n                this.siteChildren = this.getSiteChildren(this.topologyNodeNames);\n                // this.getCompanyNodeId();\n                this.accessGroupNodes = result[2];\n                if (result.length > 0) {\n                    this.initialized.next('nodesInitialized');\n                }\n            });\n    }\n\n    // fetchTopologyDataWithVG() {\n    //     forkJoin(\n    //         this.getTopologyType({}),\n    //         this.treeService.getTopologyNodes(urls.topologyTree.topologyTreeNodesUrl),\n    //         this.treeService.getAccessOrVirtualGroupNodes(urls.topologyTree.accessGroupNodesUrl, this.virtualGroupParams))\n    //         .subscribe((result) => {\n    //             //console.log(' fetchTopologyDataWithVGfork join result', JSON.stringify(result));\n    //             this.topologyTypes = this.simplifyTopologyTypes(result[0]);\n    //             this.topologyNodes = result[1];\n    //             //console.log(\"this.topologyNodes\"+JSON.stringify(this.topologyNodes))\n    //             this.topologyNodeNames = this.createNodeNamesObject(result[1]);\n    //             //this.getCompanyNodeId();\n    //             this.siteChildren = this.getSiteChildren(this.topologyNodeNames);\n    //             this.virtualGroupNodes = result[2];\n    //             if (result.length > 0) {\n    //                 this.initialized.next('nodesInitializedWithVg');\n    //             }\n    //         });\n    // }\n\n    // getCompanyNodeId(){\n    //     for (const key in this.topologyNodeNames){\n    //         if (this.topologyNodeNames[key].type === 100){\n    //             this.companyNode = {\n    //                 \"nodeId\": this.topologyNodeNames[key].nodeId,\n    //                 \"name\": this.topologyNodeNames[key].name,\n    //                 \"shortName\": this.topologyNodeNames[key].shortName\n    //             }\n    //                 this.topologyNodeNames[key].nodeId;\n    //             console.log(\"this.companyNode \"+JSON.stringify(this.companyNode ))\n    //         }\n    //     }\n    // }\n\n    getAccessGroup(options: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.topology.topologyGroups}`;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n\n    getTopologyType(options: {}): Observable<TopologyTypesInterface[]> {\n        return this.http.get<TopologyTypesInterface[]>(urls.topology.topologyTypes, options);\n    }\n\n    getTopologyNodes(options: {}): Observable<TopologyNodeInterface[]> {\n        return this.http.get<TopologyNodeInterface[]>(urls.topology.topologyNodes, options);\n    }\n\n    getTopologyPits(options: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.topology.topologyNodes}?typeId=400`;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n\n    getTablesByPitId(pitId, options: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.topology.topologyNodes}?parentId=${pitId}`;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n\n    updateTopologyNode(nodeId, params: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.topologyTree.topologyNodesUrls}${nodeId}`;\n        return this.http.post<HttpResponse<Object>>(url, params);\n    }\n\n    updateTopologyNodeStatus(nodeId, params: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.topologyTree.topologyNodesUrls}${nodeId}`;\n        return this.http.put<HttpResponse<Object>>(url, params);\n    }\n\n    createNodeOnTree(params: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.topologyTree.topologyNodesUrls}`;\n        return this.http.post<HttpResponse<Object>>(url, params);\n    }\n\n    createNodeAccessGroup(params: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.topologyTree.accessGroupNodesUrl}`;\n        return this.http.post<HttpResponse<Object>>(url, params);\n    }\n\n    updateAccessGroupNode(groupId, params: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.topologyTree.accessGroupNodesUrl}${groupId}`;\n        return this.http.put<HttpResponse<Object>>(url, params);\n    }\n\n    deleteAccessGroupNode(groupId, params: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.topologyTree.accessGroupNodesUrl}${groupId}`;\n        return this.http.delete<HttpResponse<Object>>(url, params);\n    }\n\n    getAccessGroupUsers(groupId, options: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.user.usersPath}?topologyGroup=${groupId}`;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n\n    getTableProperties(topologyId, options: {}): Observable<HttpResponse<Object>> {\n        const tablePropertiesArr = ['com.wdts.table.num.player.positions', 'com.wdts.table.rfid.enabled', 'com.wdts.table.lucky6.enabled', 'com.wdts.table.lucky6.antenna'];\n        const url = `${urls.config.configurations}devices?topologyId=${topologyId}&propertyCodes=${tablePropertiesArr}&templateTypeCode=BACCARAT`;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n\n    // getCurrentGamingDay(topologyId): Observable<HttpResponse<Object>> {\n    //     const url = `${urls.cage.localGamingDay}?topologyId=${topologyId}`;\n    //     console.log(\"topology service\"+url)\n    //     return this.http.get<HttpResponse<Object>>(url);\n    // }\n    createNodeNamesObject(nodesData) {\n        const namesObj = {};\n        for (const obj in nodesData) {\n            if (nodesData.hasOwnProperty(obj) && nodesData[obj].length > 0) {\n                for (let i = 0, len = nodesData[obj].length; i < len; i++) {\n                    namesObj[nodesData[obj][i].nodeId] = nodesData[obj][i];\n                }\n            }\n        }\n        return namesObj;\n    }\n\n    simplifyTopologyTypes(typesArr) {\n        const typesMap = new Map<number, object>();\n        for (const obj in typesArr) {\n            if (typesArr.hasOwnProperty(obj)) {\n                typesMap.set(typesArr[obj].topologyTypeId, typesArr[obj]);\n            }\n        }\n        return typesMap;\n    }\n\n    getSiteChildren(nodeNames) {\n        const keysArr = Object.keys(nodeNames);\n        const allKeys = [];\n        for (let i = 0, iLen = keysArr.length; i < iLen; i++) {\n            allKeys.push(parseInt(keysArr[i], 10));\n        }\n        let sites;\n        sites = this.getSites(nodeNames);\n        const siteKeys = [];\n        for (const a in sites) {\n            if (sites.hasOwnProperty(a)) {\n                siteKeys.push(sites[a].id);\n            }\n        }\n        for (const obj in sites) {\n            if (sites.hasOwnProperty(obj)) {\n                sites[obj].children = this.getChildren(sites[obj], nodeNames);\n            }\n        }\n        return sites;\n    }\n\n    getSites(nodeNames) {\n        const nodes = nodeNames;\n        const sites = {};\n        for (const node in nodes) {\n            if (nodes.hasOwnProperty(node) && nodes[node].type === 150) {\n                const nodeObj = {id: 'number', children: []};\n                nodeObj.id = nodes[node].nodeId;\n                nodeObj.children = [];\n                sites[nodes[node].name] = nodeObj;\n            }\n        }\n        return sites;\n    }\n\n    getChildren(siteObj, nodeNames) {\n        let childrenArr = [];\n        for (const obj in nodeNames) {\n            if (siteObj.id === nodeNames[obj].parentNodeId) {\n                childrenArr.push(nodeNames[obj].nodeId);\n            }\n        }\n        childrenArr = this.getOtherChildren(childrenArr, nodeNames);\n        return childrenArr;\n    }\n\n    getOtherChildren(childrenArr, nodeNames) {\n        for (const obj in nodeNames) {\n            for (let i = 0, iLen = childrenArr.length; i < iLen; i++) {\n                if (childrenArr[i] === nodeNames[obj].parentNodeId) {\n                    if (!(childrenArr.indexOf(nodeNames[obj].nodeId) > -1)) {\n                        childrenArr.push(nodeNames[obj].nodeId);\n                    }\n                }\n            }\n        }\n        childrenArr = this.getAllChildren(childrenArr);\n        return childrenArr;\n    }\n\n    getAllChildren(childrenArr) {\n        const nodeKeys = Object.keys(this.topologyNodes);\n        const keysArr = [];\n        for (let i = 0, iLen = nodeKeys.length; i < iLen; i++) {\n            keysArr.push(parseInt(nodeKeys[i], 10));\n        }\n        for (const a in childrenArr) {\n            if (keysArr.indexOf(childrenArr[a]) > -1) {\n                const childrenOfNode = this.topologyNodes[childrenArr[a]];\n                for (let i = 0, iLen = childrenOfNode.length; i < iLen; i++) {\n                    if (childrenArr.indexOf(childrenOfNode[i].nodeId) === -1) {\n                        childrenArr.push(childrenOfNode[i].nodeId);\n                    }\n                }\n            }\n        }\n        for (const b in childrenArr) {\n            if (keysArr.indexOf(childrenArr[b]) > -1) {\n                const allChildren = this.topologyNodes[childrenArr[b]];\n                for (let i = 0, iLen = allChildren.length; i < iLen; i++) {\n                    if (childrenArr.indexOf(allChildren[i].nodeId) === -1) {\n                        childrenArr.push(allChildren[i].nodeId);\n                    }\n                }\n            }\n        }\n        return childrenArr;\n    }\n\n    createVirtualGroup(node) {\n        const url = `${urls.topology.topologyGroups}`;\n        return this.http.post<HttpResponse<Object>>(url, node);\n    }\n\n    updateVirtualGroup(groupId, object) {\n        const url = `${urls.topology.topologyGroups}${groupId}`;\n        return this.http.put<HttpResponse<Object>>(url, object);\n    }\n\n    deleteVirtualGroup(groupId, object) {\n        const url = `${urls.topology.topologyGroups}${groupId}`;\n        return this.http.delete<HttpResponse<Object>>(url, object);\n    }\n\n    getVirtualGroups(userId) {\n        const url = `${urls.topology.virtualGroupNodesUrl}${userId}`;\n        return this.http.get<HttpResponse<Object>>(url);\n    }\n}\n","import {Component, EventEmitter, Input, OnChanges, Output} from '@angular/core';\nimport {TranslateService} from '@ngx-translate/core';\nimport {TopologyService} from '../services/topology.service';\nimport {DatePipe, DecimalPipe} from '@angular/common';\n\n@Component({\n    selector: 'app-filter',\n    templateUrl: './filter.component.html',\n    styleUrls: ['./filter.component.scss']\n})\nexport class FilterComponent implements OnChanges {\n    @Input() configOptions: Object;\n    @Input() isDisabled = false;\n    @Output() EMIT_FILTER = new EventEmitter<any>();\n    @Output() EMIT_FILTER_ALL = new EventEmitter<any>();\n    filterConfigOption: any = {\n        title: '',\n        column: '',\n        class: '',\n        options: [],\n        isTopology: false,\n        selectedOptions: [],\n        isPromotionPit: false,\n        type: ''\n    };\n    searchKey: string;\n    index: number;\n    filterNeedsTranslation = ['status', 'rolled', 'fStatus', 'missingEvent', 'scan1Filter', 'scan2Filter', 'transactionType'];\n    filterNeedsCapsUnderscore = ['missingEvent', 'scan1Filter', 'scan2Filter'];\n    options: Array<any> = [];\n    disableOption = false;\n\n    constructor(private translate: TranslateService,\n                private topologyService: TopologyService,\n                private decimalPipe: DecimalPipe,\n                private datePipe: DatePipe) {\n        this.searchKey = '';\n        this.index = -1;\n    }\n\n    ngOnChanges() {\n        this.disableOption = this.isDisabled;\n        this.filterConfigOption = this.configOptions;\n        for (let i = 0; i < this.filterConfigOption.selectedOptions.length; i++) {\n            if (this.options.indexOf(this.filterConfigOption.selectedOptions[i]) === -1) {\n                this.options.push(this.filterConfigOption.selectedOptions[i]);\n            }\n        }\n        if (!this.filterConfigOption.isPromotionPit) {\n            this.defaultSelectAll();\n        } else if (this.filterConfigOption.isPromotionPit &&\n            this.filterConfigOption.options.length === this.filterConfigOption.selectedOptions.length) {\n            this.defaultSelectAll();\n        } else if (this.filterConfigOption.isPromotionPit) {\n            if (this.filterConfigOption.selectedOptions.length === 0) {\n                this.selectDeselectAll(null, this.filterConfigOption.isPromotionPit);\n            } else {\n                const tmpOption = Array.from(this.filterConfigOption.selectedOptions);\n                this.options = tmpOption;\n                this.emitFilter(false);\n            }\n        }\n    }\n\n    defaultSelectAll(): void {\n        if (this.filterConfigOption.options.length === this.filterConfigOption.selectedOptions.length ||\n            !this.filterConfigOption.selectedOptions.length) {\n            this.options = ['All', ...this.filterConfigOption.options];\n        }\n    }\n\n    selectOption(params: boolean): void {\n        if (params) {\n            this.selectDeselectAll(params, false);\n        } else {\n            this.selectDeselectOtherOptions();\n        }\n    }\n\n    selectDeselectAll(params, isPromotionPit): void {\n        if (isPromotionPit && params === null) {\n            this.options = [];\n        } else if (this.options.indexOf('All') > -1) {\n            const tmpOption = ['All'];\n            for (let i = 0; i < this.filterConfigOption.options.length; i++) {\n                tmpOption.push(this.filterConfigOption.options[i]);\n            }\n            this.options = tmpOption;\n        } else {\n            this.options = [];\n        }\n        this.emitFilter(params);\n    }\n\n    selectDeselectOtherOptions(): void {\n        if (this.options.length === this.filterConfigOption.options.length && this.options.indexOf('All') < 0) {\n            const tmpOption = ['All'];\n            for (let i = 0; i < this.filterConfigOption.options.length; i++) {\n                tmpOption.push(this.filterConfigOption.options[i]);\n            }\n            this.options = tmpOption;\n            this.emitFilter(true);\n        } else if (this.options.length === this.filterConfigOption.options.length) {\n            const tmpOption = Array.from(this.options);\n            tmpOption.shift();\n            this.options = tmpOption;\n            this.emitFilter(false);\n        } else {\n            this.emitFilter(false);\n        }\n    }\n\n    emitFilter(params): void {\n        let selectedOptions = [];\n        if (this.filterConfigOption.isPromotionPit) {\n            selectedOptions = Array.from(this.options);\n            if (params) {\n                selectedOptions.shift();\n            }\n        } else {\n            selectedOptions = Array.from(this.options).indexOf('All') < 0 ? Array.from(this.options) : [];\n            if (params && selectedOptions) {\n                selectedOptions.shift();\n            }\n        }\n        if (Array.from(this.options).indexOf('All') > -1) {\n            this.EMIT_FILTER_ALL.emit({columnName: this.filterConfigOption.column, selectedOption: ['All']});\n        } else {\n            this.EMIT_FILTER_ALL.emit({columnName: this.filterConfigOption.column, selectedOption: selectedOptions});\n        }\n        this.EMIT_FILTER.emit({columnName: this.filterConfigOption.column, selectedOption: selectedOptions});\n    }\n\n    translateFilterOptions(option): string {\n        let translateStr = '';\n        if (option === '' && option === undefined) {\n            return translateStr;\n        }\n        if (this.filterConfigOption.translatePath && option !== 'All') {\n            translateStr = this.filterConfigOption.column === 'eventTypes' ? this.translate.instant(option + '.Alert_Type_Description') :\n                this.translate.instant(this.filterConfigOption.translatePath + '.' + option);\n        } else if (parseInt(option, 10) === -17 || option === '(Blanks)') {\n            translateStr = this.translate.instant('(Blanks)');\n        } else {\n            if (this.filterConfigOption.isTopology && this.topologyService.topologyNodeNames[option]) {\n                translateStr = this.topologyService.topologyNodeNames[option].name;\n            } else if (this.filterNeedsTranslation.indexOf(this.filterConfigOption.column) !== -1) {\n                if (option !== '' && option !== undefined) {\n                    if (this.filterNeedsCapsUnderscore.indexOf(this.filterConfigOption.column) !== -1) {\n                        translateStr = this.translate.instant(option.replace(/ /g, '_').toUpperCase());\n                    } else {\n                        translateStr = this.translate.instant(option);\n                    }\n\n                }\n\n            } else {\n                translateStr = option;\n            }\n\n        }\n        return translateStr;\n    }\n\n    getFormattedValue(option, columnName, columnType): string {\n        if (columnName === 'gamingDay') {\n            return this.datePipe.transform(option, 'dd-MMM-yyyy');\n        } else if (columnType === 'number' && option > 999) {\n            return this.decimalPipe.transform(option, '2.');\n        } else {\n            return option;\n        }\n    }\n\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n    selector: 'app-menu',\n    template: '<app-list [currentAppCode]=\"currentAppCode\" *ngIf=\"currentAppCode\"></app-list>',\n    styleUrls: ['./app-switcher.component.scss']\n})\nexport class AppMenuComponent implements OnInit {\n    currentAppCode: any;\n\n    constructor(public dialogRef: MatDialogRef<AppMenuComponent>, @Inject(MAT_DIALOG_DATA) public data: any) {\n        this.currentAppCode = data.currentAppCode;\n    }\n\n    ngOnInit() {}\n}\n","import {EventEmitter, Injectable} from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n        providedIn: 'root'\n    })\nexport class UtilityService {\n    updateDimensions = new EventEmitter();\n    updatePageNumbers = new EventEmitter();\n    closeDialog = new EventEmitter();\n    broadcastGlobalCalendarGamingDay = new EventEmitter();\n    broadcastBreadCrumClick = new EventEmitter();\n    gamingDay;\n    isCBPT = true;\n\n    constructor() {\n        this.updateCurrentDimensions();\n    }\n\n    updateGlobalCalendarGamingDay(globalCalendarGamingDay) {\n        this.broadcastGlobalCalendarGamingDay.emit(globalCalendarGamingDay);\n    }\n\n    updateBreadCrumClick(breadcrum) {\n        this.broadcastBreadCrumClick.emit(breadcrum);\n    }\n\n    updateCurrentDimensions() {\n        window.addEventListener('resize', () => {\n            this.updateDimensions.next({\n                scrnWidth: window.innerWidth,\n                scrnHeight: window.innerHeight\n            });\n        });\n    }\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {AppMenuComponent} from './app-menu.component';\nimport {dialogSize} from '../constants/constants';\nimport {UtilityService} from '../services/utility.service';\n\n@Component({\n    selector: 'app-switcher',\n    templateUrl: './app-switcher.component.html',\n    styleUrls: ['./app-switcher.component.scss']\n})\nexport class AppSwitcherComponent implements OnInit {\n    isLoginApp: boolean;\n    isPPMaster: boolean;\n    @Input('currentAppCode') currentAppCode;\n\n    constructor(private snackBar: MatSnackBar, public dialog: MatDialog, public utilService: UtilityService) {\n        this.utilService.closeDialog.subscribe((res) => {\n            this.closeAppMenu();\n        }, (err) => {\n            console.log(err);\n        });\n    }\n\n    ngOnInit() {\n        const authValues = JSON.parse(localStorage.getItem('authValues'));\n        this.isLoginApp = authValues.clientId === 'lgn';\n        location.href.includes('ppmaster') ? this.isPPMaster = true : this.isPPMaster = false;\n    }\n\n    openAppMenu(): void {\n        this.dialog.open(AppMenuComponent, {\n            width: dialogSize.medium,\n            panelClass: 'app-switcher__wrapper',\n            data: {currentAppCode: this.currentAppCode}\n        });\n    }\n    closeAppMenu(): void {\n        this.dialog.closeAll();\n    }\n}\n\n\n","import {Injectable} from '@angular/core';\nimport {HttpBackend, HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {urls} from '../../constants/urls';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n    private http: HttpClient;\n    constructor(httpBackend: HttpBackend) {\n        this.http = new HttpClient(httpBackend);\n    }\n\n    getRefreshToken(clientId): Observable<any> {\n        const authValues: any = JSON.parse(localStorage.getItem('authValues'));\n        const httpOptions = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json', 'Authorization': 'Bearer ' +\n                    localStorage.getItem(authValues.jwtTokenKey)\n            }),\n            params: {\n                client_id: clientId\n            }\n        };\n        return this.http.post(urls.auth.refresh, null, httpOptions);\n    }\n\n    logout() {\n        const authValues: any = JSON.parse(localStorage.getItem('authValues'));\n        const httpOptions = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json', 'Authorization': 'Bearer ' +\n                    localStorage.getItem(authValues.jwtTokenKey)\n            })\n        };\n        return this.http.post(urls.auth.logout, null, httpOptions);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {urls} from '../constants/urls';\n\nexport interface UserSearchComplex {\n    authHistoryId: number;\n    creationDate: string;\n    employeeId: number;\n    firstName: string;\n    ip: string;\n    lastName: string;\n    location: string;\n    meta: string;\n    title: string;\n    type: string;\n    userId: number;\n    userName: string;\n    userType: string;\n}\n\nexport interface UserSearchNormal {\n    employeeNumber: number;\n    firstName: string;\n    isActive: number;\n    language: string;\n    lastName: string;\n    roles: Array<any>;\n    title: string;\n    userAccessGroups: Array<any>;\n    userId: number;\n    userName: string;\n}\n\n/**\n *  providedIn: 'root', }) export class UserService { } 'root' means that we want provide the service at the root level (AppModule)\n *  When you provide the service at the root level, Angular creates a single, shared instance of service and injects into any class\n *  that asks for it.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserService {\n    userSearchComplexUrl = '';\n    userSearchNormalUrl = '';\n\n    constructor(private http: HttpClient) {\n    }\n\n    getComplexSearchedUsers() {\n        return this.http.get(this.userSearchComplexUrl) as Observable<UserSearchComplex[]>;\n    }\n\n    getNormalSearchedUsers(options?: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.user.usersPath}`;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n\n    getUserById(userId, options: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.user.usersPath}${userId}`;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n\n    setFavoriteApp(paramObj, userId) {\n        const url = `${urls.user.users}` + userId;\n        return this.http.post(url, paramObj);\n    }\n\n    changeStatus(user, options = {}): Observable<HttpResponse<Object>> {\n        let url = `${urls.user.usersPath}${user.userId}/`;\n        url += user.isActive === 1 ? 'reActivate' : 'suspend';\n        return this.http.post<HttpResponse<Object>>(url, options);\n    }\n\n    getRoles(options: {}): Observable<HttpResponse<Object>> {\n        return this.http.get<HttpResponse<Object>>(urls.user.roles, options);\n    }\n\n    createUpdateUser(options = {userId: 0}): Observable<HttpResponse<Object>> {\n\n        if (options.userId) {\n            const url = `${urls.user.usersPath}${options.userId}`;\n            return this.http.put<HttpResponse<Object>>(url, options);\n        } else {\n            const url = `${urls.user.usersPath}`;\n            return this.http.post<HttpResponse<Object>>(url, options);\n        }\n\n    }\n\n    getAssignedRolesAppList(options: {}): Observable<HttpResponse<Object>> {\n        return this.http.get<HttpResponse<Object>>(urls.user.applications, options);\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {AuthInterface} from './auth.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DecodedTokenService {\n    authValues: AuthInterface;\n    constructor(private jwtHelper: JwtHelperService) {\n        this.authValues = JSON.parse(localStorage.getItem('authValues'));\n    }\n    getDecodedJwtToken() {\n        this.authValues = JSON.parse(localStorage.getItem('authValues'));\n        if (this.authValues) {\n            const token = localStorage.getItem(this.authValues.jwtTokenKey);\n            if (token) {\n                return this.jwtHelper.decodeToken(token);\n            }\n        }\n    }\n\n    setDecodedJwtToken(key, token) {\n        localStorage.setItem(key, token);\n    }\n\n    getJwtToken() {\n        this.authValues = JSON.parse(localStorage.getItem('authValues'));\n        if (this.authValues) {\n            return localStorage.getItem(this.authValues.jwtTokenKey);\n        }\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {urls} from '../constants/urls';\nimport {SystemProperty} from '../interface/configuration.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ConfigurationService {\n\n    constructor(private http: HttpClient) {\n    }\n\n    getLimits(options: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.config.configurations}?templateTypeCode=TABLE_LIMITS&type=TEMPLATE`;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n\n    getInActiveLimits(options: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.config.configurations}?templateTypeCode=TABLE_LIMITS&type=TEMPLATE&state=INACTIVE`;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n\n    getConfigurationProperties(options: {}, type): Observable<HttpResponse<Object>> {\n        const url = `${urls.config.properties}?topologyTypeId=${type}`;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n\n    getConfigurationPropertyValues(options: {}, topologyId): Observable<HttpResponse<Object>> {\n        const url = `${urls.config.configurations}?topologyId=${topologyId}`;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n\n    saveConfigurationproperties(options: {}): Observable<HttpResponse<Object>> {\n        const url = `${urls.config.configurations}`;\n        return this.http.post<HttpResponse<Object>>(url, options);\n    }\n\n    getSystemData(): Observable<SystemProperty[]> {\n        return this.http.get<SystemProperty[]>(urls.config.configurations, {\n            params: {\n                templateTypeCode: 'SYSTEM',\n                type: 'TEMPLATE'\n            }\n        });\n    }\n\n    getConfigurations(topologyId): Observable<HttpResponse<Object>> {\n        const urlConfig = urls.config.configurations + '?topologyId=' + topologyId;\n        return this.http.get<HttpResponse<Object>>(urlConfig);\n    }\n\n    isGlobalAnonymousHostEnabled(): Observable<HttpResponse<Object>> {\n        const url = `${urls.config.configurations}?propertyCodes=com.wdts.anonymous.session.alert.enabled&templateTypeCode=SYSTEM&type=TEMPLATE`;\n        return this.http.get<HttpResponse<Object>>(url);\n    }\n    checkGlobalCbpt(): Observable<HttpResponse<Object>> {\n        const url = `${urls.config.configurations}?propertyCodes=com.wdts.cbpt.enabled&templateTypeCode=SYSTEM&type=TEMPLATE`;\n        return this.http.get<HttpResponse<Object>>(url);\n    }\n    checkFctxnEnabled(): Observable<HttpResponse<Object>> {\n        const url = `${urls.config.configurations}?propertyCodes=com.wdts.fctxn.enabled&templateTypeCode=SYSTEM&type=TEMPLATE`;\n        return this.http.get<HttpResponse<Object>>(url);\n    }\n    getHostcallTemplate(): Observable<HttpResponse<Object>> {\n        const url = `${urls.config.configurations}/?templateTypeCode=PLAY_CRITERIA&type=TEMPLATE`;\n        return this.http.get<HttpResponse<Object>>(url);\n    }\n\n    getHostcallDataOnTopology(topologyId): Observable<HttpResponse<Object>> {\n        const url = `${urls.config.configurations}/?templateTypeCode=PLAY_CRITERIA&type=CURRENT&topologyId=${topologyId}`;\n        return this.http.get<HttpResponse<Object>>(url);\n    }\n\n    postHostcallDataOnTopology(data): Observable<HttpResponse<Object>> {\n        const url = `${urls.config.configurations}/?templateTypeCode=PLAY_CRITERIA&type=CURRENT`;\n        return this.http.post<HttpResponse<Object>>(url, data);\n    }\n\n    putHostcallData(data,id): Observable<HttpResponse<Object>> {\n        const url = `${urls.config.configurations}/${id}/?templateTypeCode=PLAY_CRITERIA&type=CURRENT`;\n        return this.http.put<HttpResponse<Object>>(url, data);\n    }\n\n    isPlayerAdustmentEnabled() {\n        const url = `${urls.config.configurations}/?propertyCodes=com.wdts.rating.adjustment.enabled&templateTypeCode=SYSTEM&type=TEMPLATE`;\n        return this.http.get<HttpResponse<Object>>(url);\n    }\n\n    getPlayerRankingList() {\n        const url = `${urls.config.configurations}/?propertyCodes=com.wdts.player.tier.types&templateTypeCode=SYSTEM&type=TEMPLATE`;\n        return this.http.get<HttpResponse<Object>>(url);\n    }\n\n    getPlayerAdjustment(topologyId, propertyId) {\n        const url = `${urls.config.configurations}/?topologyId=${topologyId}&propertyId=${propertyId}&templateTypeCode=PLAYER_ADJUSTMENT&type=CURRENT&state=ACTIVE`;\n        return this.http.get<HttpResponse<Object>>(url);\n    }\n\n    postPlayerAdjustment(topologyId, propertyId, objData) {\n        const url = `${urls.config.configurations}/?fromTopologyId=${topologyId}&propertyId=${propertyId}&templateTypeCode=PLAYER_ADJUSTMENT&type=CURRENT&state=ACTIVE`;\n        return this.http.post<HttpResponse<Object>>(url, objData);\n    }\n\n    updatePlayerAdjustment(topologyId, propertyId, objData) {\n        const url = `${urls.config.configurations}/?topologyId=${topologyId}&propertyId=${propertyId}&templateTypeCode=PLAYER_ADJUSTMENT&type=CURRENT&state=ACTIVE`;\n        return this.http.post<HttpResponse<Object>>(url, objData);\n    }\n\n    putPlayerAdjustment(configId, propertyId, objData) {\n        const url = `${urls.config.configurations}/${configId}/?body=true`;\n        return this.http.put<HttpResponse<Object>>(url, objData);\n    }\n}\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output} from '@angular/core';\nimport {AuthService} from '../services/Authentication/auth.service';\nimport {UserService} from '../services/user.service';\nimport {DecodedTokenService} from '../services/Authentication/decoded-token.service';\nimport {\n    protocol,\n    treasuryPort,\n    webAlertsTLSPort,\n    webCamTLSPort,\n    webCashierTLSPort,\n    webCasinoManagerTLSPort,\n    webConfigurationTLSPort,\n    webPlayerDashboardTLSPort,\n    webServerDNS,\n    webTableDashboardTLSPort\n} from '../constants/url.common.constants';\nimport {UtilityService} from '../services/utility.service';\nimport {ConfigurationService} from '../services/configuration.service';\n\n@Component({\n    selector: 'app-list',\n    templateUrl: './app-list.component.html',\n    styleUrls: ['./app-switcher.component.scss']\n})\nexport class AppListComponent implements OnInit {\n    @Input('currentAppCode') currentAppCode;\n    appSwitcher: any;\n    applicationCodesFromJwt: Array<string>;\n    loading = false;\n    callInProg = false;\n\n    constructor(private authService: AuthService,\n                private userService: UserService,\n                private utilities: UtilityService,\n                private configurationService: ConfigurationService,\n                private decodedTokenService: DecodedTokenService, public utilService: UtilityService) {\n    }\n\n    ngOnInit() {\n        this.checkGlobalCbpt().subscribe(res => {\n            this.utilService.isCBPT = 'true' === res[0].propertyValues[0].propertyValue.toLowerCase();\n            this.initMenuItems();\n            this.loading = true;\n            this.appSwitcher.menuRows = [...this.appSwitcher.appMenuItems];\n            this.applicationCodesFromJwt = this.decodedTokenService.getDecodedJwtToken().applications;\n            this.appSwitcher.favoriteApp = this.decodedTokenService.getDecodedJwtToken().defaultApplication;\n            /*if (localStorage.getItem('favoriteApp') !== null && localStorage.getItem('favoriteApp') !== undefined) {\n                this.appSwitcher.favoriteApp = localStorage.getItem('favoriteApp');\n            }*/\n            this.divideMenuItems();\n        }, error => {\n            this.loading = true;\n            console.error(error);\n        });\n    }\n\n    initMenuItems() {\n        this.appSwitcher = {\n            appMenuItems: [\n                {\n                    applicationCode: 'ALERTS',\n                    key: 'alrt',\n                    storeKey: 'jwt_alert',\n                    name: 'Alerts',\n                    permission: 'ACCESS_ALERTS_APP',\n                    iconClass: 'app-icon__alerts',\n                    translateLabel: 'application.app.common.labels.apps.ALERTS',\n                    openUrl: webAlertsTLSPort,\n                    isVisible: true\n                },\n                {\n                    applicationCode: 'CAM',\n                    key: 'cam',\n                    storeKey: 'jwt_cam',\n                    name: 'CAM',\n                    permission: 'ACCESS_CAM_APP',\n                    iconClass: 'app-icon__cam',\n                    translateLabel: 'application.app.common.labels.apps.CAM',\n                    openUrl: webCamTLSPort,\n                    isVisible: false\n                },\n                {\n                    applicationCode: 'CASHIER',\n                    key: 'cash',\n                    storeKey: 'jwt_cash',\n                    name: 'Cashier',\n                    permission: 'ACCESS_CASHIER_APP',\n                    iconClass: 'app-icon__cashier',\n                    translateLabel: 'application.app.common.labels.apps.CASHIER',\n                    openUrl: webCashierTLSPort,\n                    isVisible: false\n                },\n                {\n                    applicationCode: 'CONFIGURATION',\n                    key: 'conf',\n                    storeKey: 'jwt_config',\n                    name: 'Configuration',\n                    permission: 'ACCESS_CONFIG_APP',\n                    iconClass: 'app-icon__configuration',\n                    translateLabel: 'application.app.common.labels.apps.CONFIG',\n                    openUrl: webConfigurationTLSPort,\n                    isVisible: true\n                },\n                {\n                    applicationCode: 'CASINO_MGR',\n                    key: 'cmr',\n                    storeKey: 'jwt_cmr',\n                    name: 'Casino Manager',\n                    permission: 'ACCESS_CASINO_MGR_APP',\n                    iconClass: 'app-icon__casino-manager',\n                    translateLabel: 'application.app.common.labels.apps.CMGR',\n                    openUrl: webCasinoManagerTLSPort,\n                    isVisible: true\n                },\n                {\n                    applicationCode: 'TREASURY_MGR',\n                    key: 'trs',\n                    storeKey: 'jwt_trs',\n                    name: 'Treasury',\n                    permission: 'ACCESS_TREASURY_MGR_APP',\n                    iconClass: 'app-icon__treasury',\n                    translateLabel: 'application.app.common.labels.apps.TRSMGR',\n                    openUrl: treasuryPort,\n                    isVisible: true\n                },\n                {\n                    applicationCode: 'PLAYER_DASH',\n                    key: 'plr',\n                    storeKey: 'jwt_plr',\n                    name: 'Player Dashboard',\n                    permission: 'ACCESS_PLAYER_DASH',\n                    iconClass: 'app-icon__player-dashboard',\n                    translateLabel: 'application.app.common.labels.apps.PLRDB',\n                    openUrl: webPlayerDashboardTLSPort,\n                    isVisible: this.utilService.isCBPT\n                },\n                {\n                    applicationCode: 'TABLE_DASH',\n                    key: 'tbldash',\n                    storeKey: 'jwt_tbldash',\n                    name: 'Table Dashboard',\n                    permission: 'ACCESS_TABLE_DASH',\n                    iconClass: 'app-icon__table-dash',\n                    translateLabel: 'application.app.common.labels.apps.TBLDB',\n                    openUrl: webTableDashboardTLSPort,\n                    isVisible: false\n                },\n                {\n                    applicationCode: 'REPORTS',\n                    key: 'rpt',\n                    storeKey: 'jwt_rpt',\n                    name: 'BI Application',\n                    permission: 'ACCESS_REPORTS_APP',\n                    iconClass: 'app-icon__reports',\n                    translateLabel: 'application.app.common.labels.apps.BI',\n                    openUrl: 784,\n                    isVisible: true\n                }\n            ],\n            menuRows: []\n        };\n    }\n\n    divideMenuItems() {\n        this.appSwitcher.menuRows = [];\n        this.appSwitcher.appMenuItems.forEach(menuItem => {\n            if (menuItem.applicationCode !== this.currentAppCode && menuItem.isVisible) {\n                this.appSwitcher.menuRows.push(menuItem);\n            }\n        });\n    }\n\n    checkGlobalCbpt() {\n        return this.configurationService.checkGlobalCbpt();\n    }\n\n    setFavoriteApp(event, appCode) {\n        if (appCode === this.appSwitcher.favoriteApp) {\n            return;\n        } else {\n            this.callInProg = true;\n            event.preventDefault();\n            event.stopPropagation();\n            const decodedToken = this.decodedTokenService.getDecodedJwtToken();\n            const userId = decodedToken.userId;\n            const obj = {\n                userId: (userId || 1),\n                defaultApplication: {\n                    applicationCode: appCode\n                }\n            };\n\n            this.userService.setFavoriteApp(obj, userId)\n                .subscribe(response => {\n                    this.appSwitcher.favoriteApp = ( response['defaultApplication']['applicationCode'] || appCode );\n                    // localStorage.setItem('favoriteApp', ( response['defaultApplication']['applicationCode'] || appCode));\n                    this.callInProg = false;\n                });\n        }\n    }\n\n    openApp(clientID) {\n        this.authService.getRefreshToken(clientID).subscribe(tokenData => {\n            this.currentApp(clientID, tokenData);\n            this.utilService.closeDialog.next('close');\n        });\n    }\n\n    currentApp(clientID, tokenData) {\n        let accessToken = '';\n        const url = protocol + webServerDNS;\n        if (clientID && tokenData && tokenData.access_token) {\n            accessToken = '#/access_token=' + tokenData.access_token + '&token_type=' + tokenData.token_type + '&expires_in='\n                + tokenData.expires_in + '&scope=' + tokenData.scope;\n        }\n        const authValues = JSON.parse(localStorage.getItem('authValues'));\n        let target: string;\n        if (authValues) {\n            if (authValues.clientId === 'lgn') {\n                sessionStorage.clear();\n                localStorage.clear();\n                target = authValues.clientId = '_self';\n            } else {\n                target = authValues.clientId = '_blank';\n            }\n        }\n\n        switch (clientID) {\n            case 'alrt':\n                window.open(`${url}:${webAlertsTLSPort}/${accessToken}`, target);\n                break;\n            case 'conf':\n                window.open(`${url}:${webConfigurationTLSPort}/${accessToken}`, target);\n                break;\n            case 'cmr':\n                window.open(`${url}:${webCasinoManagerTLSPort}/${accessToken}`, target);\n                break;\n            case 'trs':\n                window.open(`${url}:${treasuryPort}/${accessToken}`, target);\n                break;\n            case 'plr':\n                window.open(`${url}:${webPlayerDashboardTLSPort}/${accessToken}`, target);\n                break;\n            case 'rpt':\n                window.open(`${url}/jasperserver-pro/login.html`, target);\n                break;\n        }\n\n    }\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {TranslateService} from '@ngx-translate/core';\nimport {UtilityService} from '../services/utility.service';\nimport {TopologyService} from '../services/topology.service'\n// import {ActivatedRoute, Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.scss']\n})\nexport class BreadcrumbComponent implements OnInit {\n  //breadCrumbs = [{value:{test1: 'test1'}},{value:{test: 'test'}}];\n  @Input() breadCrumbArray;\n  @Output() clickOnBreadCrumb = new EventEmitter();\n  homeUrl;\n  constructor(\n      private translate: TranslateService,\n      private utilityService: UtilityService,\n      private topologyService: TopologyService\n  ) {\n    this.translate.setDefaultLang('en_US');\n  }\n\n  ngOnInit() {\n    this.homeUrl = {\"labelName\":\"\",\"labelShortName\":\"\",\"params\":\"\",\"url\":\"/overview\"};\n\n    this.topologyService.areasLabelClicked.subscribe( (obj) =>{\n      this.clickEvnt(this.homeUrl,-1)\n    });\n  }\n  clickEvnt(itemObj, index) {\n    if (this.breadCrumbArray.length - 1 > index) {\n        this.utilityService.updateBreadCrumClick(itemObj);\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {urls} from '../constants/urls';\n\n@Injectable()\nexport class AlertService {\n    constructor(private _http: HttpClient) {\n    }\n\n    getAlertsData(url, options: {}): Observable<HttpResponse<Object>> {\n        return this._http.get<HttpResponse<Object>>(url, options);\n    }\n\n    getEventData(): void {\n\n    }\n\n    getAlertCounts(topologyId): Observable<[]> {\n        const url = `${urls.alert.alertCountsPath}?topologyId=${topologyId}`;\n        return this._http.get<[]>(url);\n    }\n    getAlertCountsByCategory(alertStatus, topologyId, category): Observable<[]> {\n        const url = `${urls.alert.alertCountsByCategoryPath}?alertStatus=${alertStatus}&topologyIds=${topologyId}&category=${category}`;\n        return this._http.get<[]>(url);\n    }\n\n    getAlertCountsByCategoryVG(alertStatus, topologyId, category): Observable<[]> {\n        const url = `${urls.alert.alertCountsByCategoryPath}?alertStatus=${alertStatus}&topologyGroupId=${topologyId}&category=${category}`;\n        return this._http.get<[]>(url);\n    }\n\n    changeStatus(statusUrl, statusObj): Observable<HttpResponse<Object>> {\n        return this._http.post<HttpResponse<Object>>(statusUrl, statusObj);\n    }\n\n    changeSeverity(): void {\n\n    }\n\n    addNote(noteUrl, noteObj): Observable<HttpResponse<Object>> {\n        return this._http.post<HttpResponse<Object>>(noteUrl, noteObj);\n    }\n\n    saveCustomerKnowledgeBase(baseUrl, baseObj): Observable<HttpResponse<Object>> {\n        return this._http.post<HttpResponse<Object>>(baseUrl, baseObj);\n    }\n\n    saveTableCustomerKnowledgeBase(baseUrl, baseObj): Observable<HttpResponse<Object>> {\n        return this._http.put<HttpResponse<Object>>(baseUrl, baseObj);\n    }\n\n    getAlertConfiguration(options = {}) {\n        return this._http.get(urls.alert.alertConfigurationPath, options);\n    }\n\n    updateAlertConfiguration(data = {}, params = {}) {\n        return this._http.post(urls.alert.alertConfigurationPath, data, params);\n    }\n\n    getTableAlertsCount(options: {}) {\n        return this._http.get(urls.alert.tableAlerts, options);\n    }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SortingService {\n    sortObj: object;\n\n    constructor() {\n    }\n\n    getSortObject(sort): object {\n        this.sortObj = {sortOrder: sort.direction.toUpperCase(), sortField: sort.active};\n        return this.sortObj;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {HttpBackend, HttpClient, HttpHeaders, HttpResponse} from '@angular/common/http';\nimport {urls} from '../constants/urls';\nimport {\n    ChipsInventoryInterface,\n    LocalGamingDayInterface,\n    LocalGamingDaysInHeirarchyInterface,\n    RollTimeInterface,\n    RollTimePayloadInterface,\n    ChipTrayOpenerCloser,\n    OpenerCloserReportData,\n    FcTxnsInterface\n} from '../interface/cage.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CageService {\n    constructor(private http: HttpClient) {\n\n    }\n\n    getInventoryData(id, options: {}): Observable<ChipsInventoryInterface[]> {\n        return this.http.get<ChipsInventoryInterface[]>\n        (urls.cage.chipsInventory + id, options);\n    }\n\n    getCurrentGamingDay(topologyId): Observable<HttpResponse<Object>> {\n        const url = `${urls.cage.localGamingDay}?topologyId=${topologyId}`;\n        return this.http.get<HttpResponse<Object>>(url);\n    }\n\n    getLocalGamingDay(id): Observable<LocalGamingDayInterface> {\n        return this.http.get<LocalGamingDayInterface>(urls.cage.localGamingDay,\n            {\n                params: {\n                    topologyId: id\n                }\n            });\n    }\n\n    getRollTimeData(options: {}): Observable<RollTimeInterface[]> {\n        const url = urls.cage.nextRollDtm;\n        return this.http.get<RollTimeInterface[]>(url, options);\n    }\n\n    getRollDTM(topologyId): Observable<any> {\n        const url = `${urls.cage.nextRollDtm}?topologyId=${topologyId}`;\n        return this.http.get<any>(url);\n    }\n\n    localGamingDaysInHierarchy(topologyId): Observable<LocalGamingDaysInHeirarchyInterface> {\n        const url = `${urls.cage.gamingDays}?topologyId=${topologyId}`;\n        return this.http.get<LocalGamingDaysInHeirarchyInterface>(url);\n    }\n\n    postRollTimeData(payLoad: {}, userId = '', employeeId = ''): Observable<HttpResponse<RollTimePayloadInterface>> {\n        let url = urls.cage.nextRollDtm;\n        if (userId && employeeId) {\n            url += `?userId=${userId}&employeeId=${employeeId}`;\n        }\n        return this.http.post<HttpResponse<RollTimePayloadInterface>>(url, payLoad);\n    }\n\n    getChipTrayOpenerCloser(options: {}): Observable<ChipTrayOpenerCloser> {\n        const url = urls.cage.chipTrayOpenerCloser;\n        return this.http.get<ChipTrayOpenerCloser>(url, options);\n    }\n\n    getOpenerCloserReportData(options: {}): Observable<OpenerCloserReportData> {\n        const url = urls.cage.openerCloserReport;\n        return this.http.get<OpenerCloserReportData>(url, options);\n    }\n\n    getReportUrl(data) {\n        const url = `${urls.cage.printReport}?print=true&format=PDF&reportName=OpenerCloserForm&reportData=${data}`;\n        return url;\n    }\n\n    getReportData(data): Observable<HttpResponse<any>> {\n        const url = urls.cage.printReport;\n        const payLoad = {print: true, format: 'PDF', reportName: 'OpenerCloserForm', reportData: JSON.stringify(data)};\n        const httpOptions = {\n            'responseType': 'arraybuffer' as 'json'\n        }\n        return this.http.post<HttpResponse<any>>(url, payLoad, httpOptions);\n    }\n\n    getfcTransactions(options: {}): Observable<FcTxnsInterface> {\n        console.log('common options', options)\n        const url = urls.cage.getfcTransactions;\n        return this.http.get<FcTxnsInterface>(url, options);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Idle} from 'idlejs/dist';\nimport {protocol, webDashboardPort, webServerDNS} from '../constants/url.common.constants';\nimport {AuthService} from './Authentication/auth.service';\nimport {DecodedTokenService} from './Authentication/decoded-token.service';\nimport {ConfigurationService} from './configuration.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LogoutUtilityService {\n    logOutClicked: boolean;\n\n    constructor(\n        private authService: AuthService,\n        private decodedTokenService: DecodedTokenService,\n        private configurationService: ConfigurationService\n    ) {\n    }\n\n    logOutInactiveUser(): void {\n        let logoOutTime: number;\n        if (!this.logOutClicked) {\n            this.configurationService.getSystemData().subscribe(data => {\n                logoOutTime = parseInt(data[0].propertyValues.filter(val => val.propertyId === 1001)[0].propertyValue, 10);\n                new Idle().whenNotInteractive().within(logoOutTime, 1000).do(() => {\n                    this.logout();\n                }).start();\n            });\n        }\n\n    }\n\n    logout(): void {\n        this.logOutClicked = true;\n        const authValues: any = JSON.parse(localStorage.getItem('authValues'));\n        if (authValues) {\n            this.authService.logout()\n                .subscribe(() => {\n                    this.removeAndRedirect();\n                }, () => {\n                    this.removeAndRedirect();\n                });\n        } else {\n            this.removeAndRedirect();\n        }\n    }\n\n    removeAndRedirect(): void {\n        const loginUrl = protocol + webServerDNS + ':' + webDashboardPort;\n        const ppMasterUrl = loginUrl + '/ppmaster';\n        const isPP = localStorage.getItem('pp');\n        const authValues = JSON.parse(localStorage.getItem('authValues'));\n        if (authValues) {\n            localStorage.removeItem(authValues.jwtTokenKey);\n        }\n        sessionStorage.removeItem('language');\n        localStorage.removeItem('authValues');\n        //We need to check both GR-2777 and GR-2903\n        localStorage.removeItem('lastRefresh');\n\n        if (isPP === 'yes') {\n            this.redirectAfterLogout(ppMasterUrl);\n        } else {\n            this.redirectAfterLogout(loginUrl);\n        }\n    }\n    redirectAfterLogout (url) {\n        location.href = url;\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {AuthService} from './auth.service';\nimport {AuthInterface} from './auth.interface';\nimport {\n    protocol,\n    webCamTLSPort,\n    webCashierTLSPort,\n    webServerDNS,\n    webDashboardPort,\n    webTableDashboardTLSPort\n} from '../../constants/url.common.constants';\nimport {CageService} from '../cage.service';\nimport {DecodedTokenService} from './decoded-token.service';\nimport {LogoutUtilityService} from '../logout-utility.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TokenHandlingService {\n    authValues: AuthInterface;\n\n    constructor(private jwtHelper: JwtHelperService,\n                private authService: AuthService,\n                private cageService: CageService,\n                private decodedTokenService: DecodedTokenService,\n                private logoutUtilityService: LogoutUtilityService) {\n        this.authValues = JSON.parse(localStorage.getItem('authValues'));\n    }\n\n    redirectURI(jwtToken): void {\n        let CLIENT_ID = 'lgn';\n        if (this.authValues && this.authValues.clientId) {\n            CLIENT_ID = this.authValues.clientId;\n        }\n        let decodedToken;\n        if (jwtToken) {\n            decodedToken = this.jwtHelper.decodeToken(jwtToken);\n        }\n        if (decodedToken && decodedToken.defaultApplication !== null\n            && decodedToken.defaultApplication !== undefined && decodedToken.defaultApplication !== '') {\n            CLIENT_ID = 'lgn';\n        }\n\n        location.href = `${protocol}${webServerDNS}` + ':' + webDashboardPort + '/login' +\n            '?client_id=' + CLIENT_ID + '&redirect_uri=' + location.href;\n    }\n\n    isTokenValid(jwtToken): boolean {\n        if (jwtToken) {\n            return this.hasPermission(jwtToken) && !this.jwtHelper.isTokenExpired(jwtToken);\n        } else {\n            return false;\n        }\n\n    }\n\n    hasPermission(jwtToken): boolean {\n        const decodedToken = this.jwtHelper.decodeToken(jwtToken);\n        if (decodedToken) {\n            if (decodedToken.authorities && ((this.authValues.applicationCode === decodedToken.authorities[0].applicationCode &&\n                    decodedToken.authorities[0].permissions.includes(this.authValues.accessCode)) || decodedToken.superuser)) {\n                return true;\n            } else {\n                return !!(this.authValues.clientId === 'lgn' && decodedToken.applications);\n            }\n        } else {\n            return false;\n        }\n    }\n\n    terminalRedirection(app: string): void {\n        const baseUrl = protocol + webServerDNS;\n        let appPort = '';\n        let clientId = '';\n        switch (app) {\n            case 'CAM':\n                appPort = webCamTLSPort;\n                clientId = 'cam';\n                break;\n            case 'CASHIER':\n                appPort = webCashierTLSPort;\n                clientId = 'cash';\n                break;\n            case 'TABLE_DASH':\n                appPort = webTableDashboardTLSPort;\n                clientId = 'tab';\n                break;\n        }\n        if (app !== 'TABLE_DASH') {\n            this.openApp(clientId, baseUrl, appPort);\n        }\n\n    }\n\n    openApp(clientID, baseUrl, appPort) {\n        this.authService.getRefreshToken(clientID).subscribe(tokenData => {\n            const accessToken = 'access_token=' + tokenData.access_token + '&token_type=' + tokenData.token_type + '&expires_in=' +\n                tokenData.expires_in + '&scope=' + tokenData.scope;\n            if (clientID === 'tab') {\n                const tableToken = this.jwtHelper.decodeToken(tokenData.access_token);\n                const tableId = tableToken.authorities[0].topologyIds[0];\n                this.cageService.getLocalGamingDay(tableId).subscribe(res => {\n                    if (this.authValues.clientId === 'lgn') {\n                        sessionStorage.clear();\n                        localStorage.clear();\n                    }\n                    window.open(`${baseUrl}:${appPort}/#/tabledashboard/${tableId}/${res.successObj}?${accessToken}`, '_self');\n                });\n            } else {\n                if (this.authValues.clientId === 'lgn') {\n                    sessionStorage.clear();\n                    localStorage.clear();\n                }\n                window.open(`${baseUrl}:${appPort}/#/${accessToken}`, '_self');\n            }\n        });\n    }\n\n    HandleTokenExpiration() {\n        setInterval(() => {\n            const token = this.decodedTokenService.getJwtToken();\n            const tokenExpirationTime = this.jwtHelper.getTokenExpirationDate(token).getTime();\n            const currentTime = new Date().getTime();\n            if (currentTime > tokenExpirationTime - 200000) {\n                this.authValues = JSON.parse(localStorage.getItem('authValues'));\n                this.authService.getRefreshToken(this.authValues.clientId).subscribe(tokenData => {\n                        const accessToken = tokenData.access_token;\n                        this.decodedTokenService.setDecodedJwtToken(JSON.parse(localStorage.getItem('authValues'))\n                            .jwtTokenKey, accessToken);\n                    },\n                    (err) => {\n                        this.logoutUtilityService.logout();\n                        throw err;\n                    }\n                );\n            }\n\n        }, 60000);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {UserDetailInterface} from '../interface/user-detail.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TopNavBarService {\n  private userDetails: UserDetailInterface;\n  public userDetailsSubject = new BehaviorSubject<UserDetailInterface>(this.userDetails);\n  public userDetailsObservable =  this.userDetailsSubject.asObservable();\n  constructor() { }\n  updateUserDetails(userDetails: UserDetailInterface) {\n    this.userDetailsSubject.next(userDetails);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {tableUIProtocol} from '../constants/url.common.constants';\nimport {tableUIPort} from '../constants/url.common.constants';\n\nconst URL = tableUIProtocol + 'tableui:' + tableUIPort;\nconst API_SUB_PATH = '/api/table/v1/';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableUIService {\n\n  constructor(private http: HttpClient) { }\n  isLoggedIn(clientId) {\n    const url = `${URL}${API_SUB_PATH}login?clientId=${clientId}`;\n    return this.http.get<any>(url);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {TokenHandlingService} from './token-handling.service';\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {DecodedTokenService} from './decoded-token.service';\nimport {AuthInterface} from './auth.interface';\nimport {LogoutUtilityService} from '../logout-utility.service';\nimport {TopNavBarService} from '../top-nav-bar.service';\nimport {TableUIService} from '../table-ui.service';\nimport {tableUIProtocol} from '../../constants/url.common.constants';\nimport {tableUIPort} from '../../constants/url.common.constants';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n    jwtToken: string;\n    isTokenValid;\n    authValues: AuthInterface;\n    firstLoad: Boolean;\n\n    constructor(private tokenHandlingService: TokenHandlingService,\n                private jwtHelper: JwtHelperService,\n                private decodedTokenService: DecodedTokenService,\n                private logoutUtilityService: LogoutUtilityService,\n                private topNavBarService: TopNavBarService,\n                private router: Router,\n                private tableUIService: TableUIService) {\n        this.jwtToken = location.href.split('access_token=')[1];\n        this.authValues = JSON.parse(localStorage.getItem('authValues'));\n        if (this.jwtToken) {\n            this.jwtToken = this.jwtToken.split('&')[0];\n            this.decodedTokenService.setDecodedJwtToken(this.authValues.jwtTokenKey, this.jwtToken);\n            const decodedToken = this.decodedTokenService.getDecodedJwtToken();\n            const uerDetails = {\n                'firstName': decodedToken.firstName,\n                'lastName': decodedToken.lastName,\n                'userId': decodedToken.userId\n            };\n            topNavBarService.updateUserDetails(uerDetails);\n        }\n        if (this.jwtToken || this.decodedTokenService.getDecodedJwtToken()) {\n            this.firstLoad = true;\n            if (this.decodedTokenService.getDecodedJwtToken().firstName === 'PP') {\n                localStorage.setItem('pp', 'yes');\n                // console.log(\"auth gaurd pp\");\n            } else {\n                localStorage.setItem('pp', 'no');\n                // console.log(\"auth gaurd non pp\");\n            }\n            logoutUtilityService.logOutInactiveUser();\n        }\n\n    }\n\n    canActivate(next: ActivatedRouteSnapshot,\n                state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n        this.isTokenValid = this.tokenHandlingService.isTokenValid(this.jwtToken);\n        const decodedToken = this.decodedTokenService.getDecodedJwtToken();\n        if (decodedToken && (!decodedToken.authorities || decodedToken.authorities && decodedToken.applications.length === 1 &&\n                ['CAM', 'CASHIER'].indexOf(decodedToken.applications[0]) >= 0) && ((decodedToken.applications.length === 1 &&\n                ['CAM', 'CASHIER', 'TABLE_DASH'].indexOf(decodedToken.applications[0]) >= 0) ||\n                (decodedToken.applications.length === 3 && ['TABLE_DASH', 'ALERTS', 'PLAYER_DASH']\n                    .every((val, i) => val === decodedToken.applications[i])))) {\n            if (decodedToken.applications[0] === 'TABLE_DASH' && !state.url.includes('unauthorized-access')) {\n                // console.log('tableUIProtocol', tableUIProtocol);\n                if (tableUIProtocol !== undefined && tableUIProtocol !== null) {\n                    window.open(`${tableUIProtocol}tableui:${tableUIPort}/single-table-view`, '_self');\n                } else {\n                    if (location.href.includes('ppmaster') || location.href.includes('login')) {\n                        const token = localStorage.getItem(this.authValues.jwtTokenKey);\n                        if (token !== null) {\n                            this.tokenHandlingService.HandleTokenExpiration();\n                        }\n                        return true;\n                    }\n                }\n            } else if (decodedToken.applications[0] !== 'TABLE_DASH' && !state.url.includes('unauthorized-access')) {\n                this.tokenHandlingService.terminalRedirection(decodedToken.applications[0]);\n                return false;\n            }\n        } else if (state.url.includes('unauthorized-access')) {\n            return true;\n        } else if ((this.jwtToken && this.isTokenValid) ||\n            (this.decodedTokenService.getJwtToken() && this.tokenHandlingService.isTokenValid(this.decodedTokenService.getJwtToken())) ||\n            location.href.includes('ppmaster') || location.href.includes('login')) {\n            if (this.firstLoad) {\n            }\n            this.firstLoad = false;\n            let token;\n            if (this.authValues && this.authValues.jwtTokenKey) {\n                token = localStorage.getItem(this.authValues.jwtTokenKey);\n            }\n            if (token !== null && token !== undefined) {\n                this.tokenHandlingService.HandleTokenExpiration();\n            }\n            return true;\n        } else {\n            let token;\n            if (this.authValues && this.authValues.jwtTokenKey) {\n                token = localStorage.getItem(this.authValues.jwtTokenKey);\n            }\n            this.tokenHandlingService.redirectURI(token);\n            sessionStorage.clear();\n            localStorage.clear();\n            return false;\n        }\n\n    }\n}\n\n","import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {DecodedTokenService} from './decoded-token.service';\nimport {AuthService} from './auth.service';\nimport {LogoutUtilityService} from '../logout-utility.service';\nimport {catchError} from 'rxjs/operators';\nimport {NGXLogger} from 'ngx-logger';\n\n\n/**\n * This service performs the following tasks:\n * 1> Add jwt Token to every call\n * 2> refreshes token if it's about to expire\n */\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class JwtInterceptorService implements HttpInterceptor {\n\n    jwtTokenFromUrl: string;\n\n    constructor(private jwtHelper: JwtHelperService, private decodedTokenService: DecodedTokenService,\n                private authService: AuthService,\n                private logoutUtilityService: LogoutUtilityService,\n                private logger: NGXLogger) {\n        if (location.href.includes('access_token')) {\n            this.jwtTokenFromUrl = location.href.split('access_token=')[1];\n        }\n    }\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        let jwtToken: string;\n        if (location.href.includes('access_token')) {\n            this.jwtTokenFromUrl = location.href.split('access_token=')[1];\n        } else {\n            this.jwtTokenFromUrl = '';\n        }\n        if (this.jwtTokenFromUrl && this.jwtTokenFromUrl !== '') {\n            jwtToken = this.jwtTokenFromUrl.split('&')[0];\n            if (localStorage.getItem('authValues')) {\n                this.decodedTokenService.setDecodedJwtToken(JSON.parse(localStorage.getItem('authValues')).jwtTokenKey, jwtToken);\n            }\n        } else if (this.decodedTokenService.getJwtToken()) {\n            jwtToken = this.decodedTokenService.getJwtToken();\n        }\n        return this.interceptHeader(req, next, jwtToken).pipe(catchError(err => {\n            if (!req.url.includes('table/v1/log?appname')) {\n                this.logger.error(err, req.url);\n            }\n            return throwError(err);\n        }));\n    }\n\n    interceptHeader(req, next, jwtToken) {\n        req = req.clone({\n            setHeaders: {\n                Authorization: `Bearer ${jwtToken}`\n            }\n        });\n        return next.handle(req);\n    }\n}\n","import {Directive, ElementRef, EventEmitter, HostListener, Output, Input} from '@angular/core';\n\n@Directive({\n  selector: '[appWdtsSpecialChar]'\n})\nexport class WdtsSpecialCharDirective {\n// SPECIAL CHAR allowed alphanumeric characters with hyphen, underscore, space, ampersand and dot (- , _ , . , &)\n    @Output() valChangeEvent = new EventEmitter();\n    @Input() onlyAlphaNumaric = false;\n    @Input() isLimitTabSpecialChar = false;\n    constructor(private _el: ElementRef) {\n    }\n    @HostListener('input', ['$event'])\n    onInputChange(event) {\n        let SPLCHARSREJX;\n        if (this.onlyAlphaNumaric) {\n            SPLCHARSREJX = new RegExp('[^A-Za-z0-9]', 'gi');\n        } else if (this.isLimitTabSpecialChar) {\n            // Stroy GR-3445: removing '&' character.\n            SPLCHARSREJX = new RegExp('[^A-Za-z0-9-_.,$ ]', 'gi');\n        } else {\n            // Stroy GR-3092: removing '&' character.\n            SPLCHARSREJX = new RegExp('[^A-Za-z0-9-_. ]', 'gi');\n        }\n        this._el.nativeElement.value = this._el.nativeElement.value.replace(SPLCHARSREJX, '');\n        this.valChangeEvent.emit(this._el.nativeElement.value);\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'wdtsSpecialChar'\n})\nexport class WdtsSpecialCharPipe implements PipeTransform {\n// SPECIAL CHAR allowed alphanumeric characters with hyphen, underscore, space, ampersand and dot (- , _ , . , &)\n  transform(value: string, args?: any): any {\n      const SPLCHARSREJX = new RegExp('[^A-Za-z0-9-_. ]', 'gi');\n      return value.replace(SPLCHARSREJX, '');\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/*\n  Pipe that converts value to either whole number or to 2 decimal places\n*/\n\n\n@Pipe({\n  name: 'amountFormat'\n})\nexport class AmountFormatPipe implements PipeTransform {\n  transform(value): string {\n    if (!value){\n      return value;\n    }\n    value = Number(value);\n    if (Math.round(value) === value) {\n      value = Math.round(value);\n    } else if (value) {\n      value = value.toFixed(2).replace(/\\.0+$/,'');\n    }\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'roundUp'\n})\nexport class RoundUpPipe implements PipeTransform {\n\n    transform(value: any, args?: any): any {\n        if (!value) {\n            return value;\n        }\n        value = Math.ceil(value);\n        return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {TranslateLoader, TranslateModule} from '@ngx-translate/core';\nimport {HttpClient} from '@angular/common/http';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\nimport {WdtsSpecialCharDirective} from '../directives/wdts-special-char.directive';\nimport {WdtsSpecialCharPipe} from '../pipes/wdts-special-char.pipe';\nimport {AmountFormatPipe} from '../pipes/amount-format.pipe';\nimport {RoundUpPipe} from \"../pipes/round-up.pipe\";\n\n@NgModule({\n    imports: [\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: TranslationFactory,\n                deps: [HttpClient]\n            }\n        })\n    ],\n    providers: [WdtsSpecialCharPipe, AmountFormatPipe, RoundUpPipe],\n    declarations: [WdtsSpecialCharDirective, WdtsSpecialCharPipe, AmountFormatPipe, RoundUpPipe],\n    exports: [TranslateModule, WdtsSpecialCharDirective, WdtsSpecialCharPipe, AmountFormatPipe, RoundUpPipe]\n})\nexport class CommonTranslationModule {\n}\n\nexport function TranslationFactory(http: HttpClient) {\n    return new TranslateHttpLoader(http);\n}\n","import {EventEmitter, Injectable} from '@angular/core';\nimport {TranslateService} from '@ngx-translate/core';\nimport {DecodedTokenService} from '../services/Authentication/decoded-token.service';\n\n@Injectable()\nexport class CommonTranslationService {\n    languageChanged = new EventEmitter();\n\n    constructor(private translate: TranslateService, private tokenService: DecodedTokenService) {\n        let language;\n        const tokenData = this.tokenService.getDecodedJwtToken();\n        let configIndex;\n        if (tokenData && tokenData.authorities) {\n            if (tokenData.authorities != null) {\n                configIndex = tokenData.authorities.findIndex(app => app.applicationCode === 'CONFIGURATION');\n            }else{\n                configIndex = -1;\n            }\n            if (configIndex > -1) {\n                language = 'en_US';\n                sessionStorage.setItem('language', language);\n            } else {\n                language = sessionStorage.getItem('language');\n            }\n        }\n        if (language !== null) {\n            this.translate.setDefaultLang(language);\n        } else {\n            setTimeout( () => {\n                if (tokenData && configIndex > -1) {\n                    sessionStorage.setItem('language', 'en_US');\n                    this.translate.setDefaultLang('en_US');\n                } else {\n                    const newLang = this.tokenService && this.tokenService.getDecodedJwtToken() ?\n                        this.tokenService.getDecodedJwtToken().language : '';\n                    const lang = newLang === 'CHINESE' ? 'zh_Hant' : 'en_US';\n                    sessionStorage.setItem('language', lang);\n                    this.translate.setDefaultLang(lang);\n               }\n            }, 100);\n        }\n\n        this.handleSubscription();\n    }\n\n    handleSubscription() {\n            this.languageChanged\n            .subscribe((language) => {\n                sessionStorage.setItem('language', language);\n                this.translate.setDefaultLang(language);\n            });\n    }\n}\n","import {Component, Input, OnChanges, OnInit} from '@angular/core';\nimport {NavigationEnd, Router, ActivatedRoute} from '@angular/router';\nimport {TranslateService} from '@ngx-translate/core';\nimport {RxStompService} from '@stomp/ng2-stompjs';\nimport {CommonTranslationService} from '../../common-translation/common-translation.service';\nimport {UtilityService} from '../../services/utility.service';\nimport {AuthService} from '../../services/Authentication/auth.service';\nimport {DecodedTokenService} from '../../services/Authentication/decoded-token.service';\nimport {LogoutUtilityService} from '../../services/logout-utility.service';\nimport {TopNavBarService} from '../../services/top-nav-bar.service';\nimport {TopologyService} from '../../services/topology.service';\nimport {TokenHandlingService} from '../../services/Authentication/token-handling.service';\n\n@Component({\n    selector: 'app-top-nav-bar',\n    templateUrl: './top-nav-bar.component.html',\n    styleUrls: ['./top-nav-bar.component.scss']\n})\nexport class TopNavBarComponent implements OnInit, OnChanges {\n    lastRefresh: string;\n    userFirstName: string;\n    userLastName: string;\n    topologyData;\n    companyName;\n    //gamingDaysArr: Array<string>;\n    calendarDate;\n    //selectedCalendarDate;\n    hideLanguage: Boolean;\n    isConfigApp: Boolean;\n    showMenu: Boolean;\n    hideAppSwitcher: boolean;\n    loginPagesFlag: boolean;\n    @Input() appName: string;\n    @Input() showGamingDay: boolean;\n    @Input() gamingDay: string;\n    @Input() nextRollTIme;\n    @Input() gamingDaysArr;\n    @Input() breadcrumbList;\n    @Input() selectedGamingDay;\n\n    constructor(private _router: Router,\n                private _route: ActivatedRoute,\n                public translate: TranslateService,\n                private rxStompService: RxStompService,\n                private commonTranslationService: CommonTranslationService,\n                private utilityService: UtilityService,\n                private authService: AuthService,\n                private decodedTokenService: DecodedTokenService,\n                private logoutService: LogoutUtilityService,\n                private topNavBarService: TopNavBarService,\n                private topologyService: TopologyService,\n                private tokenHandlingService: TokenHandlingService) {\n        this.getCurrentCalendarDate();\n    }\n\n    ngOnInit() {\n        this._router.events.subscribe((e) => {\n            if (e instanceof NavigationEnd) {\n                if (this._router.url.includes('unauthorized-access')) {\n                    this.hideAppSwitcher = true;\n                }\n                if(this._router.url.includes('/ppmaster') || this._router.url.includes('/login')){\n                    this.loginPagesFlag = true;\n                }else{\n                    this.loginPagesFlag = false;\n                }\n            }\n        });\n\n        this.getLastRefresh();\n        this.getUserName();\n        this.rxStompService.watch('/logout/logout-request')\n            .subscribe((message) => {\n                const decodedToken = this.decodedTokenService.getDecodedJwtToken();\n                const messageData = message.body.substring(1);\n                if (decodedToken && messageData.split(';')[0] === decodedToken.name) {\n                    this.logoutService.removeAndRedirect();\n                } else if (!decodedToken) {\n                    this.logoutService.removeAndRedirect();\n                }\n            });\n\n        this.hideLanguageMenu();\n        this.checkIfConfigApp();\n        this.getTopologyData();\n    }\n\n    ngOnChanges(changes): void {\n        if (changes.selectedGamingDay && changes.selectedGamingDay.currentValue !== undefined) {\n            this.calendarDate = changes.selectedGamingDay.currentValue;\n        }\n    }\n\n    getCurrentCalendarDate() {\n        if (!this.calendarDate) {\n            this.calendarDate = this.gamingDay;\n        }\n    }\n\n    setCalendarGamingDay(index, gday) {\n        this.calendarDate = gday;\n        this.utilityService.updateGlobalCalendarGamingDay(gday);\n        // this.selectedCalendarDate = index;\n        // this.refresh();\n    }\n\n    getLastRefresh(): void {\n        this.lastRefresh = localStorage.getItem('lastRefresh');\n    }\n\n    hideLanguageMenu() {\n        const authValues = JSON.parse(localStorage.getItem('authValues'));\n        if (authValues.clientId === 'lgn') {\n            this.hideLanguage = true;\n        }\n    }\n\n    checkIfConfigApp() {\n        const authValues = JSON.parse(localStorage.getItem('authValues'));\n        if (authValues.clientId === 'conf') {\n            this.isConfigApp = true;\n        }\n    }\n\n    getUserName(): void {\n        const decodedToken = this.decodedTokenService.getDecodedJwtToken();\n        if (!decodedToken) {\n            this.topNavBarService.userDetailsObservable.subscribe(userDetails => {\n                if (userDetails) {\n                    this.showMenu = true;\n                    this.userFirstName = userDetails.firstName;\n                    this.userLastName = userDetails.lastName;\n                } else {\n                    this.showMenu = false;\n                }\n            });\n        } else {\n            if (this.tokenHandlingService.isTokenValid(this.decodedTokenService.getJwtToken())) {\n                this.showMenu = true;\n                this.userFirstName = decodedToken.firstName;\n                this.userLastName = decodedToken.lastName;\n            } else {\n                this.showMenu = false;\n            }\n\n        }\n    }\n\n    logout(): void {\n        sessionStorage.clear();\n        /**\n         * localStorage.clear();//GR-2903 comes due to GR-2777: it stop redirection because\n         removeAndRedirect function does not have value of localstorage, so instead\n         we can clear 'lastRefresh' in the removeAndRedirect in LogoutUtilityService.\n         */\n        this.logoutService.logout();\n    }\n\n    toggleTranslation(): void {\n        const currentLanguage = this.translate.getDefaultLang() === 'en_US' ? 'zh_Hant' : 'en_US';\n        sessionStorage.setItem('language', currentLanguage);\n        this.commonTranslationService.languageChanged.next(currentLanguage);\n        this.translate.setDefaultLang(currentLanguage);\n    }\n\n    refresh(): void {\n        this._router.routeReuseStrategy.shouldReuseRoute = function () {\n            return false;\n        };\n        const currentUrl = this._router.url + '?';\n        this._router.navigateByUrl(currentUrl)\n            .then(() => {\n                const currentTime = new Date();\n                localStorage.setItem('lastRefresh', currentTime.toString());\n                this.getLastRefresh();\n                this._router.navigated = false;\n                if(this._router.url.includes('access_token')){\n                    if(this._router.url.includes('/configuration/areas')){\n                        this._router.navigate(['/configuration/areas']);\n                    }\n                    if(this._router.url.includes('/overview')){\n                        this._router.navigate(['/overview']);\n                    }\n                }else {\n                    this._router.navigate([this._router.url]);\n                }\n            });\n    }\n\n    getTopologyData() {\n        if (!this.topologyService.topologyNodes) {\n            this.topologyService.initialized.subscribe((value) => {\n                if (value === 'nodesInitialized') {\n                    this.initTopologyData();\n                }\n            });\n        } else {\n            this.initTopologyData();\n        }\n    }\n\n    initTopologyData() {\n        this.topologyData = this.topologyService.topologyNodes;\n        this.companyName = this.topologyData[0][0].shortName;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {TopologyStatisticsTabularView, TopologyStatistics, TopologyStatisticsGridView} from '../interface/topology-types.interface';\nimport {urls} from '../constants/urls';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {OpenerCloserInterface} from '../interface/casino-manager.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CasinomanagerService {\n\n  constructor( private http: HttpClient) { }\n    getTopologyStatisticsTabularView(options: {}): Observable<TopologyStatisticsTabularView> {\n        const url = urls.casinoMgr.topologyStatisticsTabularView;\n        return this.http.get<TopologyStatisticsTabularView>(url, options);\n    }\n    getTopologyStatsTabularView(options: {}): Observable<TopologyStatisticsTabularView> {\n        const url = urls.casinoMgr.topologyStatsTabularView;\n        return this.http.get<TopologyStatisticsTabularView>(url, options);\n    }\n    getTopologyStatisticsGridView(options: {}): Observable<TopologyStatisticsGridView> {\n      const url = urls.casinoMgr.topologyStatisticsGridView;\n      return this.http.get<TopologyStatisticsGridView>(url, options);\n    }\n    getTopologyStatsByTableType(options: {}, url): Observable<TopologyStatisticsTabularView> {\n        const finalUrl = urls.casinoMgr.topologyStatsByTableType + url;\n        return this.http.get<TopologyStatisticsTabularView>(finalUrl, options);\n    }\n    getTopologyStatistics(gamingDay, topologyIds, viewId, options: {}): Observable<TopologyStatistics> {\n      const url = `${urls.casinoMgr.topologyStatistics}?gamingDay=${gamingDay}&topologyIds=${topologyIds}&viewId=${viewId}`;\n      return this.http.get<TopologyStatistics>(url, options);\n    }\n    getTopologyStatisticsForVirtualGroup(gamingDay, topologyGroupId, viewId, options: {}): Observable<TopologyStatistics> {\n        const url = `${urls.casinoMgr.topologyStatisticsForVirtualGroup}?gamingDay=${gamingDay}&topologyGroupId=${topologyGroupId}&viewId=${viewId}`;\n        return this.http.get<TopologyStatistics>(url, options);\n    }\n    getTopLosingCasino(gamingDay, topologyId): Observable<HttpResponse<Object>> { \n      const url = `${urls.casinoMgr.topLosingCasino}?gamingDay=${gamingDay}&topologyId=${topologyId}`; \n      return this.http.get<HttpResponse<Object>>(url); \n    }\n     getTopWinningCasino(gamingDay, topologyId): Observable<HttpResponse<Object>> { \n      const url = `${urls.casinoMgr.topWinningCasino}?gamingDay=${gamingDay}&topologyId=${topologyId}`; \n      return this.http.get<HttpResponse<Object>>(url); \n    }\n    getTopLosingPlayersVirtualGroup(gamingDay, topologyId): Observable<HttpResponse<Object>> {\n        const url = `${urls.casinoMgr.topLosingPlayersVirtualGroup}?gamingDay=${gamingDay}&topologyGroupId=${topologyId}`;\n        return this.http.get<HttpResponse<Object>>(url);\n    }\n    getTopWinningPlayersVirtualGroup(gamingDay, topologyId): Observable<HttpResponse<Object>> {\n        const url = `${urls.casinoMgr.topWinningPlayersVirtualGroup}?gamingDay=${gamingDay}&topologyGroupId=${topologyId}`;\n        return this.http.get<HttpResponse<Object>>(url);\n    }\n    getPlayerStatistics(options: {}): Observable<TopologyStatisticsTabularView> {\n        const url = urls.casinoMgr.playerStatistics;\n        return this.http.get<TopologyStatisticsTabularView>(url, options);\n    }\n    getPaginatedOpenerCloser(options: {}): Observable<OpenerCloserInterface> {\n        const finalUrl = urls.cage.paginatedOpenerCloser;\n        return this.http.get<OpenerCloserInterface>(finalUrl, options);\n    }\n    getPaginatedSearchManualRatings(url, options: {}): Observable<HttpResponse<Object>> {\n        const finalUrl = urls.game.paginatedSearchManualRatings + url;\n        return this.http.post<HttpResponse<Object>>(finalUrl, options);\n    }\n    getpaginatedSessions(payload , options: {}): Observable<HttpResponse<Object>> {\n        const finalUrl = urls.game.paginatedSessions;\n        return this.http.post<HttpResponse<Object>>(finalUrl, payload, options);\n    }\n    getpaginatedGames(options: {}): Observable<HttpResponse<Object>> {\n        const finalUrl = urls.game.paginatedGames;\n        return this.http.get<HttpResponse<Object>>(finalUrl, options);\n    }\n    getFilterForTable(options: {}): Observable<HttpResponse<Object>> {\n      const url = urls.casinoMgr.tableFilter;\n      return this.http.get<HttpResponse<Object>>(url, options);\n    }\n    getFilterForPlayer(options: {}): Observable<HttpResponse<Object>> {\n        const url = urls.casinoMgr.playerFilter;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n    getActivePlayer(options: {}): Observable<HttpResponse<Object>> {\n        const url = urls.casinoMgr.activePlayer;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n    getUserSearch(options: {}): Observable<HttpResponse<Object>> {\n        const url = urls.casinoMgr.userSearch;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n    // getpaginatedSessions(payload , options: {}): Observable<HttpResponse<Object>> {\n    //     const finalUrl = 'http://172.31.2.92:8080/api/game/v1/paginatedSessions';\n    //     return this.http.post<HttpResponse<Object>>(finalUrl, payload, options);\n    // }\n    // getpaginatedGames(options: {}): Observable<HttpResponse<Object>> {\n    //     const finalUrl = 'http://172.31.2.92:8080/api/game/v1/paginatedGames';\n    //     //const finalUrl = urls.game.paginatedGames;\n    //     return this.http.get<HttpResponse<Object>>(finalUrl, options);\n    // }\n}\n","import {Component, EventEmitter, HostListener, Input, OnChanges, OnInit, Output} from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {TranslateService} from '@ngx-translate/core';\nimport {CasinomanagerService} from '../services/casinomanager.service';\nexport interface PlayerParam {\n  params: any;\n}\n@Component({\n  selector: 'app-player-search',\n  templateUrl: './player-search.component.html',\n  styleUrls: ['./player-search.component.scss']\n})\nexport class PlayerSearchComponent implements OnInit, OnChanges {\n  searchOption = [\n    {value: 'casinoPlayerId', viewValue: 'application.app.common.labels.PLAYERID'},\n    {value: 'firstName', viewValue: 'application.app.common.labels.FIRST_NAME'},\n    {value: 'lastName', viewValue: 'application.app.common.labels.LAST_NAME'}\n\n  ];\n  prevKeyCode;\n  reqObj: PlayerParam = { params: {} };\n  selectedOption = 'casinoPlayerId';\n  searchText;\n  @Output() searchObj = new EventEmitter<any>();\n  @Input() updateNameAfterSearch;\n  @Input() isDisabled = false;\n  @Input() activePlayerApi = false;\n  @Input() gamingDay;\n  isCMSUp = true;\n  isInvalidPlayerId = false;\n  isInvalidCardId = false;\n\n  constructor(private casinoManagerService: CasinomanagerService,\n              private snackBar: MatSnackBar,\n              private translate: TranslateService\n  ) {\n   // this.translate.setDefaultLang('en_US');\n  }\n  @HostListener('document:keypress', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    if (event.keyCode === 13) {\n      this.checkEvent();\n    } else {\n      this.prevKeyCode = event.keyCode;\n    }\n  }\n  ngOnInit() {\n  }\n  ngOnChanges() {\n    this.searchText = this.updateNameAfterSearch;\n  }\n  searchPlayer(searchText) {\n    this.reqObj.params = {};\n    switch (this.selectedOption) {\n      case 'casinoPlayerId': {\n        if (this.isValidPlayerId(searchText)) {\n          this.isInvalidPlayerId = false;\n          this.isInvalidCardId = false;\n          this.reqObj.params.casinoPlayerId = searchText;\n        } else {\n          this.isInvalidPlayerId = true;\n          this.isInvalidCardId = false;\n          const invalidMsg = this.translate.instant('application.app.CAM_CASHIER_LABELS.COMMON_LOGGERMESSAGES.INVALID_PLAYER_ID');\n          this.snackBar.open(invalidMsg, '', {\n            duration: 3000,\n            horizontalPosition: 'right',\n            panelClass: 'snack__warn'\n          });\n        }\n        break;\n      }\n      case 'lastName' : {\n        this.isInvalidCardId = false;\n        this.isInvalidPlayerId = false;\n        if (this.activePlayerApi) {\n          this.reqObj.params.playerLastName = searchText;\n        } else {\n          this.reqObj.params.lastName = searchText;\n        }\n\n        break;\n      }\n      case 'firstName' : {\n        this.isInvalidCardId = false;\n        this.isInvalidPlayerId = false;\n        if (this.activePlayerApi) {\n          this.reqObj.params.playerFirstName = searchText;\n        } else {\n          this.reqObj.params.firstName = searchText;\n        }\n        break;\n      }\n      case 'casinoCardData' : {\n        this.searchText = '';\n        if (this.isValidCardId(searchText)) {\n          this.isInvalidCardId = false;\n          this.isInvalidPlayerId = false;\n          this.reqObj.params.casinoCardData = searchText;\n        } else {\n          this.isInvalidCardId = true;\n          this.isInvalidPlayerId = false;\n        }\n        break;\n      }\n    }\n    if (this.selectedOption === 'firstName' || this.selectedOption === 'lastName') {\n      if (searchText.trim().length < 3) {\n        this.snackBar.open(this.translate.instant('application.app.common.labels.MIN_LENGTH_VALIDITY'), '', {\n          duration: 3000,\n          horizontalPosition: 'right',\n          panelClass: 'snack__warn'\n        });\n        return;\n      }\n    }\n    this.reqObj.params.fetch = false;\n    if (!this.isInvalidPlayerId && !this.isInvalidCardId) {\n      if (this.activePlayerApi) {\n        this.getActivePlayers();\n      } else {\n        this.getRequestedPlayers();\n      }\n    }\n  }\n  getActivePlayers() {\n    this.reqObj.params.gamingDay = this.gamingDay;\n    this.casinoManagerService.getActivePlayer(this.reqObj).subscribe(res => {\n      this.searchObj.emit(res);\n    }, err => {\n      console.log(err);\n    });\n  }\n  getRequestedPlayers() {\n    this.casinoManagerService.getActivePlayer(this.reqObj).subscribe( (res) => {\n      if ((this.selectedOption === 'casinoPlayerId' || this.selectedOption === 'casinoCardData') && res['successObj'].players.banned) {\n        this.selectedOption = 'casinoPlayerId';\n        const bannedMsg = this.translate.instant('application.app.CAM_CASHIER_LABELS.COMMON_LOGGERMESSAGES.BANNEDPLAYER');\n        this.snackBar.open(bannedMsg, '', {\n          duration: 3000,\n          horizontalPosition: 'right',\n          panelClass: 'snack__warn'\n        });\n        return false;\n      }\n        if (this.selectedOption === 'casinoCardData' && res['successObj'].players.length > 0\n          && res['successObj'].players[0].playerId === null) {\n          res['successObj'].players[0].playerId = this.getLastSixDigits(res['successObj'].players[0].cardId);\n          res['successObj'].players[0].cardId = res['successObj'].players[0].cardId;\n          this.selectedOption = 'casinoPlayerId';\n        }\n      this.isCMSUp = res['successObj'].isCMSUp;\n      if (this.selectedOption === 'firstName' || this.selectedOption === 'lastName') {\n        if (!this.isCMSUp) {\n          this.snackBar.open(this.translate.instant('application.app.common.labels.SEARCH_PLAYER_BY_ID_CARD'), '', {\n            duration: 4000,\n            horizontalPosition: 'right',\n            panelClass: 'snack__info'\n          });\n          return;\n        }\n      }\n       if (res['successObj'].players.length < 1) {\n          this.snackBar.open(this.translate.instant('application.app.common.labels.PLAYERNOTFOUND'), '', {\n            duration: 3000,\n            horizontalPosition: 'right',\n            panelClass: 'snack__warn'\n          });\n         return;\n        }\n        this.searchObj.emit(res);\n    }, (err) => {\n      this.snackBar.open(this.translate.instant('application.app.common.labels.PLAYERNOTFOUND'), '', {\n        duration: 3000,\n        horizontalPosition: 'right',\n        panelClass: 'snack__warn'\n      });\n      console.log(err);\n    });\n  }\n  getLastSixDigits(val) {\n    val = val.replace(';', '').replace('?', '');\n    return val.substr(-6);\n  }\n  checkEvent() {\n    if (this.prevKeyCode > 57) {\n      this.selectedOption = 'casinoCardData';\n      if (this.searchText) {\n        this.searchPlayer(this.searchText);\n      }\n    } else {\n      // this.doSearch();\n    }\n  }\n  isValidPlayerId(playerId) {\n    return playerId.length > 0 && playerId.length <= 9 && !isNaN(playerId) && parseInt(playerId, 10) > 0\n      && Number.isInteger(parseInt(playerId, 10));\n  }\n  isValidCardId(cardValue) {\n    let isValidCard;\n    if (cardValue.match(/[a-z]/i)) {\n      isValidCard = false;\n    } else {\n      const strLen = cardValue.length;\n      if (cardValue[0] === ';' && cardValue[strLen - 1] === '?') {\n        let cardVal = cardValue.replace(';', '').replace('?', '');\n        cardVal = cardVal.replace(/[&\\/\\\\#,+()$~%.'\":*?<>{}=]/g, '');\n        if (!isNaN(cardVal)) {\n          isValidCard = true;\n        } else {\n          isValidCard = false;\n        }\n      } else {\n        isValidCard = false;\n      }\n    }\n    return isValidCard;\n  }\n  onKeyPressSearchText(event: any) {\n    if (event.target.value.length>8){\n      event.preventDefault();\n    }\n  };\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-subnav-bar',\n  templateUrl: './subnav-bar.component.html',\n  styleUrls: ['./subnav-bar.component.scss']\n})\nexport class SubnavBarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CurrentTopologyService {\n  private defaultTopologyID = 3;\n  private defaultGamingDay: Date;\n  public topology = new BehaviorSubject<number>(this.defaultTopologyID);\n  public currentTopology =  this.topology.asObservable();\n  public gamingDay = new BehaviorSubject<Date>(this.defaultGamingDay);\n  public currentGamingDay =  this.gamingDay.asObservable();\n  constructor() { }\n  updateTopology(topologyID: number, gamingDay: Date) {\n    this.topology.next(topologyID);\n    this.gamingDay.next(gamingDay);\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {CurrentTopologyService} from '../../services/current-topology.service';\nimport {AlertCount} from '../../interface/alert.interface';\nimport {TopologyStatistics} from '../../interface/topology-types.interface';\n\n@Component({\n    selector: 'app-subnav-data-bar',\n    templateUrl: './subnav-data-bar.component.html',\n    styleUrls: ['./subnav-data-bar.component.scss']\n})\nexport class SubnavDataBarComponent {\n    @Input() alertsCount: AlertCount;\n    @Input() topologyStatistics: TopologyStatistics;\n    private currentToplogyId: number;\n    private currentGamingDay: Date;\n    constructor(private currentTopology: CurrentTopologyService) {\n        this.updateTopology(); // just for testing purpose\n    }\n    updateTopology () {\n        // this has to be assigned from the route\n        this.currentToplogyId = 3; // temporary value\n        this.currentGamingDay = new Date('2019-01-10');\n        this.currentTopology.updateTopology(this.currentToplogyId, this.currentGamingDay);\n    }\n\n    convertToNumber(value): number {\n        return parseFloat(value);\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatTreeModule } from '@angular/material/tree';\n\n@NgModule({\n    exports: [\n        MatButtonModule,\n        MatCardModule,\n        MatGridListModule,\n        MatInputModule,\n        MatSelectModule,\n        MatFormFieldModule,\n        MatRadioModule,\n        MatListModule,\n        MatIconModule,\n        MatButtonToggleModule,\n        MatTableModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatMenuModule,\n        MatTabsModule,\n        MatExpansionModule,\n        MatBottomSheetModule,\n        MatCheckboxModule,\n        MatSnackBarModule,\n        MatTooltipModule,\n        MatDialogModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n        MatIconModule,\n        MatToolbarModule,\n        MatStepperModule,\n        MatTreeModule,\n        MatSidenavModule,\n        MatDividerModule,\n        MatSlideToggleModule,\n        MatProgressBarModule,\n        MatProgressSpinnerModule,\n        MatAutocompleteModule\n    ]\n})\nexport class MaterialComponentModule {\n}\n","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'app-loader',\n    templateUrl: './loader.component.html',\n    styleUrls: ['./loader.component.scss']\n})\nexport class LoaderComponent {\n    constructor() {\n    }\n\n    generateFake(count: number): Array<number> {\n        const indexes = [];\n        for (let i = 0; i < count; i++) {\n            indexes.push(i);\n        }\n        return indexes;\n    }\n}\n","import {InjectableRxStompConfig} from '@stomp/ng2-stompjs';\nimport {urls} from '../constants/urls';\n\nexport const configRxLogoutStompConfig: InjectableRxStompConfig = {\n    brokerURL: urls.auth.logoutWS,\n    heartbeatIncoming: 0,\n    heartbeatOutgoing: 20000,\n    reconnectDelay: 200,\n    debug: (msg: string): void => {\n        console.log(new Date(), msg);\n    }\n};\n","import {Component, Input, OnInit} from '@angular/core';\nimport {DecimalPipe} from \"@angular/common\";\n\n@Component({\n    selector: 'app-chip-icons',\n    templateUrl: './chip-icons.component.html',\n    styleUrls: ['./chip-icons.component.scss']\n})\nexport class ChipIconsComponent implements OnInit {\n\n    @Input() chipIconKey: string;\n    strCss: string;\n    strKey: string;\n    chipLabel: string;\n\n    /*chipsIcon = {\n        '50000000': 'icon-chip-color chip-50-million',\n        '10000000': 'icon-chip-color chip-10-million',\n        '500000': 'icon-chip-color chip-500-thousand',\n        '100000': 'icon-chip-color chip-100-thousand',\n        '50000': 'icon-chip-color chip-50-thousand',\n        '25000': 'icon-chip-color chip-25-thousand',\n        '10000': 'icon-chip-color chip-10-thousand',\n        '5000': 'icon-chip-color chip-5-thousand',\n        '1000': 'icon-chip-color chip-1-thousand',\n        '500': 'icon-chip-color chip-500',\n        '100': 'icon-chip-color chip-100',\n        '50': 'icon-chip-color chip-50',\n        '25': 'icon-chip-color chip-25',\n        '5': 'icon-chip-color chip-5',\n        '3': 'icon-chip-color chip-3',\n        '1': 'icon-chip-color chip-1'\n    };*/\n    constructor(private decimalPipe: DecimalPipe) {\n    }\n\n    ngOnInit() {\n        this.getChipIcon();\n    }\n\n    getChipIcon(): string {\n        if (typeof this.chipIconKey !== 'undefined') {\n            this.strKey = this.chipIconKey.replace('.00', '');\n        }\n        this.chipLabel = this.getChipLabel(this.strKey);\n        // this.strCss = this.chipsIcon[this.strKey] ? this.chipsIcon[this.strKey] : 'icon-chip-color default-chip-color';\n        this.strCss = 'icon-chip-color chip-grey';\n        return this.strCss;\n    }\n\n    getChipLabel(chipKey): string {\n        if (chipKey === undefined) {\n            return;\n        }\n        if (this.isFractionalChipDenom(chipKey.toString())) {\n            return this.decimalPipe.transform(chipKey.toString(), '1.2-2')/*.replace('.00', '')*/;\n        } else {\n            switch (chipKey) {\n                case '1000' :\n                case '1000.0' :\n                case '1000.00' : {\n                    return '1K';\n                }\n                case '5000' :\n                case '5000.0' :\n                case '5000.00' : {\n                    return '5K';\n                }\n                case '10000' :\n                case '10000.0' :\n                case '10000.00' : {\n                    return '10K';\n                }\n                case '25000' :\n                case '25000.0' :\n                case '25000.00' : {\n                    return '25K';\n                }\n                case '50000':\n                case '50000.0':\n                case '50000.00': {\n                    return '50K';\n                }\n                case '100000':\n                case '100000.0':\n                case '100000.00': {\n                    return '100K';\n                }\n                case '500000':\n                case '500000.0':\n                case '500000.00': {\n                    return '500K';\n                }\n                case '1000000':\n                case '1000000.0':\n                case '1000000.00': {\n                    return '1M';\n                }\n                case '5000000':\n                case '5000000.0':\n                case '5000000.00': {\n                    return '5M';\n                }\n                case '10000000':\n                case '10000000.0':\n                case '10000000.00': {\n                    return '10M';\n                }\n                case '50000000':\n                case '50000000.0':\n                case '50000000.00': {\n                    return '50M';\n                }\n                default:\n                    return chipKey;\n            }\n        }\n    }\n\n    isFractionalChipDenom(denom) {\n        if (typeof denom === 'number') {\n            denom = denom.toString();\n        }\n        return ( denom && denom.indexOf('.') > -1  );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {urls} from '../constants/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PromotionService {\n\n  constructor(private http: HttpClient) { }\n\n  getPromotions(options: {}): Observable<HttpResponse<Object>> {\n    const url = `${urls.promotion.promotionPath}`;\n    return this.http.get<HttpResponse<Object>>(url, options);\n  }\n\n  changeStatus(promotionId, options: {}): Observable<HttpResponse<Object>> {\n    const url = `${urls.promotion.promotionUpdatePath}${promotionId}`;\n    return this.http.put<HttpResponse<Object>>(url, options);\n  }\n\n  createPromotion(body: {}, options?: {}): Observable<HttpResponse<Object>> {\n    const url = `${urls.promotion.promotionPath}`;\n    return this.http.post<HttpResponse<Object>>(url, body, options);\n  }\n\n  managePromotionEnabled(): Observable<HttpResponse<Object>> {\n    const url = `${urls.promotion.managePromotionEnabled}`;\n    return this.http.get<HttpResponse<Object>>(url);\n  }\n\n  getWinners(options: {}): Observable<HttpResponse<Object>> {\n    const url = `${urls.promotion.winners}`;\n    return this.http.get<HttpResponse<Object>>(url, options);\n  }\n  getEligibleDays(options: {}) {\n      const url = `${urls.promotion.promotionsEligibleDays}`;\n      return this.http.get<HttpResponse<Object>>(url, options);\n  }\n\n  /**\n     * this function get the comp api data and path is end point of api like Properties,CompType etc..\n     * @param path\n     * @param options\n  */\n  getCompApi(path, options: {}) {\n     const url = `${urls.promotion.promotionsCompApi}${path}`;\n     return this.http.get<HttpResponse<Object>>(url, options);\n  }\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {PromotionService} from '../../services/promotion.service';\nimport {TopologyService} from \"../../services/topology.service\";\n\nconst ELEMENT_DATA_W = [\n  {promotionId: 1001, name: 'Promotion1', creationTime: '11:22', prizeName: 'Iphone', totalamount: 30000,\n    pitName: 'PIT1', tableName: 'TAB1', seat: 4, player: 'Pandey, Rakesh (1002)', sessionId: 1223},\n  {promotionId: 1002, name: 'Promotion2', creationTime: '13:32', prizeName: 'Ipad', totalamount: 50000,\n    pitName: 'PIT2', tableName: 'TAB2', seat: 3, player: 'Kumar, Ankur (1006)', sessionId: 1345},\n];\n\nconst ELEMENT_DATA_ES = [\n  {promotionId: 1001, name: 'Promotion1', pitName: 'PIT1', tableName: 'TAB1', seat: 4, player: 'Pandey, Rakesh (1002)', sessionId: 1223},\n  {promotionId: 1002, name: 'Promotion2', pitName: 'PIT2', tableName: 'TAB2', seat: 3, player: 'Kumar, Ankur (1006)', sessionId: 1345},\n];\n\n@Component({\n  selector: 'app-winner-eligible-sessions',\n  templateUrl: './winner-eligible-sessions.component.html',\n  styleUrls: ['./winner-eligible-sessions.component.scss']\n})\n\n\n\nexport class WinnerEligibleSessionsComponent implements OnInit {\n  command: any;\n  perPageOption: Array<number> = [10, 20, 30, 50, 100];\n  totalRecord = 19;\n  displayedColumns_W: string[] = ['promotionId', 'promotionName', 'timeOfWin', 'prizeName', 'prizeValue', 'pit', 'tableId',\n    'seat', 'player', 'sessionId'];\n  winners = [];\n\n  displayedColumns_ES: string[] = ['promotionId', 'name', 'pitName', 'tableName', 'seat', 'player', 'sessionId'];\n  dataSource_ES = ELEMENT_DATA_W;\n\n  constructor(public dialogRef: MatDialogRef<WinnerEligibleSessionsComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: any,\n              private promotionService: PromotionService,\n              public topologyService: TopologyService\n  ) {\n    this.init(data);\n  }\n\n  init(data): void {\n    this.command = data;\n    if (this.command.cmd === 'WINNER') {\n      this.getWinners();\n    }\n  }\n\n  ngOnInit() {\n  }\n\n  closeDialog(): void {\n    this.dialogRef.close();\n  }\n\n  getWinners(): void {\n    const requestObj = {\n      observe: 'response',\n      params: {}\n    };\n    this.promotionService.getWinners(requestObj)\n        .subscribe( response => {\n          this.winners = response.body['winners'];\n        });\n  }\n\n  getTopologyNameById(topologyId): string {\n    if (this.topologyService.topologyNodeNames[topologyId]) {\n      return this.topologyService.topologyNodeNames[topologyId].name;\n    }\n\n  }\n\n  updatePagination(event): void {\n\n  }\n\n}\n","import {Component, Input} from '@angular/core';\nimport {dialogSize} from './../constants/constants';\nimport { MatDialog } from '@angular/material/dialog';\nimport {WinnerEligibleSessionsComponent} from '../header/winner-eligible-sessions/winner-eligible-sessions.component';\nimport {PlayerSearchComponent} from '../player-search/player-search.component';\n\n\n@Component({\n  selector: 'app-action-menu',\n  templateUrl: './action-menu.component.html',\n  styleUrls: ['./action-menu.component.scss']\n})\nexport class ActionMenuComponent {\n  @Input() appName: string;\n\n  constructor(\n      public dialog: MatDialog) {\n  }\n  winnerEligibleSessions(cmd): void {\n    const dialogRef = this.dialog.open(WinnerEligibleSessionsComponent, {\n      width: dialogSize.large,\n      height: '45vw',\n      data: {cmd: cmd}\n    });\n    dialogRef.afterClosed().subscribe(result => {\n\n    });\n  }\n    openPlayerSearch() {\n        const dialogRef = this.dialog.open(PlayerSearchComponent, {\n            width: dialogSize.large,\n            height: '45vw',\n            data: {cmd: ''}\n        });\n        dialogRef.afterClosed().subscribe(result => {\n\n        });\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {CageService} from '../../services/cage.service';\nimport {CurrentTopologyService} from '../../services/current-topology.service';\nimport {TranslateService} from '@ngx-translate/core';\nimport {GamingDayDDInterface, RollTimeInterface, RollTimePayloadInterface, TopologyObjectInterface} from '../../interface/cage.interface';\n\n@Component({\n    selector: 'app-roll-time-dialog',\n    templateUrl: './roll-time-dialog.component.html',\n    styleUrls: ['./roll-time-dialog.component.scss']\n})\nexport class RollTimeDialogComponent implements OnInit {\n\n    private dateTime: Date;\n    public startAt: Date;\n    public minStartTime: Date;\n    public maxDateTime: Date;\n    private requestObject: Object;\n    private rollTimeData: Array<RollTimeInterface>;\n    public renderedRollTimeData: Array<RollTimeInterface>;\n    public displayedColumns: Array<string> = ['topologyNode', 'nextRollDtm'];\n    public currentGamingDays: Array<GamingDayDDInterface> = [];\n    public selectedGamingDay: Date;\n    private currentGamingDay: Date;\n    public disableRollTimeSelection: Boolean;\n    private rollTimeTopologyMap = {};\n    public selectedNodeIds: Array<number> = [];\n    private rollTimePayloadData: Array<RollTimePayloadInterface> = [];\n\n    constructor(\n        private dialog: MatDialog,\n        private dialogRef: MatDialogRef<any>,\n        private cageService: CageService,\n        private currentTopologyService: CurrentTopologyService,\n        private snackBar: MatSnackBar,\n        private translate: TranslateService\n    ) {\n        this.setCurrentData();\n        this.getRollTimeData();\n    }\n    setCurrentData (): void {\n        this.currentTopologyService.currentTopology.subscribe(topologyID => {\n            this.requestObject = {\n                params: {\n                    topologyId: topologyID\n                }\n            };\n        });\n        this.currentTopologyService.currentGamingDay.subscribe(gamingDay => {\n            this.currentGamingDay = gamingDay;\n        });\n    }\n\n    ngOnInit() {\n        this.dateTime = new Date(); // setting default date\n    }\n\n    getRollTimeData() {\n        this.cageService.getRollTimeData(this.requestObject).subscribe(data => {\n            this.rollTimeData = data;\n            this.processTopology(this.rollTimeData);\n            this.selectedGamingDay = this.currentGamingDays[0].value;\n            this.userConditions();\n            this.renderView();\n        });\n    }\n\n    userConditions() {\n        this.disableRollTimeSelection = new Date(this.selectedGamingDay).getTime() > this.currentGamingDay.getTime();\n    }\n\n    setTimeOnCalender(selectedRollTime: Date) {\n        const maxDate = new Date();\n        this.startAt = selectedRollTime;\n        this.minStartTime = new Date();\n        maxDate.setDate(maxDate.getDate() + 1);\n        this.maxDateTime = maxDate;\n    }\n\n    selectedRollTime(rollTime: string) {\n        this.rollTimePayloadData = [];\n        for (let i = 0; i < this.selectedNodeIds.length; i++) {\n            this.rollTimePayloadData.push({'nextRollDtm': new Date(rollTime).toISOString(), 'nodeId': this.selectedNodeIds[i]});\n        }\n        this.cageService.postRollTimeData(this.rollTimePayloadData);\n    }\n\n    selectLocation(location: RollTimeInterface) {\n        const childrenNodeMap = {};\n        this.childrenNodes(childrenNodeMap);\n        for (const key in childrenNodeMap) {\n            if (childrenNodeMap.hasOwnProperty(key)) {\n                if (childrenNodeMap[key].length > 0) {\n                    const allChildrenNodes = [];\n                    this.callRecursively(childrenNodeMap, childrenNodeMap[key], allChildrenNodes);\n                    this.rollTimeTopologyMap[key] = allChildrenNodes;\n                } else {\n                    this.rollTimeTopologyMap[key] = [];\n                }\n            }\n        }\n        this.locationSelection(location);\n\n    }\n    locationSelection(location: RollTimeInterface) {\n        location.isChecked = !location.isChecked;\n        if (location.isChecked) {\n            if (this.selectedNodeIds.indexOf(location.topologyNode.nodeId) === -1) {\n                this.selectedNodeIds.push(location.topologyNode.nodeId);\n            }\n        } else {\n            this.selectedNodeIds = this.selectedNodeIds.filter(e => e !== location.topologyNode.nodeId);\n        }\n        this.renderedRollTimeData.map(node => {\n            if (this.rollTimeTopologyMap[location.topologyNode.nodeId].indexOf(node.topologyNode.nodeId.toString()) > -1) {\n                node.isChecked = location.isChecked;\n                if (node.isChecked) {\n                    if (this.selectedNodeIds.indexOf(node.topologyNode.nodeId) === -1) {\n                        this.selectedNodeIds.push(node.topologyNode.nodeId);\n                    }\n                } else {\n                    this.selectedNodeIds = this.selectedNodeIds.filter(e => e !== node.topologyNode.nodeId);\n                }\n            }\n        });\n    }\n\n    childrenNodes(childrenNodeMap: Object) {\n        let topologyNode: TopologyObjectInterface;\n        let childrenIds: number[];\n        for (let i = 0; i < this.rollTimeData.length; i++) {\n            topologyNode = this.rollTimeData[i].topologyNode;\n            childrenIds = this.extractNodeIdFromHref(topologyNode.childNodesHrefs);\n            childrenNodeMap[topologyNode.nodeId] = childrenIds;\n        }\n    }\n\n    callRecursively(childrenNodeMap: Object, currentChildrenNodes, allChildrenNodes: string[]) {\n        for (let i = 0; i < currentChildrenNodes.length; i++) {\n            allChildrenNodes.push(currentChildrenNodes[i]);\n            for (const key in childrenNodeMap) {\n                if (childrenNodeMap.hasOwnProperty(key) &&\n                    (key === currentChildrenNodes [i] && childrenNodeMap[key].length > 0)) {\n                    this.callRecursively(childrenNodeMap, childrenNodeMap[key], allChildrenNodes);\n                }\n            }\n        }\n    }\n\n    extractNodeIdFromHref(hrefArray: string) {\n        const idArr: number[] = [];\n        let ids = [];\n        for (let i = 0; i < hrefArray.length; i++) {\n            ids = hrefArray[i].split('/');\n            idArr.push(ids[ids.length - 1]);\n        }\n        return idArr;\n    }\n\n    processTopology(topologyObj: Array<RollTimeInterface>): void {\n        const allGamingDays = [];\n\n        for (let i = 0; i < topologyObj.length; i++) {\n            topologyObj[i].topologyNode.location = this.locationPath(topologyObj[i].topologyNode.name, topologyObj[i].topologyNode.path);\n            topologyObj[i].currentGamingDayViewValue = new Date(topologyObj[i].currentGamingDay);\n            topologyObj[i].nextRollDtmViewValue = new Date(topologyObj[i].nextRollDtm);\n            topologyObj[i].isChecked = false;\n            allGamingDays.push(topologyObj[i].currentGamingDay);\n        }\n\n        const uniqueGamingDays = (Array.from(new Set(allGamingDays))).sort();\n\n        for (let i = 0; i < uniqueGamingDays.length; i++) {\n            this.currentGamingDays.push(\n                {\n                    value: uniqueGamingDays[i],\n                    viewValue: new Date(uniqueGamingDays[i])\n                }\n            );\n        }\n    }\n\n    locationPath(currentTopologyName, path): Array<string> {\n        let formattedPath: Array<string> = [];\n        if (path.length <= 2) {\n            formattedPath = currentTopologyName.split();\n        } else {\n            path = currentTopologyName + ',' + path.slice(1, -1);\n            formattedPath = path.split(',').reverse();\n        }\n        return formattedPath;\n    }\n\n    onClose(): void {\n        this.dialogRef.close();\n    }\n\n    onGamingDaySelection() {\n        this.selectedNodeIds = [];\n        this.renderView();\n    }\n\n    renderView(): void {\n        this.renderedRollTimeData = this.sortDataObj(\n            this.rollTimeData.filter(data =>\n                data.currentGamingDay === this.selectedGamingDay.toString()\n            ));\n    }\n\n    sortDataObj(obj): Array<RollTimeInterface> {\n        return obj.sort((a, b) =>\n            (a.topologyNode.parentNodeId > b.topologyNode.parentNodeId) ? 1 :\n                ((b.topologyNode.parentNodeId > a.topologyNode.parentNodeId) ? -1 : 0));\n    }\n\n    submitRollTime() {\n        this.cageService.postRollTimeData(this.rollTimePayloadData).subscribe(res => {\n            const key = 'application.app.common.labels.TOPSUBNAV.ROLL_TIME_UPDATED';\n            this.snackBar.open(this.translate.instant(key), '', {\n                duration: 3000,\n                horizontalPosition: 'right',\n                panelClass: 'snack__success'\n            });\n            this.dialogRef.close();\n        });\n    }\n}\n\n","import {Component, Input, OnInit} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {RollTimeDialogComponent} from './roll-time-diaglog/roll-time-dialog.component';\nimport {dialogSize} from '../constants/constants';\n\n@Component({\n    selector: 'app-roll-time',\n    templateUrl: './roll-time.component.html',\n    styleUrls: ['./roll-time.component.scss']\n})\nexport class RollTimeComponent implements OnInit {\n\n    constructor(private dialog: MatDialog) {\n    }\n\n    ngOnInit() {\n    }\n\n    openDialog(): void {\n        this.dialog.open(RollTimeDialogComponent, {\n            width: dialogSize.medium,\n            height: '600px'\n        });\n    }\n}\n\n\n","import {NgModule} from '@angular/core';\nimport {RollTimeComponent} from './roll-time.component';\nimport {RollTimeDialogComponent} from './roll-time-diaglog/roll-time-dialog.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTableModule } from '@angular/material/table';\nimport {OwlDateTimeModule, OwlNativeDateTimeModule} from 'ng-pick-datetime';\nimport {CommonModule} from '@angular/common';\nimport {CommonTranslationModule} from '../common-translation/common-translation.module';\n\n@NgModule({\n    imports: [\n        MatSelectModule,\n        OwlDateTimeModule,\n        OwlNativeDateTimeModule,\n        CommonModule,\n        MatTableModule,\n        MatCheckboxModule,\n        CommonTranslationModule,\n        MatInputModule,\n        MatButtonModule,\n        MatMenuModule\n    ],\n    declarations: [\n        RollTimeComponent,\n        RollTimeDialogComponent\n    ],\n    exports: [\n        RollTimeComponent,\n        RollTimeDialogComponent\n    ]\n})\nexport class AppRollTimeModule {\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-access-denied',\n  templateUrl: './access-denied.component.html',\n  styleUrls: ['./access-denied.component.scss']\n})\nexport class AccessDeniedComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {Component, EventEmitter, Inject, OnInit, Output} from '@angular/core';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {FormBuilder, FormControl, Validators} from '@angular/forms';\nimport {TranslateService} from '@ngx-translate/core';\nimport {TopologyService} from '../services/topology.service';\n\n@Component({\n  selector: 'app-app-add-node-topology',\n  templateUrl: './app-add-node-topology.component.html',\n  styleUrls: ['./app-add-node-topology.component.scss']\n})\n\nexport class AppAddNodeTopologyComponent implements OnInit {\n    public optionArr = [];\n    public typeVal;\n    public longName;\n    public shortName;\n    public description;\n    public host;\n    public min = 1;\n    public max = 10;\n    public isHost = false;\n    public loader = false;\n    @Output() addedNodeEvent = new EventEmitter();\n    public siteTopologyCode;\n    public sitesFromTopology = [];\n    public companyLevelCode;\n    public isAccessGroup = false;\n    public isAGNameInvalid = false;\n    public isShortNameInvalid = false;\n    public isLongNameInvalid = false;\n    public savedAccessGroup: string;\n    public savedLocation: any;\n\n    constructor(public dialogRef: MatDialog,\n                @Inject(MAT_DIALOG_DATA) public data, public _topologyService: TopologyService,\n                public fb: FormBuilder, public snackBar: MatSnackBar, public translate: TranslateService) {\n        this.isAccessGroup = this.data.called === 'accessgroup';\n        this.addValidations();\n    }\n\n    public limitForm = this.fb.group({\n        description: ['']\n    });\n\n    validateShortName: ErrorStateMatcher = {\n        isErrorState: (control: FormControl) => {\n            this.isShortNameInvalid = this.isDuplicate('shortName', this.limitForm.value['shortName']);\n            return this.isShortNameInvalid;\n        }\n    };\n    validateName: ErrorStateMatcher = {\n        isErrorState: (control: FormControl) => {\n            this.isLongNameInvalid = this.isDuplicate('name', this.limitForm.value['longName']);\n            return this.isLongNameInvalid;\n        }\n    };\n    validateAccessGroupName: ErrorStateMatcher = {\n        isErrorState: (control: FormControl) => {\n            this.isAGNameInvalid = this.isDuplicate('groupName', this.limitForm.value['accessGroupName']);\n            return this.isAGNameInvalid;\n        }\n    };\n    valChangeFunction(evt, fName) {\n        const valObj = {};\n        valObj[fName] = evt;\n        this.limitForm.patchValue(valObj, {onlySelf: true});\n    }\n    addValidations() {\n        if (this.isAccessGroup) {\n            this.limitForm.addControl('typeValAGroup', new FormControl('', Validators.required));\n            this.limitForm.addControl('accessGroupName', new FormControl('', Validators.required));\n        } else {\n            this.limitForm.addControl('typeVal', new FormControl('', Validators.required));\n            this.limitForm.addControl('longName', new FormControl('',\n                Validators.compose([Validators.required, this.noWhitespace])));\n            this.limitForm.addControl('shortName', new FormControl('',\n                Validators.compose([Validators.required, Validators.maxLength(this.max), this.noWhitespace])));\n            this.limitForm.addControl('host', new FormControl('', Validators.required));\n\n        }\n    }\n    public noWhitespace(control: FormControl) {\n        const isWhitespace = (control.value || '').trim().length === 0;\n        const isValid = !isWhitespace;\n        return isValid ? null : { 'whitespace': true };\n    }\n    showHost(opt) {\n        if (opt.value === 1000) {\n            this.isHost = true;\n            this.limitForm.addControl('host', new FormControl('', Validators.required));\n        } else {\n            this.isHost = false;\n            this.limitForm.removeControl('host');\n        }\n\n    }\n\n    ngOnInit() {\n                    if (this.data.called === 'accessgroup') {\n                        this.createDataForDropdownForAccessGroup(this._topologyService.topologyTypes);\n                    }\n                    if (this.data.called === 'assignednode') {\n                        this.createDataForDropdownForAssingedNode(this.data.typeMap);\n                    }\n                }\n    createDataForDropdownForAccessGroup(topologyTypes) {\n        topologyTypes.forEach((value, key) => {\n            if (value.topologyType === 'SITE') {\n                this.siteTopologyCode = value.topologyTypeId;\n            }\n            if (value.topologyType === 'COMPANY_NAME') {\n                this.companyLevelCode = value.topologyTypeId;\n            }\n        });\n        const keyOfSits = Object.keys(this._topologyService.topologyNodeNames).\n        filter(key => this._topologyService.topologyNodeNames[key].type\n            === this.siteTopologyCode);\n        for (let i of keyOfSits) {\n            this.sitesFromTopology.push(this._topologyService.topologyNodeNames[i]);\n            this.optionArr.push({id: this._topologyService.topologyNodeNames[i].nodeId,\n                type: this._topologyService.topologyNodeNames[i].name});\n        }\n    }\n    createDataForDropdownForAssingedNode(types) {\n        if (types.get(this.data.clickedNode.type).childTypeIds.length > 0) {\n            const temp = types.get(this.data.clickedNode.type).childTypeIds;\n            for (const tp of temp) {\n                this.optionArr.push({value: types.get(tp).labelCode, id: types.get(tp).topologyTypeId, type: types.get(tp).topologyType});\n            }\n        }\n    }\n    createAccessGroup() {\n        const groupName = this.limitForm.value.accessGroupName;\n        this.loader = true;\n        // {\"topologyId\":2805,\"groupName\":\"asdasdasaaaa\",\"groupType\":\"ACCESS\"}\n        const param = {\n            topologyId: this.limitForm.value.typeValAGroup,\n            groupName: groupName.trim(),\n            groupType: 'ACCESS'\n        };\n        this._topologyService.createNodeAccessGroup(param).subscribe( (res) => {\n            if (res[0] && res[0].code === 20001) {\n                this.snackBar.open('Error Occurred. Pls try again later.', '', {\n                    duration: 3000,\n                    horizontalPosition: 'right',\n                    panelClass: 'snack__error'\n                });\n                return;\n            }\n            this.savedAccessGroup = groupName.trim();\n            this.loader = false;\n            this.closeDialogBox();\n            const temp = {res: res,  msg: 'createAccessGroup'};\n            this._topologyService.nodeUpdated.next(temp);\n            this.snackBar.open(this.translate.instant('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.AG_ADDED'), '', {\n                duration: 3000,\n                horizontalPosition: 'right',\n                panelClass: 'snack__success'\n            });\n        }, (err) => {\n            this.loader = false;\n            this.snackBar.open(err.error[0].message, '', {\n                duration: 3000,\n                horizontalPosition: 'right',\n                panelClass: 'snack__warn'\n            });\n        });\n    }\n    createAssingedNode() {\n        this.loader = true;\n        const longName = this.limitForm.value.longName;\n        const shortName = this.limitForm.value.shortName;\n        let param;\n        if (this.limitForm.value.typeVal === 1000) {\n            param = {\n                name: longName.trim(),\n                shortName: shortName.trim(),\n                type: this.limitForm.value.typeVal,\n                host: this.limitForm.value.host,\n                parentNodeId: this.data.clickedNode.nodeId,\n                description: this.limitForm.value.description\n            };\n        } else {\n            param = {\n                name: longName.trim(),\n                shortName: shortName.trim(),\n                type: this.limitForm.value.typeVal,\n                parentNodeId: this.data.clickedNode.nodeId,\n                description: this.limitForm.value.description\n            };\n        }\n        this._topologyService.createNodeOnTree(param).subscribe((res) => {\n            if (res[0] && res[0].code === 20001) {\n                this.snackBar.open('Error Occurred. Pls try again later.', '', {\n                    duration: 3000,\n                    horizontalPosition: 'right',\n                    panelClass: 'snack__error'\n                });\n                return;\n            }\n            this.savedLocation = res[0];\n            res[0].typeName = this._topologyService.topologyTypes.get(res[0].type).topologyType;\n            const temp = {res: res, clickNode: this.data.clickedNode, msg: 'createNode'};\n            this._topologyService.nodeUpdated.next(temp);\n            this.loader = false;\n            this.closeDialogBox();\n            this.snackBar.open(this.translate.instant('application.app.CONFIGURATION_LABELS.AREAS.SUCCESS_ADDED'), '', {\n                duration: 3000,\n                horizontalPosition: 'right',\n                panelClass: 'snack__success'\n            });\n        }, (err) => {\n            this.loader = false;\n            this.snackBar.open(err, '', {\n                duration: 3000,\n                horizontalPosition: 'right',\n                panelClass: 'snack__warn'\n            });\n        });\n    }\n    createNode() {\n        if (this.isAccessGroup) {\n            this.createAccessGroup();\n        } else {\n            this.createAssingedNode();\n        }\n    }\n\n    closeDialogBox(): void {\n        this.dialogRef.closeAll();\n    }\n    isDuplicate(field, value): boolean {\n        let isRedundant = false;\n        if (field === 'groupName' && value !== '') {\n            const accessGroups = this._topologyService.accessGroupNodes;\n            for (let i = 0, iLen = accessGroups.length; i < iLen; i++) {\n                if (accessGroups[i].groupName === value.trim() && value.trim() !== this.savedAccessGroup) {\n                    isRedundant = true;\n                }\n            }\n        } else if (field === 'name' && value !== '') {\n            const allNodes = this._topologyService.topologyNodeNames;\n            for (const obj in allNodes) {\n                if (allNodes.hasOwnProperty(obj)) {\n                    if (allNodes[obj].name.toUpperCase() === value.trim().toUpperCase()) {\n                        if (this.savedLocation && value.trim().toUpperCase() !== this.savedLocation.name.toUpperCase()) {\n                            isRedundant = true;\n                        } else if (this.savedLocation === undefined) {\n                            isRedundant = true;\n                        }\n                    }\n                }\n            }\n        } else if (field === 'shortName' && value !== '') {\n            const allNodes = this._topologyService.topologyNodeNames;\n            for (const obj in allNodes) {\n                if (allNodes.hasOwnProperty(obj)) {\n                    if (allNodes[obj].shortName.toUpperCase() === value.trim().toUpperCase()) {\n                        if (this.savedLocation && value.trim().toUpperCase() !== this.savedLocation.shortName.toUpperCase()) {\n                            isRedundant = true;\n                        } else if (this.savedLocation === undefined) {\n                            isRedundant = true;\n                        }\n                    }\n                }\n            }\n        }\n       return isRedundant;\n    }\n    isSaveDisabled(): boolean {\n        return this.limitForm.invalid || this.isAGNameInvalid || this.isLongNameInvalid || this.isShortNameInvalid;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\n\nexport interface PlayersList {\n  playername:string;\n  playerwinloss:number;\n}\n\nconst PLAYERS_DATA: PlayersList[] = [\n  {playername: 'Name1', playerwinloss: 9002000 },\n  {playername: 'Name1', playerwinloss: 1800 },\n  {playername: 'Name1', playerwinloss: 1750 },\n  {playername: 'Name1', playerwinloss: 1640 },\n  {playername: 'Name1', playerwinloss: 1510 },\n  {playername: 'Name1', playerwinloss: 1380 },\n  {playername: 'Name1', playerwinloss: 1000 },\n  {playername: 'Name1', playerwinloss: 960 },\n  {playername: 'Name1', playerwinloss: 815 },\n  {playername: 'Name1', playerwinloss: 520 },\n];\n\n@Component({\n  selector: 'app-app-tab-bar',\n  templateUrl: './app-tab-bar.component.html',\n  styleUrls: ['./app-tab-bar.component.scss']\n})\nexport class AppTabBarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  playersListColumns: string[] = ['playername', 'playerwinloss'];\n  winningPlayersList = PLAYERS_DATA;\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-buy-ins',\n  templateUrl: './buy-ins.component.html',\n  styleUrls: ['./buy-ins.component.scss']\n})\nexport class BuyInsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-opener-closer',\n  templateUrl: './opener-closer.component.html',\n  styleUrls: ['./opener-closer.component.scss']\n})\nexport class OpenerCloserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-fill-credit',\n  templateUrl: './fill-credit.component.html',\n  styleUrls: ['./fill-credit.component.scss']\n})\nexport class FillCreditComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\n\nexport interface PeriodicElement {\n  name: string;\n  position: number;\n  weight: number;\n  symbol: string;\n  description: string;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {\n    position: 1,\n    name: 'Hydrogen',\n    weight: 1.0079,\n    symbol: 'H',\n    description: `Hydrogen is a chemical element with symbol H and atomic number 1. With a standard\n        atomic weight of 1.008, hydrogen is the lightest element on the periodic table.`\n  }, {\n    position: 2,\n    name: 'Helium',\n    weight: 4.0026,\n    symbol: 'He',\n    description: `Helium is a chemical element with symbol He and atomic number 2. It is a\n        colorless, odorless, tasteless, non-toxic, inert, monatomic gas, the first in the noble gas\n        group in the periodic table. Its boiling point is the lowest among all the elements.`\n  }, {\n    position: 3,\n    name: 'Lithium',\n    weight: 6.941,\n    symbol: 'Li',\n    description: `Lithium is a chemical element with symbol Li and atomic number 3. It is a soft,\n        silvery-white alkali metal. Under standard conditions, it is the lightest metal and the\n        lightest solid element.`\n  }, {\n    position: 4,\n    name: 'Beryllium',\n    weight: 9.0122,\n    symbol: 'Be',\n    description: `Beryllium is a chemical element with symbol Be and atomic number 4. It is a\n        relatively rare element in the universe, usually occurring as a product of the spallation of\n        larger atomic nuclei that have collided with cosmic rays.`\n  }, {\n    position: 5,\n    name: 'Boron',\n    weight: 10.811,\n    symbol: 'B',\n    description: `Boron is a chemical element with symbol B and atomic number 5. Produced entirely\n        by cosmic ray spallation and supernovae and not by stellar nucleosynthesis, it is a\n        low-abundance element in the Solar system and in the Earth's crust.`\n  }, {\n    position: 6,\n    name: 'Carbon',\n    weight: 12.0107,\n    symbol: 'C',\n    description: `Carbon is a chemical element with symbol C and atomic number 6. It is nonmetallic\n        and tetravalent—making four electrons available to form covalent chemical bonds. It belongs\n        to group 14 of the periodic table.`\n  }, {\n    position: 7,\n    name: 'Nitrogen',\n    weight: 14.0067,\n    symbol: 'N',\n    description: `Nitrogen is a chemical element with symbol N and atomic number 7. It was first\n        discovered and isolated by Scottish physician Daniel Rutherford in 1772.`\n  }, {\n    position: 8,\n    name: 'Oxygen',\n    weight: 15.9994,\n    symbol: 'O',\n    description: `Oxygen is a chemical element with symbol O and atomic number 8. It is a member of\n         the chalcogen group on the periodic table, a highly reactive nonmetal, and an oxidizing\n         agent that readily forms oxides with most elements as well as with other compounds.`\n  }, {\n    position: 9,\n    name: 'Fluorine',\n    weight: 18.9984,\n    symbol: 'F',\n    description: `Fluorine is a chemical element with symbol F and atomic number 9. It is the\n        lightest halogen and exists as a highly toxic pale yellow diatomic gas at standard\n        conditions.`\n  }, {\n    position: 10,\n    name: 'Neon',\n    weight: 20.1797,\n    symbol: 'Ne',\n    description: `Neon is a chemical element with symbol Ne and atomic number 10. It is a noble gas.\n        Neon is a colorless, odorless, inert monatomic gas under standard conditions, with about\n        two-thirds the density of air.`\n  },\n];\n\n@Component({\n  selector: 'app-game-history',\n  templateUrl: './game-history.component.html',\n  styleUrls: ['./game-history.component.css'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0', display: 'none'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\nexport class GameHistoryComponent implements OnInit {\n\n  dataSource = ELEMENT_DATA;\n  columnsToDisplay = ['name', 'weight', 'symbol', 'position'];\n  expandedElement: PeriodicElement | null;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}","import {Component, Input, OnInit} from '@angular/core';\nimport {ChipSetType} from '../interface/chipSet.interface';\nimport {TranslateService} from '@ngx-translate/core';\n@Component({\n    selector: 'app-chipset-panel',\n    templateUrl: 'chipset-panel.component.html',\n    styleUrls: ['chipset-panel.component.scss']\n})\nexport class ChipsetPanelComponent implements OnInit {\n\n    panelOpenState = false;\n    @Input() chipSetData = [];\n    csPanelHeaderHeight:string = '48px';\n\n    constructor(private translate: TranslateService) {\n        // this.translate.setDefaultLang('en_US');\n    }\n\n    ngOnInit() {\n    }\n    isFractionalChipDenom(denom) {\n        if (typeof denom === 'number') {\n            denom = denom.toString();\n        }\n        return ( denom && denom.indexOf('.') > -1  );\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HttpClientModule} from '@angular/common/http';\nimport {MaterialComponentModule} from './material-component/material-component.module';\nimport {AppSwitcherComponent} from './app-switcher/app-switcher.component';\nimport {AppMenuComponent} from './app-switcher/app-menu.component';\nimport {AppListComponent} from './app-switcher/app-list.component';\nimport {AlertService} from './services/alert.service';\nimport {UserService} from './services/user.service';\nimport {CageService} from './services/cage.service';\nimport {CasinomanagerService} from './services/casinomanager.service';\nimport {SortingService} from './sorting/sorting.service';\nimport {CommonTranslationModule} from './common-translation/common-translation.module';\nimport {LoaderComponent} from './loader/loader.component';\nimport {TopNavBarComponent} from './header/top-nav-bar/top-nav-bar.component';\nimport {InjectableRxStompConfig, RxStompService, rxStompServiceFactory} from '@stomp/ng2-stompjs';\nimport {configRxLogoutStompConfig} from './web-sockets/ws-auth.config';\nimport {ChipIconsComponent} from './chip-icons/chip-icons.component';\nimport {UtilityService} from './services/utility.service';\nimport {TopologyService} from './services/topology.service';\nimport {SubnavBarComponent} from './header/subnav-bar/subnav-bar.component';\nimport {PromotionService} from './services/promotion.service';\nimport {SubnavDataBarComponent} from './header/subnav-data-bar/subnav-data-bar.component';\nimport {CommonTranslationService} from './common-translation/common-translation.service';\nimport {ActionMenuComponent} from './action-menu/action-menu.component';\nimport {AppRollTimeModule} from './roll-time/app-roll-time.module';\nimport {WinnerEligibleSessionsComponent} from './header/winner-eligible-sessions/winner-eligible-sessions.component';\nimport {AccessDeniedComponent} from './access-denied/access-denied.component';\nimport {AppAddNodeTopologyComponent} from './app-add-node-topology/app-add-node-topology.component';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport {AppTabBarComponent} from './app-tab-bar/app-tab-bar.component';\nimport {BuyInsComponent} from './buy-ins/buy-ins.component';\nimport {OpenerCloserComponent} from './opener-closer/opener-closer.component';\nimport {FillCreditComponent} from './fill-credit/fill-credit.component';\nimport {GameHistoryComponent} from './game-history/game-history.component';\nimport {BreadcrumbComponent} from './breadcrumb/breadcrumb.component';\nimport {ChipsetPanelComponent} from './chipset-panel/chipset-panel.component';\nimport { PlayerSearchComponent } from './player-search/player-search.component';\nimport {LoggerModule, NgxLoggerLevel} from 'ngx-logger';\nimport {DatePipe, DecimalPipe} from '@angular/common';\nimport {HTTP_INTERCEPTORS} from \"@angular/common/http\";\nimport {JwtInterceptorService} from \"./services/Authentication/jwt-interceptor.service\";\n\n@NgModule({\n    declarations: [\n        AppSwitcherComponent,\n        AppMenuComponent,\n        AppListComponent,\n        LoaderComponent,\n        TopNavBarComponent,\n        ChipIconsComponent,\n        SubnavBarComponent,\n        SubnavDataBarComponent,\n        ActionMenuComponent,\n        WinnerEligibleSessionsComponent,\n        AccessDeniedComponent,\n        AppAddNodeTopologyComponent,\n        AppTabBarComponent,\n        BuyInsComponent,\n        OpenerCloserComponent,\n        FillCreditComponent,\n        GameHistoryComponent,\n        BreadcrumbComponent,\n        ChipsetPanelComponent,\n        PlayerSearchComponent\n    ],\n    imports: [\n        CommonModule,\n        MaterialComponentModule,\n        CommonTranslationModule,\n        AppRollTimeModule,\n        MatProgressBarModule,\n        LoggerModule.forRoot({\n            serverLoggingUrl: '',\n            level: NgxLoggerLevel.OFF,\n            serverLogLevel: NgxLoggerLevel.OFF,\n            disableConsoleLogging: false\n        }),\n    ],\n    providers: [\n        AlertService,\n        UserService,\n        DatePipe,\n        DecimalPipe,\n        CageService,\n        CasinomanagerService,\n        TopologyService,\n        SortingService,\n        UtilityService,\n        PromotionService,\n        CommonTranslationService,\n        {\n            provide: InjectableRxStompConfig,\n            useValue: configRxLogoutStompConfig\n        },\n        {\n            provide: RxStompService,\n            useFactory: rxStompServiceFactory,\n            deps: [InjectableRxStompConfig]\n        },\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: JwtInterceptorService,\n            multi: true\n        }\n    ],\n    entryComponents: [],\n    exports: [\n        MaterialComponentModule,\n        CommonTranslationModule,\n        HttpClientModule,\n        AppSwitcherComponent,\n        AppMenuComponent,\n        AppListComponent,\n        LoaderComponent,\n        TopNavBarComponent,\n        ChipIconsComponent,\n        SubnavBarComponent,\n        SubnavDataBarComponent,\n        WinnerEligibleSessionsComponent,\n        AccessDeniedComponent,\n        AppTabBarComponent,\n        BuyInsComponent,\n        OpenerCloserComponent,\n        FillCreditComponent,\n        GameHistoryComponent,\n        BreadcrumbComponent,\n        ChipsetPanelComponent\n    ]\n})\nexport class CommonUiLibModule {\n}\n","import {InjectableRxStompConfig} from '@stomp/ng2-stompjs';\nimport {urls} from '../constants/urls';\n\nexport const configRxAlertStompConfig: InjectableRxStompConfig = {\n    brokerURL: urls.alert.socketAlert,\n    heartbeatIncoming: 0,\n    heartbeatOutgoing: 10000,\n    reconnectDelay: 200,\n    debug: (msg: string): void => {\n        console.log('Alert Socket: ' + new Date(), msg);\n    }\n};\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {urls} from '../constants/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChipService {\n\n  constructor(private http: HttpClient) { }\n\n  getChipset(options: {}): Observable<HttpResponse<Object>> {\n    const url = `${urls.chipSet.updateChipSet}`;\n    return this.http.get<HttpResponse<Object>>(url, options);\n  }\n}\n","export function tokenGetter() {\n  const authValues: any = JSON.parse(localStorage.getItem('authValues'));\n  if (authValues) {\n    return localStorage.getItem(authValues.jwtTokenKey);\n  }\n}\n\nexport class WDTSUtility {\n\n  static validateNumberField(_event, maxLength?, value?) {\n    let valLen;\n    if (_event) {\n      if (_event.currentTarget) {\n        valLen = _event.currentTarget.value.length;\n      } else if (_event.target) {\n        valLen = _event.target.value.length;\n      }\n    } else {\n      valLen = (value && value.length);\n    }\n    if (valLen === undefined || maxLength === undefined) {\n      return (_event.keyCode >= 48 && _event.keyCode <= 57 );\n    }\n    return ( valLen < maxLength && _event.keyCode >= 48 && _event.keyCode <= 57 );\n  }\n\n  static numberWithDecimal(event): boolean {\n    let dotCount = 0;\n    const charCode = (event.which) ? event.which : event.keyCode;\n    const checkNumberOnly = (event.target.value);\n    if (charCode === 46) {\n      dotCount += 1;\n      const numericCheck = (event.target.value).toString();\n      if (numericCheck.includes('.')) {\n        dotCount += 1;\n      }\n      if (dotCount > 1) {\n        dotCount = 0;\n        return false;\n      }\n    }\n    if (charCode > 31 && (charCode < 45 || charCode > 57 || charCode === 47)) {\n      return false;\n    }\n    if (checkNumberOnly != null) {\n      const numeric = (event.target.value).toString();\n      if (numeric.includes('.')) {\n        const checkNumeric = numeric.split('.');\n        if (checkNumeric.length > 2) {\n          return false;\n        }\n        const checkString = checkNumeric[1].split('');\n        if (checkString.length > 1) {\n          const cursorPosition = event.target.selectionStart;\n          const dotPosition = event.target.value.indexOf('.')\n          if (cursorPosition > dotPosition) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  static equalIgnoreCase(string1, string2, ignoreCase, useLocale) {\n    if (ignoreCase) {\n      if (useLocale) {\n        string1 = string1.toLocaleLowerCase();\n        string2 = string2.toLocaleLowerCase();\n      } else {\n        string1 = string1.toLowerCase();\n        string2 = string2.toLowerCase();\n      }\n    }\n    return string1 === string2;\n  }\n\n  static isNonZeroRegex(evt, maxlen) {\n    let isNonZeroValue = false;\n    if (evt.length && maxlen) {\n      if (evt.length <= maxlen && /^\\d+$/.test(evt)) {\n        const regEx = /^0+$/;\n        isNonZeroValue = regEx.test(evt);\n      }\n    } else {\n      if (/^\\d+$/.test(evt)) {\n        const regEx = /^0+$/;\n        isNonZeroValue = regEx.test(evt);\n      }\n    }\n    return isNonZeroValue;\n  }\n}\n\n/**\n * @description: this function flat the nested object and return\n * Array containg object: Leve1 object.\n * @param obj\n * @param arr\n */\nexport function flatObject(obj, arr) {\n  for (let item in obj) {\n    if (typeof obj[item] === 'object' && obj[item].length > 0) {\n      flatObject(obj[item], arr);\n    } else {\n      if (!Array.isArray(obj[item])) {\n        arr.push(obj[item]);\n      }\n    }\n  }\n  return arr;\n}\n\n/**\n * check if object properties is equal\n */\n\nexport function isEquivalent(a, b) {\n  // Create arrays of property names\n  const aProps = Object.getOwnPropertyNames(a);\n  const bProps = Object.getOwnPropertyNames(b);\n\n  // If number of properties is different,\n  // objects are not equivalent\n  if (aProps.length !== bProps.length) {\n    return false;\n  }\n\n  for (let i = 0; i < aProps.length; i++) {\n    const propName = aProps[i];\n\n    // If values of same property are not equal,\n    // objects are not equivalent\n    if (a[propName] !== b[propName]) {\n      return false;\n    }\n  }\n\n  // If we made it this far, objects\n  // are considered equivalent\n  return true;\n}\n","/**\n * Created by akgupta on 12/14/18.\n */\n\nimport {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChildren,\n    SimpleChange,\n    ElementRef,\n    ViewChild,\n    AfterViewChecked\n} from '@angular/core';\nimport {FilterComponent} from '../filter/filter.component';\nimport {OWL_DATE_TIME_FORMATS} from 'ng-pick-datetime';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {TranslateService} from '@ngx-translate/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {equalIgnoreCase} from '../utils';\nimport {Observable} from 'rxjs';\nimport {FormControl} from '@angular/forms';\nimport {map, startWith} from 'rxjs/operators';\nimport {WDTSUtility} from '../utils/input-validation-utils';\n\nexport const MY_CUSTOM_FORMATS = {\n    fullPickerInput: {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: false\n    },\n    datePickerInput: {year: 'numeric', month: 'short', day: 'numeric', hour12: false},\n    timePickerInput: {hour: 'numeric', minute: 'numeric', hour12: false},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n};\n\n@Component({\n    selector: 'app-tables',\n    templateUrl: './app-tables.component.html',\n    styleUrls: ['./app-tables.component.scss'],\n    providers: [\n        {provide: OWL_DATE_TIME_FORMATS, useValue: MY_CUSTOM_FORMATS}\n    ],\n    animations: [\n        trigger('detailExpand', [\n            state('collapsed', style({height: '0px', minHeight: '0', display: 'none'})),\n            state('expanded', style({height: '*'})),\n            transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n        ]),\n    ]\n})\n\nexport class AppTablesComponent implements OnInit, OnChanges, AfterViewChecked {\n    @ViewChild('input01') input01: ElementRef;\n    @ViewChild('input02') input02: ElementRef;\n    @ViewChild('input03') input03: ElementRef;\n    @ViewChild('input04') input04: ElementRef;\n    @ViewChild('domdateTime4') domdateTime4;\n    rowHeader = [];\n    isCheckedAll = false;\n    sortObj = {\n        active: '',\n        sortField: '',\n        sortOrder: ''\n    };\n    selectedFilter = {};\n    perPageOption = [10, 20, 30, 50, 100];\n    perPageLimit;\n    isFilterOpen = false;\n    loading = false;\n    noDataAvailable = false;\n    bulkUpdateActive = false;\n    fromTime: Date;\n    toTime: Date;\n    toMinTime: Date;\n    toMaxTime: Date;\n    fromToFilter = [];\n    fromTimeArr = [];\n    toTimeArr = [];\n    promoFromDate: Date;\n    promoToDate: Date;\n    minStartTime: Date;\n    valueTextAutofill;\n    isDblClicked = false;\n    indexDblClicked: number;\n    changedLabel: string;\n    editedCol: string;\n    editableColumnWidth = false;\n    disableFilterButton = true;\n    headerSelected: string;\n    expandedElement;\n    clearFilterFlag;\n\n    @ViewChildren(FilterComponent) filterComponents: QueryList<FilterComponent>;\n\n    @Input() tableRows = [];\n    @Input() tableHeaders = [];\n    @Input() totalRecords = -1;\n    @Input() filterOptions = [];\n    @Input() editableTable = false;\n    @Input() tableTitle = 'application.app.ALERTS_LABELS.ALERTS';\n    @Input() isPitClicked = false;\n    @Input() alternateTitle ?;\n    @Input() tableTitleNotRequired ?;\n    @Input() gamingDay ?;\n    @Input() nodeType: string;\n    @Input() tabName: string;\n    @Input() description: string;\n    @Input() playerPositions: string;\n    @Input() hidePagination: boolean;\n    @Input() tableExpandableRows = [];\n    @Input() hideFilters: boolean;\n    @Input() showFilters: boolean;\n    @Input() inputStart: number;\n    @Input() inputCurrentPage: number;\n    @Input() inputLimit: number;\n    @Output() checkAll = new EventEmitter();\n    @Output() checkBoxEvent = new EventEmitter();\n    @Output() checkBoxAllEvent = new EventEmitter();\n    @Output() node = new EventEmitter();\n    @Output() filter = new EventEmitter();\n    @Output() filterChange = new EventEmitter();\n    @Output() pagination = new EventEmitter();\n    @Output() sort = new EventEmitter();\n    math = Math;\n    deletePPId;\n    textAutofillControl = new FormControl();\n    options: string[];\n    filteredOptionsAutofillControl: Observable<string[]>;\n\n    constructor(public snackBar: MatSnackBar, public translate: TranslateService) {\n        // this.perPageLimit = this.perPageOption[0];\n    }\n\n    ngOnInit() {\n        if (this.tableHeaders) {\n            this.setRowHeaders();\n        }\n        if (this.filterOptions) {\n            this.setSelectedFilters();\n        }\n        this.filteredOptionsAutofillControl = this.textAutofillControl.valueChanges\n            .pipe(\n                startWith(''),\n                map(value => this._filter(value))\n            );\n    }\n\n    ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\n        this.isCheckedAll = false;\n        // If condition is for GR-2846: which shows the loader while API request, once we get response loader will be hidden.\n        if (changes && changes.tableRows && (changes.tableRows.currentValue !== changes.tableRows.previousValue)) {\n            this.isCheckedAll = false;\n            if (typeof this.totalRecords === 'undefined') {\n                this.loading = true;\n            } else if (this.totalRecords === 0) {\n                this.noDataAvailable = true;\n                this.loading = false;\n            } else {\n                this.noDataAvailable = this.totalRecords === 0;\n                this.loading = this.tableRows && this.tableRows.length === 0 && !this.noDataAvailable;\n\n                if (this.tableHeaders && (!this.rowHeader || this.rowHeader.length === 0 || this.rowHeader.length !== this.tableHeaders.length)) {\n                    this.tableHeaders.map((item) => {\n                        if (this.rowHeader.indexOf(item.title) === -1) {\n                            this.rowHeader.push(item.title);\n                        }\n                    });\n                }\n                this.updateRowStatus();\n                this.setSelectedFilters();\n            }\n        }\n    }\n\n    private _filter(value: string): string[] {\n        const filterValue = value.toString().toLowerCase();\n        if (this.options) {\n            return this.options.filter(option => option.toString().toLowerCase().includes(filterValue));\n        }\n    }\n\n    checkForDisable(event) {\n        let isChanged = false;\n        if (this.textAutofillControl.value && this.textAutofillControl.value !== '') {\n            this.disableFilterButton = false;\n        }\n        if (!event || event.length === 0) {\n            this.deletePPId = true;\n            delete this.selectedFilter['ccasIds'];\n            this.valueTextAutofill = '';\n            isChanged = true;\n        }\n        if (isChanged) {\n            this.filterChange.emit(this.selectedFilter);\n        }\n    }\n\n    updateRowStatus() {\n        if (this.tableRows && this.tableRows.length) {\n            this.tableRows.map((node) => {\n                node.checked = this.isCheckedAll;\n                if (typeof node.alertSeverity === 'undefined') {\n                    node.alertSeverity = 'NONE';\n                }\n            });\n        }\n    }\n\n    setRowHeaders() {\n        this.rowHeader = [];\n        this.tableHeaders.map((item) => {\n            if (item.title) {\n                if (this.rowHeader.indexOf(item.title) === -1) {\n                    this.rowHeader.push(item.title);\n                }\n\n            }\n            if (item.sortFirst) {\n                this.sortObj = {\n                    active: item.title,\n                    sortField: item.title,\n                    sortOrder: item.sortOrder || 'asc'\n                };\n            }\n            if (item.permission === undefined || item.permission === null) {\n                item.permission = true;\n            }\n        });\n    }\n\n    setSelectedFilters() {\n        this.filterOptions.map((filter) => {\n            if (filter.selectedOptions.length && !this.clearFilterFlag) {\n                this.selectedFilter[filter.column] = filter.selectedOptions;\n                this.disableFilterButton = false;\n                if (filter.column === 'minStartTime' && !this.minStartTime) {\n                    this.minStartTime = new Date(filter.selectedOptions);\n                }\n                if (!this.deletePPId && filter.column.toLowerCase() === 'ccasids') {\n                    this.valueTextAutofill = filter.selectedOptions;\n                }\n            }\n        });\n        this.filterOptions = JSON.parse(JSON.stringify(this.filterOptions));\n        if (this.filterOptions && this.filterOptions.length > 0) {\n            if (this.filterOptions.find(o => o.column.toLowerCase() === 'ccasids')) {\n                this.options = this.filterOptions.find(o => o.column.toLowerCase() === 'ccasids').options;\n                this.valueTextAutofill = this.filterOptions.find(ob => ob.column=='ccasIds').selectedOptions\n            }\n        }\n    }\n\n    checkAllRows(): void {\n        const freezedRows = this.tableRows.filter(elm => {\n            return ( elm['isDisable'] && elm['isDisable'] === true );\n        });\n        if (freezedRows.length === this.tableRows.length) {\n            return;\n        } else {\n            this.isCheckedAll = !this.isCheckedAll;\n            this.bulkUpdateActive = this.isCheckedAll;\n            this.tableRows.map((node) => {\n                node.checked = this.isCheckedAll;\n            });\n            this.checkAll.emit(this.tableRows);\n            this.checkBoxAllEvent.emit(this.isCheckedAll);\n        }\n    }\n\n    bulkCheckBoxClickEvt(e): boolean {\n        const freezedRows = this.tableRows.filter(elm => {\n            return ( elm['isDisable'] && elm['isDisable'] === true );\n        });\n        if (freezedRows.length === this.tableRows.length) {\n            this.unCheckAllRows();\n            e.preventDefault();\n            return false;\n        }\n        /* else {this.checkAllRows();}*/\n    }\n\n    unCheckAllRows(): void {\n        this.isCheckedAll = false;\n        this.bulkUpdateActive = this.isCheckedAll;\n        this.tableRows.map((node) => {\n            node.checked = this.isCheckedAll;\n        });\n        this.checkBoxAllEvent.emit(this.isCheckedAll);\n    }\n\n    updateEventObj(obj) {\n        if (obj && obj.isDisable === true) {\n            return;\n        } else {\n            this.node.emit(obj);\n        }\n    }\n\n    sortData(obj) {\n        this.resetValues();\n        this.editableColumnWidth = false;\n        if (obj.active && obj.direction) {\n            this.sortObj = obj;\n            this.sortObj.sortOrder = obj.direction;\n            this.sortObj.sortField = obj.active;\n        }\n        this.sort.emit(obj);\n    }\n\n    updateFilter(obj) {\n        this.disableFilterButton = false;\n        this.selectedFilter[obj.columnName] = obj.selectedOption;\n        this.filterChange.emit(this.selectedFilter);\n    }\n\n    applyFilter() {\n        this.loading = true;\n        this.clearFilterFlag = false;\n        // this.disableFilterButton = true;\n        const obj = {\n            selectedFilter: this.selectedFilter,\n            state: 'apply'\n        };\n        if (this.fromToFilter.length) {\n            if (this.fromToFilter[0] && this.fromToFilter[0] !== null) {\n                obj.selectedFilter['fromDate'] = new Date(this.fromToFilter[0]).toISOString();\n            }\n            if (this.fromToFilter[1] && this.fromToFilter[1] !== null) {\n                obj.selectedFilter['toDate'] = new Date(this.fromToFilter[1]).toISOString();\n            }\n        }\n        /*From Time Filter*/\n        if (this.fromTime && this.fromTime !== null) {\n            this.fromTimeArr = new Date(this.fromTime).toTimeString().split(':');\n            obj.selectedFilter['minStartTime'] = this.fromTimeArr[0] + ':' + this.fromTimeArr[1];\n        }\n        /*To Time Filter*/\n        if (this.toTime && this.toTime !== null) {\n            this.toTimeArr = new Date(this.toTime).toTimeString().split(':');\n            obj.selectedFilter['maxStartTime'] = this.toTimeArr[0] + ':' + this.toTimeArr[1];\n        }\n        if (this.promoFromDate && this.promoFromDate !== null) {\n            obj.selectedFilter['fromDate'] = new Date(this.promoFromDate).toISOString();\n        }\n\n        if (this.promoToDate && this.promoToDate !== null) {\n            obj.selectedFilter['toDate'] = new Date(this.promoToDate).toISOString();\n        }\n\n        if (this.valueTextAutofill && this.valueTextAutofill !== null) {\n            obj.selectedFilter['ccasIds'] = this.valueTextAutofill;\n        }\n\n        if (this.minStartTime && this.minStartTime !== null) {\n            obj.selectedFilter['minStartTime'] = this.timeForLocalGamingDay(this.minStartTime).toISOString();\n        }\n        this.filter.emit(obj);\n    }\n\n    timeForLocalGamingDay(time): Date {\n        let localGamingDay;\n        if (this.gamingDay) {\n            localGamingDay = this.gamingDay.toString();\n        }\n\n        const gamingDayAry = localGamingDay.split('-');\n        return new Date(Number(gamingDayAry[0]), Number(gamingDayAry[1]) - 1, Number(gamingDayAry[2]),\n            time.getHours(), time.getMinutes());\n    }\n\n    clearFilter() {\n        this.clearFilterFlag = true;\n        this.loading = true;\n        this.noDataAvailable = false;\n        this.disableFilterButton = true;\n        this.fromToFilter = [];\n        this.selectedFilter = {};\n        this.filter.emit({\n            selectedFilter: [],\n            state: 'clear'\n        });\n        // @ts-ignore\n        this.promoFromDate = '';\n        // @ts-ignore\n        this.promoToDate = '';\n        // @ts-ignore\n        this.valueTextAutofill = '';\n        // @ts-ignore\n        this.minStartTime = '';\n        // @ts-ignore\n        this.fromTime = '';\n        // @ts-ignore\n        this.toTime = '';\n        requestAnimationFrame(() => {\n            this.filterComponents.forEach(filterComponent => {\n                filterComponent.options = filterComponent.filterConfigOption.selectedOptions;\n            });\n        });\n    }\n\n    updatePagination(obj) {\n        this.inputStart = obj.start;\n        this.inputCurrentPage = obj.currentPage;\n        this.loading = true;\n        this.inputLimit = obj.limit;\n        this.perPageLimit = obj.limit;\n        this.unCheckAllRows();\n        this.pagination.emit(obj);\n    }\n\n    bulkStatusUpdate(status) {\n        const obj = {obj: [], status: status, type: 'bulk-update'};\n        this.tableRows.forEach((item) => {\n            if (item.checked) {\n                obj.obj.push(item);\n            }\n        });\n        this.unCheckAllRows();\n        this.node.emit(obj);\n    }\n\n    updateCheckedStatus(isDisable, _index, elem) {\n        if (isDisable) {\n            return;\n        }\n        requestAnimationFrame(() => {\n            if (!elem.checked) {\n                elem.checked = true;\n                this.bulkUpdateActive = true;\n                this.isCheckedAll = true;\n                for (let i = 0; i < this.tableRows.length; i++) {\n                    if (!this.tableRows[i].checked) {\n                        this.isCheckedAll = false;\n                        break;\n                    }\n                }\n            } else {\n                this.isCheckedAll = false;\n                elem.checked = false;\n                this.bulkUpdateActive = false;\n                for (let i = 0; i < this.tableRows.length; i++) {\n                    if (this.tableRows[i].checked) {\n                        this.bulkUpdateActive = true;\n                        break;\n                    }\n                }\n            }\n            if (!elem['index']) {\n                elem['index'] = _index;\n            }\n            this.checkBoxEvent.emit(elem);\n        });\n    }\n\n    cancelUpdate(elem): void {\n        if (elem.hasOwnProperty('isEdited')) {\n            delete elem.isEdited;\n        }\n        this.resetValues();\n    }\n\n    resetValues() {\n        this.headerSelected = '';\n        this.isDblClicked = false;\n        this.indexDblClicked = -1;\n        this.editedCol = '';\n        this.editableColumnWidth = !this.editableColumnWidth;\n    }\n\n    getLabel(oldName, value) {\n        this.changedLabel = this.trimWhiteSpace(value);\n    }\n\n    labelDblClicked(isDisable, index, element, header, col?: string) {\n        const headerType = header.type;\n        if (isDisable) {\n            return false;\n        }\n        if (this.editedCol && this.indexDblClicked) {\n            const colAlreadyEdited = this.tableRows[this.indexDblClicked];\n            if (colAlreadyEdited.hasOwnProperty('isEdited')) {\n                delete colAlreadyEdited.isEdited;\n            }\n        }\n        this.headerSelected = headerType;\n        this.isDblClicked = true;\n        this.indexDblClicked = index;\n        this.editedCol = col;\n        element.isEdited = true;\n        this.editableColumnWidth = !this.editableColumnWidth;\n        if (col === 'shortName') {\n            window.setTimeout(() => {\n                this.input01.nativeElement.focus();\n            });\n        } else if (col === 'label') {\n            window.setTimeout(() => {\n                this.input02.nativeElement.focus();\n            });\n        } else if (header.validation) {\n            window.setTimeout(() => {\n                this.input04.nativeElement.focus();\n            });\n        } else {\n            window.setTimeout(() => {\n                this.input03.nativeElement.focus();\n            });\n        }\n    }\n\n    updateLabel(elem, col?: string) {\n        this.cancelUpdate(elem);\n        if (col === 'name' || col === 'shortName' || col === 'host' || col === 'label') {\n            if (this.changedLabel !== '') {\n                this.updateEventObj({\n                    type: 'changeLabel', obj: {\n                        changedLabel: this.changedLabel,\n                        elem: elem,\n                        column: col\n                    }\n                });\n            } else {\n                this.throwValueError(col);\n            }\n        } else {\n            this.updateEventObj({\n                type: 'changeLabel', obj: {\n                    changedLabel: this.changedLabel,\n                    elem: elem,\n                    column: col\n                }\n            });\n        }\n    }\n\n    throwValueError(col) {\n        if (col === 'name' || col === 'shortName' || col === 'host' || col === 'label') {\n            this.snackBar.open(this.translate.instant('INPUT_CANNOT_BE_BLANK'), '', {\n                duration: 3000,\n                horizontalPosition: 'right',\n                panelClass: 'snack__info'\n            });\n        }\n    }\n\n    setPath(colValue) {\n        const path = colValue.replace('[', '').replace(']', '');\n        const apath = path.split(',');\n        let absolutePath = '';\n        for (let i = apath.length - 1; i >= 0; i--) {\n            absolutePath = absolutePath + '/' + apath[i];\n        }\n        return absolutePath;\n    }\n\n    getText(value) {\n        let textValue;\n        if (typeof value === 'undefined' || value === '') {\n            textValue = '--';\n        } else {\n            textValue = value;\n        }\n        return textValue;\n    }\n\n    isUndefinedValue(value) {\n        return typeof value === 'undefined';\n    }\n\n    trimWhiteSpace(x): string {\n        return x.replace(/^\\s+|\\s+$/gm, '');\n    }\n\n    numberFormatterRequired(col): boolean {\n        let needsFormatter = false;\n        if (col === 'chipsetId' || col === 'casinoSiteId' || col === 'gamingCompanyId') {\n        } else {\n            needsFormatter = true;\n        }\n        return needsFormatter;\n    }\n\n    validateInputs(event, field) {\n        switch (field) {\n            case 'fromTime':\n                this.toMinTime = new Date(this.fromTime);\n                this.toMinTime.setTime(this.toMinTime.getTime() + 60 * 1000);\n                this.toMaxTime = new Date();\n                this.toMaxTime.setHours(24, 0, 0, 0);\n                this.toTime = this.fromTime;\n                break;\n        }\n    }\n\n    /* Helper function(s) */\n    isArrayEmpty(_array) {\n        let retVal = true;\n        if (Array.isArray(_array) && typeof _array !== 'undefined'\n            && _array !== null && _array.length !== null && _array.length > 0) {\n            retVal = false;\n        }\n        return retVal;\n    }\n\n    getRoundedNum(value) {\n        const reqValue = parseFloat(value);\n        return Math.round(reqValue);\n    }\n\n    concatEmpId(headerRowElem, empCode) {\n        let retval = headerRowElem;\n        if (this.isUndefinedValue(empCode)) {\n            retval = headerRowElem;\n        } else {\n            retval = headerRowElem + ' (' + empCode + ')';\n        }\n        return retval;\n    }\n\n    /* Check for userId: 1  firstName: \"PP\"  lastName: \"Master\"  userName: \"ppmaster\"  employeeNumber: \"0\"*/\n    isPPMasterRow(ELEM) {\n        if (ELEM) {\n            return (ELEM.employeeNumber === '0' && equalIgnoreCase(ELEM.userName, 'ppmaster', true, true) );\n        } else {\n            return false;\n        }\n    }\n\n    getCustomTranslatedText(text: string, separator) {\n        let temp;\n        if (!text) {\n            return '';\n        }\n        if (text.indexOf(separator) !== -1) {\n            temp = text.split(separator);\n        } else {\n            return this.translate.instant(text.toUpperCase());\n        }\n        if (temp) {\n            for (let i = 0; i < temp.length; i++) {\n                temp[i] = this.translate.instant(temp[i]);\n            }\n        }\n        return temp ? temp.join(separator) : '';\n    }\n\n    loadDefaultImage(event) {\n        event.target.src = '/assets/images/player.png';\n    }\n\n    restrictNumberField(_evt, maxLen?, val?) {\n        return (WDTSUtility.validateNumberField(_evt, undefined, _evt.currentTarget.value));\n    }\n\n    validateInputsTime() {\n        if (this.domdateTime4 && this.domdateTime4.nativeElement.value.indexOf('24:') != -1) {\n            this.domdateTime4.nativeElement.value = this.domdateTime4.nativeElement.value.replace('24:', '00:');\n        }\n    }\n\n    ngAfterViewChecked() {\n        if (this.domdateTime4 && this.domdateTime4.nativeElement.value.indexOf('24:') != -1) {\n            this.domdateTime4.nativeElement.value = this.domdateTime4.nativeElement.value.replace('24:', '00:');\n        }\n    }\n\n    getAnonymousTranslatedVal() {\n        return this.translate.instant('ANONYMOUS');\n    }\n}\n","export function tokenGetter() {\n  const authValues: any = JSON.parse(localStorage.getItem('authValues'));\n  if (authValues) {\n    return localStorage.getItem(authValues.jwtTokenKey);\n  }\n}\nexport function equalIgnoreCase(string1, string2, ignoreCase, useLocale) {\n    if (ignoreCase) {\n        if (useLocale) {\n            string1 = string1.toLocaleLowerCase();\n            string2 = string2.toLocaleLowerCase();\n        }\n        else {\n            string1 = string1.toLowerCase();\n            string2 = string2.toLowerCase();\n        }\n    }\n    return string1 === string2;\n}\n","import {EventEmitter, Injectable} from '@angular/core';\nimport {TableFiltersInterface} from '../interface/table-filters.interface';\n\n@Injectable()\nexport class AppTablesService {\n    reqObj = {\n        observe: 'response',\n        params: {\n            start: 1,\n            limit: 10\n        }\n    };\n\n    initPagination = new EventEmitter();\n\n    filterConfigOptions: Array<TableFiltersInterface> = [];\n\n    clearPreFilters() {\n        for (const key in this.reqObj.params) {\n            if (this.reqObj.params.hasOwnProperty(key) &&\n                ['sortOrder', 'sortField', 'start', 'limit', 'reqFilter'].indexOf(key) === -1) {\n                delete this.reqObj.params[key];\n            }\n        }\n    }\n\n    clearFilter() {\n        this.clearPreFilters();\n        return this.filterConfigOptions.map((config) => {\n            config.selectedOptions = [];\n            return config;\n        });\n    }\n\n    setFilterOptions(options) {\n        for (const key in options) {\n            if (options.hasOwnProperty(key)) {\n                this.filterConfigOptions = this.filterConfigOptions.map((config) => {\n                    if (config.column === key) {\n                        config.selectedOptions = [...options[key]];\n                    }\n                    return config;\n                });\n                this.reqObj.params[key] = options[key] instanceof Array ? options[key].join(',') : options[key];\n            }\n        }\n        this.clearEmptyParams();\n    }\n\n    clearEmptyParams() {\n        for (const key in this.reqObj.params) {\n            if (this.reqObj.params.hasOwnProperty(key) &&\n                ['sortOrder', 'sortField', 'start', 'limit', 'reqFilter'].indexOf(key) === -1 &&\n                !this.reqObj.params[key].length) {\n                delete this.reqObj.params[key];\n            }\n        }\n    }\n\n    updateFilter(obj) {\n        switch (obj.state) {\n            case 'apply':\n                this.setFilterOptions(obj.selectedFilter);\n                break;\n            case 'clear':\n                this.clearFilter();\n                break;\n        }\n        this.initPagination.next();\n    }\n}\n","import {Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output} from '@angular/core';\nimport {AppTablesService} from '../app-tables/app-tables.service';\nimport {UtilityService} from '../services/utility.service';\n\n@Component({\n    selector: 'app-pagination',\n    templateUrl: './pagination.component.html',\n    styleUrls: ['./pagination.component.scss']\n})\nexport class PaginationComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() perPageOption: Array<number>;\n    @Input() totalRecord: number;\n    @Input() inputStart: number;\n    @Input() inputCurrentPage: number;\n    @Input() inputLimit: number;\n    @Input() isTableGrid ?= false;\n    @Output() EMIT_PAGINATION = new EventEmitter<any>();\n\n    start = 1;\n    limit = 10;\n    currentPage = 1;\n    totalPage = 1;\n    paginationSubscriber;\n\n    constructor(\n        private tableService: AppTablesService,\n        private utilityService: UtilityService\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.start =  (this.inputStart) ? this.inputStart : this.start;\n        this.currentPage = (this.inputCurrentPage) ? this.inputCurrentPage : this.currentPage;\n        this.limit = this.inputLimit ? this.inputLimit : this.isTableGrid ? 5 : 10;\n        this.utilityService.updatePageNumbers.subscribe(() => {\n            this.firstPage();\n        });\n        this.handleSubscription();\n    }\n\n    ngOnChanges() {\n        this.limit = this.inputLimit ? this.inputLimit : this.isTableGrid ? 5 : this.limit;\n        this.totalPage = Math.ceil(this.totalRecord / this.limit) || 1;\n    }\n\n    handleSubscription() {\n        this.paginationSubscriber = this.tableService.initPagination\n            .subscribe(() => {\n                this.firstPage();\n            });\n    }\n\n    nextPage(): void {\n        this.start = this.start + this.limit;\n        this.currentPage = this.currentPage + 1;\n        this.emitPagination();\n    }\n\n    previousPage(): void {\n        this.start = this.start - this.limit;\n        this.currentPage = this.currentPage - 1;\n        this.emitPagination();\n    }\n\n    firstPage(): void {\n        this.start = 1;\n        this.currentPage = 1;\n        this.emitPagination();\n    }\n\n    lastPage(): void {\n        this.start = (Math.ceil(this.totalRecord / this.limit) - 1) * this.limit + 1;\n        this.currentPage = Math.ceil(this.totalRecord / this.limit);\n        this.emitPagination();\n    }\n\n    changePageLimit(limit): void {\n        this.limit = limit;\n        this.currentPage = 1;\n        this.start = 1;\n        this.totalPage = Math.ceil(this.totalRecord / this.limit);\n        this.emitPagination();\n    }\n\n    goToAnyPage(event, currntPage): void {\n\n\n        if (event.type === 'keydown' && event.keyCode === 13) {\n            if (this.currentPage > this.totalPage) {\n                this.start = (this.totalPage - 1) * this.limit + 1;\n                this.currentPage = this.totalPage;\n                this.emitPagination();\n            } else {\n                if (currntPage > 0) {\n                    this.start = (currntPage - 1) * this.limit + 1;\n                    this.currentPage = parseInt(currntPage, 10);\n                } else {\n                    this.start = 1;\n                    this.currentPage = 1;\n                }\n                this.emitPagination();\n            }\n        } else if (event.type === 'blur') {\n            if (this.currentPage > this.totalPage) {\n                this.start = (this.totalPage - 1) * this.limit + 1;\n                this.currentPage = this.totalPage;\n                this.emitPagination();\n            } else {\n                if (currntPage > 0) {\n                    this.start = (currntPage - 1) * this.limit + 1;\n                    this.currentPage = parseInt(currntPage, 10);\n                } else {\n                    this.start = 1;\n                    this.currentPage = 1;\n                }\n                this.emitPagination();\n            }\n        }\n    }\n\n    emitPagination(): void {\n        const paginationObj = {start: this.start, limit: this.limit, currentPage: this.currentPage};\n        this.EMIT_PAGINATION.emit(paginationObj);\n    }\n\n    ngOnDestroy(): void {\n        this.paginationSubscriber.unsubscribe();\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {AppTablesComponent} from './app-tables.component';\nimport {MaterialComponentModule} from '../material-component/material-component.module';\nimport {CommonModule} from '@angular/common';\nimport {CommonTranslationModule} from '../common-translation/common-translation.module';\nimport {FilterComponent} from '../filter/filter.component';\nimport {PaginationComponent} from '../pagination/pagination.component';\nimport {OwlDateTimeModule, OwlNativeDateTimeModule} from 'ng-pick-datetime';\nimport {AppTablesService} from './app-tables.service';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSortModule } from '@angular/material/sort';\nimport {WdtsSpecialCharDirective} from '../directives/wdts-special-char.directive';\nimport {WdtsSpecialCharPipe} from '../pipes/wdts-special-char.pipe';\nimport {AmountFormatPipe} from \"../pipes/amount-format.pipe\";\n\n@NgModule({\n    imports: [\n        MaterialComponentModule,\n        CommonModule,\n        CommonTranslationModule,\n        OwlDateTimeModule,\n        OwlNativeDateTimeModule,\n        MatProgressSpinnerModule,\n        MatSortModule\n    ],\n    declarations: [\n        AppTablesComponent,\n        FilterComponent,\n        PaginationComponent\n    ],\n    exports: [\n        AppTablesComponent,\n        FilterComponent,\n        PaginationComponent\n    ],\n    providers: [AppTablesService]\n})\nexport class AppTablesModule {\n\n}\n","/*\n * Topology Drag-Drop Item database, it can build a tree structured Json object.\n * Each node in Json object represents a drag drop item or a category(different item may be nested).\n * If a node is a category(different item may be nested), it has children items and new items\n * can be added under the category(different item may be nested).\n */\nimport {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\n/*\n * Node for drag drop item\n */\nexport class DragDropItemNode {\n    children: DragDropItemNode[];\n    item: string;\n    dataSourceName: string;\n    nodeId: number;\n    parentName: string;\n}\n\n/* Flat drag drop item node with expandable and level information */\nexport class DragDropItemFlatNode {\n    item: string;\n    level: number;\n    expandable: boolean;\n    dataSourceName: string;\n    nodeId: number;\n    parentName: string;\n}\n\nconst ASSIGNEDDATA = new Map();\nASSIGNEDDATA.set(3, 4);\n\n@Injectable()\nexport class TreeDragDropItemDataBase {\n    dataChangeAssigned = new BehaviorSubject<DragDropItemNode[]>([]);\n    dataChangeUnassigned = new BehaviorSubject<DragDropItemNode[]>([]);\n    dataChangeAG = new BehaviorSubject<DragDropItemNode[]>([]);\n    dataChangeVG = new BehaviorSubject<DragDropItemNode[]>([]);\n    data(node: DragDropItemNode): DragDropItemNode[] {\n        // console.log('data::', node.dataSourceName);\n        if (node.dataSourceName === 'assignednode') {\n            return this.dataChangeAssigned.value;\n        } else if (node.dataSourceName === 'unassignednode') {\n            return this.dataChangeUnassigned.value;\n        } else if ( node.dataSourceName === 'accessgroup') {\n            return this.dataChangeAG.value;\n        } else if ( node.dataSourceName === 'virtualgroup') {\n            return this.dataChangeVG.value;\n        }\n    }\n\n    /**\n     * if tree.expandAll called and get an erro of dataNodes we need to set\n        this.treeControl.dataNodes = data; in all four group.\n     * @param data\n     * @param node\n     */\n    dispatchNextData(data: DragDropItemNode[], node: DragDropItemNode) {\n        // console.log('dispatchNextData::', data, node.dataSourceName);\n        if ( node.dataSourceName) {\n            if (node.dataSourceName === 'assignednode') {\n                this.dataChangeAssigned.next(data);\n            } else if (node.dataSourceName === 'unassignednode') {\n                this.dataChangeUnassigned.next(data);\n            } else if ( node.dataSourceName === 'accessgroup') {\n                this.dataChangeAG.next(data);\n            } else if ( node.dataSourceName === 'virtualgroup') {\n                this.dataChangeVG.next(data);\n            }\n        }\n    }\n\n    constructor() {\n        this.initialize();\n    }\n\n    initialize() {\n        // Build the tree nodes from Json object. The result is a list of `DragDropItemNode` with nested\n        //     file node as children.\n        const dataAssigned = this.buildFileTree(ASSIGNEDDATA, 0, 'assignednode');\n        this.dataChangeAssigned.next(dataAssigned);\n\n    }\n\n    /*\n     * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n     * The return value is the list of `DragDropItemNode`.\n     */\n    buildFileTree(obj: object, level: number, dataSourceName: string): DragDropItemNode[] {\n        return Object.keys(obj).reduce<DragDropItemNode[]>((accumulator, key) => {\n            const value = obj[key];\n            const node = new DragDropItemNode();\n            node.item = key;\n            node.dataSourceName = dataSourceName;\n            if (value != null) {\n                if (typeof value === 'object') {\n                    node.children = this.buildFileTree(value, level + 1, node.dataSourceName);\n                } else {\n                    node.item = value;\n                }\n            }\n\n            return accumulator.concat(node);\n        }, []);\n    }\n\n    /* Add an item to drag drop list */\n    insertItem(parent: DragDropItemNode, name: string): DragDropItemNode {\n        if (!parent.children) {\n            parent.children = [];\n        }\n        const newItem = { item: name, dataSourceName: parent.dataSourceName } as DragDropItemNode;\n        parent.children.push(newItem);\n        this.dispatchNextData(this.data(newItem), newItem);\n        return newItem;\n    }\n\n    insertItemAbove(node: DragDropItemNode, name: string): DragDropItemNode {\n        const parentNode = this.getParentFromNodes(node);\n        const newItem = { item: name, dataSourceName: node.dataSourceName } as DragDropItemNode;\n        if (parentNode != null) {\n            parentNode.children.splice(parentNode.children.indexOf(node), 0, newItem);\n        } else {\n            this.data(node).splice(this.data(node).indexOf(node), 0, newItem);\n        }\n        this.dispatchNextData(this.data(newItem), newItem);\n        return newItem;\n    }\n\n    insertItemBelow(node: DragDropItemNode, name: string): DragDropItemNode {\n        const parentNode = this.getParentFromNodes(node);\n        const newItem = { item: name, dataSourceName: node.dataSourceName } as DragDropItemNode;\n        if (parentNode != null) {\n            parentNode.children.splice(parentNode.children.indexOf(node) + 1, 0, newItem);\n        } else {\n            this.data(node).splice(this.data(node).indexOf(node) + 1, 0, newItem);\n        }\n        this.dispatchNextData(this.data(newItem), newItem);\n        return newItem;\n    }\n\n    getParentFromNodes(node: DragDropItemNode): DragDropItemNode {\n        for (let i = 0; i < this.data(node).length; ++i) {\n            const currentRoot = this.data(node)[i];\n            const parent = this.getParent(currentRoot, node);\n            if (parent != null) {\n                return parent;\n            }\n        }\n        return null;\n    }\n\n    getParent(currentRoot: DragDropItemNode, node: DragDropItemNode): DragDropItemNode {\n        if (currentRoot.children && currentRoot.children.length > 0) {\n            for (let i = 0; i < currentRoot.children.length; ++i) {\n                const child = currentRoot.children[i];\n                if (child === node) {\n                    return currentRoot;\n                } else if (child.children && child.children.length > 0) {\n                    const parent = this.getParent(child, node);\n                    if (parent != null) {\n                        return parent;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    updateItem(node: DragDropItemNode, name: string) {\n        node.item = name;\n        node.dataSourceName = node.dataSourceName\n        this.dispatchNextData(this.data(node), node);\n    }\n\n    deleteItem(node: DragDropItemNode) {\n        this.deleteNode(this.data(node), node);\n        this.dispatchNextData(this.data(node), node);\n    }\n\n    copyPasteItem(from: DragDropItemNode, to: DragDropItemNode): DragDropItemNode {\n        // console.log('in copyPasteItem to is', to, 'from is', from);\n        const newItem = this.insertItem(to, from.item);\n        if (from.children) {\n            from.children.forEach(child => {\n                this.copyPasteItem(child, newItem);\n            });\n        }\n        return newItem;\n    }\n\n    copyPasteItemAbove(from: DragDropItemNode, to: DragDropItemNode): DragDropItemNode {\n        // console.log('in copyPasteItemAbove to is', to, 'from is', from);\n        const newItem = this.insertItemAbove(to, from.item);\n        if (from.children) {\n            from.children.forEach(child => {\n                this.copyPasteItem(child, newItem);\n            });\n        }\n        return newItem;\n    }\n\n    copyPasteItemBelow(from: DragDropItemNode, to: DragDropItemNode): DragDropItemNode {\n        // console.log('in copyPasteItemBelow to is', to, 'from is', from);\n        const newItem = this.insertItemBelow(to, from.item);\n        if (from.children) {\n            from.children.forEach(child => {\n                this.copyPasteItem(child, newItem);\n            });\n        }\n        return newItem;\n    }\n\n    deleteNode(nodes: DragDropItemNode[], nodeToDelete: DragDropItemNode) {\n        const index = nodes.indexOf(nodeToDelete, 0);\n        if (index > -1) {\n            nodes.splice(index, 1);\n        } else {\n            nodes.forEach(node => {\n                if (node.children && node.children.length > 0) {\n                    this.deleteNode(node.children, nodeToDelete);\n                }\n            });\n        }\n    }\n}","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\nimport {TranslateService} from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-confirm-delete',\n  templateUrl: './confirm-delete.component.html',\n  styleUrls: ['./confirm-delete.component.scss']\n})\nexport class ConfirmDeleteComponent implements OnInit {\n  public nodeToDelete;\n  constructor(\n        public dialogRef: MatDialog,\n        @Inject(MAT_DIALOG_DATA) public data,\n        public translate: TranslateService) {\n        this.nodeToDelete = this.data.nodeToDelete;\n  }\n\n  ngOnInit() {\n  }\n\n  closeDialogBox(): void {\n      this.dialogRef.closeAll();\n  }\n}\n","import {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild, AfterViewInit} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\nimport {urls} from '../constants/urls';\nimport {HttpParams} from '@angular/common/http';\nimport { ITopologyNodes, TopologytreeService} from '../services/topologytree.service';\nimport {DragDropItemFlatNode, DragDropItemNode, TreeDragDropItemDataBase} from './topology-dragdrop-database';\nimport {TopologyService} from '../services/topology.service';\nimport {CageService} from '../services/cage.service';\nimport {CasinomanagerService} from '../services/casinomanager.service';\nimport {Router} from '@angular/router';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {FormBuilder, FormControl, Validators} from '@angular/forms';\nimport {TranslateService} from '@ngx-translate/core';\nimport {dialogSize} from '../constants/constants';\nimport {ConfirmDeleteComponent} from './confirm-delete/confirm-delete.component';\nimport {JwtHelperService} from '@auth0/angular-jwt';\n\n\n@Component({\n    selector: 'app-toplogy-tree-dragdrop',\n    templateUrl: './topology-tree-drag-drop.component.html',\n    styleUrls: ['./topology-tree-drag-drop.component.scss'],\n    providers: [TreeDragDropItemDataBase]\n})\nexport class TopologyTreeDragDropComponent implements OnInit, OnDestroy, AfterViewInit {\n    /* Map from flat node to nested node. This helps us finding the nested node to be modified */\n    flatNodeMap = new Map<DragDropItemFlatNode, DragDropItemNode>();\n    /* Map from nested node to flattened node. This helps us to keep the same object for selection */\n    nestedNodeMap = new Map<DragDropItemNode, DragDropItemFlatNode>();\n    treeControl: FlatTreeControl<DragDropItemFlatNode>;\n    treeFlattener: MatTreeFlattener<DragDropItemNode, DragDropItemFlatNode>;\n    /* Drag and drop */\n    dragNode: any;\n    dragNodeExpandOverWaitTimeMs = 300;\n    dragNodeExpandOverNode: any;\n    dragNodeExpandOverTime: number;\n    dragNodeExpandOverArea: string;\n    @ViewChild('emptyItem') emptyItem: ElementRef;\n    @Input() arrTrees: Array<any>;\n    topologyTreeConfig = urls.topologyTree;\n    assignedDataSource: MatTreeFlatDataSource<DragDropItemNode, DragDropItemFlatNode>;\n    unassignedDataSource: MatTreeFlatDataSource<DragDropItemNode, DragDropItemFlatNode>;\n    accessGroupDataSource: MatTreeFlatDataSource<DragDropItemNode, DragDropItemFlatNode>;\n    virtualGroupDataSource: MatTreeFlatDataSource<DragDropItemNode, DragDropItemFlatNode>;\n    arrNestedDataSource = [];\n    accessGroupNodesLength: number;\n    assingedDataNodes: any;\n    nodeNames: any;\n    searchText: string;\n    nodeUpdated;\n    isEditable = false;\n    nodeToEdit: string;\n    changedName: string;\n    currentClickedNode: any;\n    isGroupNameInvalid = false;\n    selectedNode: string;\n    // permissionArray;\n    // isSuperuser = false;\n    @Output() addNode = new EventEmitter();\n    @Input() permissionToAccess = false;\n    @Input() permissionToEditAG;\n\n\n\n    constructor(\n        private database: TreeDragDropItemDataBase,\n        private _router: Router,\n        private _topologyTreeService: TopologytreeService,\n        private _topologyService: TopologyService,\n        private _cageService: CageService,\n        private _casinoManagerService: CasinomanagerService,\n        public snackBar: MatSnackBar,\n        public dialog: MatDialog,\n        public fb: FormBuilder,\n        private jwtHelper: JwtHelperService,\n        private translate: TranslateService) {\n        this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl<DragDropItemFlatNode>(this.getLevel, this.isExpandable);\n        this.handleSubscribers();\n        this.addFormValidations();\n    }\n    public accessGroupForm = this.fb.group({\n    });\n    public accessGroupEditForm = this.fb.group({\n    });\n\n    ngAfterViewInit() {\n        this.treeControl.expandAll();\n    }\n\n    addFormValidations() {\n       this.accessGroupForm.addControl('groupName', new FormControl('', [Validators.required, Validators.maxLength(20)]));\n       this.accessGroupEditForm.addControl('groupParentName', new FormControl('', [Validators.required, Validators.maxLength(20)]));\n    }\n\n\n\n    ngOnInit() {\n        this.onitFunction();\n        this.treeControl.expandAll();\n    }\n    onitFunction() {\n        this._topologyService.nodeUpdated.subscribe((data) => {\n            if (data.msg === 'updateChangeLabel') {\n                this.updateTopologyNodes(data.res[0]);\n                this.updateNodeNames(data.res[0]);\n                this._getAssignedNodes();\n            }\n        });\n        if (!this._topologyService.topologyNodes) {\n            this.assignTreeObject();\n            this._setUnassignedNodes();\n            this._setAccessGroupNodes();\n            this._getAssignedNodes();\n            this._createDataSources();\n            this.databaseSubscriber();\n        } else {\n            this.assignTreeObject();\n            this.setAssignedNodes(this._topologyService.topologyNodes);\n            this.createAccessGroupNodes(this._topologyService.accessGroupNodes);\n            this.database.dataChangeUnassigned.next(this._topologyService.unAssignedNodes);\n            this.nodeNames = this._topologyService.topologyNodeNames;\n            this.databaseSubscriber();\n            this._createDataSources();\n        }\n    }\n\n    handleSubscribers() {\n        this.nodeUpdated = this._topologyService.nodeUpdated\n            .subscribe((res) => {\n                if (res.msg === 'createNode') {\n                    // this._topologyService.fetchTopologyData();\n                    // this._topologyService.initialized.subscribe((rs) => {\n                    //     this.onitFunction();\n                    // });\n                    this.addNodeToTopology(res);\n                    // this.currentClickedNode.node.item  = JSON.stringify(this.currentClickedNode.node.item);\n                    this.handleClick(this.currentClickedNode.node, this.currentClickedNode.nodeDetails);\n                }\n                if (res.msg === 'createAccessGroup') {\n                    this.addAccessGroupToTopology(res.res);\n                }\n\n            });\n    }\n    addAccessGroupToTopology(res) {\n         this._topologyService.accessGroupNodes.push(res[0]);\n        this.createAccessGroupNodes(this._topologyService.accessGroupNodes);\n    }\n    addNodeToTopology(newNode) {\n        if (!this._topologyService.topologyNodes[newNode.res[0].parentNodeId]) {\n            this._topologyService.topologyNodes[newNode.clickNode.nodeId] = newNode.res;\n            }\n        // this._topologyService.topologyNodes[newNode.res[0].parentNodeId].push(newNode.res[0]);\n        if (!this._topologyService.topologyNodeNames[newNode.res[0].nodeId]) {\n            this._topologyService.topologyNodeNames[newNode.res[0].nodeId] = newNode.res[0];\n        }\n        if (!this._topologyService.topologyNodeNames[newNode.res[0].parentNodeId].children) {\n            this._topologyService.topologyNodeNames[newNode.res[0].parentNodeId].children = [];\n        }\n        this._topologyService.topologyNodeNames[newNode.res[0].parentNodeId].children.push(newNode.res[0]);\n        const assignData = this._topologyService.topologyNodes;\n        this._topologyService.topologyNodeNames = this._topologyService.createNodeNamesObject(this._topologyService.topologyNodes);\n        this._topologyService.siteChildren = this._topologyService.getSiteChildren(this._topologyService.topologyNodeNames);\n        this.setAssignedNodes(assignData);\n        this.nodeNames = this._topologyService.topologyNodeNames;\n        this.databaseSubscriber();\n        this._createDataSources();\n        // this._getAssignedNodes();\n    }\n    updateEventObj(obj) {\n        this.addNode.emit(obj);\n    }\n\n    private assignTreeObject() {\n        this.assignedDataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.unassignedDataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.accessGroupDataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n        this.virtualGroupDataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n    }\n\n    private databaseSubscriber() {\n        this.database.dataChangeAssigned.subscribe(data => {\n            this.assignedDataSource.data = [];\n            this.assignedDataSource.data = data;\n            this.treeControl.expandAll();\n        });\n        this.database.dataChangeUnassigned.subscribe(data => {\n            this.unassignedDataSource.data = [];\n            this.unassignedDataSource.data = data;\n            this.treeControl.expandAll();\n        });\n        this.database.dataChangeAG.subscribe(data => {\n            this.accessGroupDataSource.data = [];\n            this.accessGroupDataSource.data = data;\n            this.treeControl.expandAll();\n        });\n        this.database.dataChangeAG.subscribe(data => {\n            this.virtualGroupDataSource.data = data;\n            this.treeControl.expandAll();\n        });\n    }\n\n    /*\n     * this function create data source for different group of nodes.\n     */\n    private _createDataSources() {\n        this.arrNestedDataSource['assignednode'] = this.assignedDataSource;\n        this.arrNestedDataSource['unassignednode'] = this.unassignedDataSource;\n        this.arrNestedDataSource['accessgroup'] = this.accessGroupDataSource;\n        this.arrNestedDataSource['virtualgroup'] = this.virtualGroupDataSource;\n    }\n\n    /*\n     * this function set unassigned data and create the tree for unassigned nodes.\n     */\n    private _setUnassignedNodes() {\n        const unassignedItemsArr = [];\n        if (!this._topologyService.unAssignedNodes) {\n            this._topologyTreeService.getTopologyNodeUnassigned(this.topologyTreeConfig.unassignedNondeUrl).subscribe(\n                (unassignedresponse) => {\n                    const childNodes = [];\n                    if (unassignedresponse.length > 0) {\n                        const params = new HttpParams().set('parentId', unassignedresponse[0].nodeId);\n                        this._topologyTreeService.getTopologyNodeByNodeId\n                        (this.topologyTreeConfig.topologyNodesUrls, params).subscribe((response) => {\n                            for (const item of response) {\n                                unassignedItemsArr.push(item);\n                                childNodes.push(item.name);\n                            }\n                            this._topologyService.unassignedNodesArr = unassignedItemsArr;\n                            const dataUnassigned = this.database.buildFileTree(childNodes, 0, 'unassignednode');\n                            this._topologyService.unAssignedNodes = dataUnassigned;\n                            this.database.dataChangeUnassigned.next(dataUnassigned);\n                        });\n                    }\n                }\n            );\n        } else {\n            this.database.dataChangeUnassigned.next(this._topologyService.unAssignedNodes);\n        }\n    }\n\n    /*\n     * this function set Access group data and create the tree for accessgroup nodes.\n     */\n    private _setAccessGroupNodes() {\n        if (!this._topologyService.accessGroupNodes) {\n            this._topologyService.initialized.subscribe((value) => {\n                if (value === 'nodesInitialized') {\n                    const agresponse = this._topologyService.accessGroupNodes;\n                    this.createAccessGroupNodes(agresponse);\n                }\n            });\n        } else {\n            this.createAccessGroupNodes(this._topologyService.accessGroupNodes);\n        }\n    }\n\n    private createAccessGroupNodes(agresponse) {\n        const topologyIds = new Map<string, string[]>();\n        this.accessGroupNodesLength = agresponse.length;\n        for (const ag of agresponse) {\n            if (ag.topologyNodeIds.length > 0) {\n                const childArr = [];\n                for (let i = 0, iLen = ag.topologyNodeIds.length; i < iLen; i++) {\n                    const childId = ag.topologyNodeIds[i];\n                    const childNode = this._topologyService.topologyNodeNames[childId];\n                    if (childNode) {\n                        childArr.push(childNode.name);\n                    }\n                }\n                topologyIds[ag.groupName] = childArr;\n            } else {\n                topologyIds[ag.groupName] = [];\n            }\n        }\n        const dataAG = this.database.buildFileTree(topologyIds, 0, 'accessgroup');\n        this.database.dataChangeAG.next(dataAG);\n    }\n\n    /*\n     * this funciton get the response from rest api for assigned nodes.\n     */\n    private updateTopologyNodes(node) {\n        for (const obj in this._topologyService.topologyNodes) {\n            if (this._topologyService.topologyNodes.hasOwnProperty(obj)) {\n                const topologyData = this._topologyService.topologyNodes;\n                if (topologyData[obj].length > 0) {\n                    for (let i = 0, len = this._topologyService.topologyNodes[obj].length; i < len; i++) {\n                        if (topologyData[obj].nodeId === node.nodeId) {\n                            topologyData[obj].name = node.name;\n                            topologyData[obj].shortName = node.shortName;\n                            topologyData[obj].description = node.description;\n                            if (node.type === 1000) {\n                                topologyData[obj].host = node.host;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private updateNodeNames(node) {\n        for (const key in this._topologyService.topologyNodeNames) {\n            if (parseInt(key, 10) === node.nodeId) {\n                this._topologyService.topologyNodeNames[key].name = node.name;\n                this._topologyService.topologyNodeNames[key].shortName = node.shortName;\n                this._topologyService.topologyNodeNames[key].description = node.description;\n                if (node.type === 1000) {\n                    this._topologyService.topologyNodeNames[key].host = node.host;\n                }\n            }\n        }\n    }\n\n    private _getAssignedNodes(isForSearch?: boolean, newData?: any) {\n        if (isForSearch) {\n            this.setAssignedNodes(newData, true);\n        } else {\n            this._topologyService.initialized.subscribe((value) => {\n                if (value === 'nodesInitialized') {\n                    this.nodeNames = this._topologyService.topologyNodeNames;\n                    this.setAssignedNodes(this._topologyService.topologyNodes);\n                }\n            });\n        }\n    }\n\n    private setAssignedNodes(assigndata, isForSearch?: boolean) {\n        const assignedNodesKeys = Object.keys(assigndata);\n        let treeData;\n        if (isForSearch && assignedNodesKeys.length > 0) {\n            const firstKey = Object.keys(assigndata)[0];\n            treeData = this._getflatDataToNested(assigndata, parseInt(firstKey, 10));\n            this.setTreeData(treeData, assigndata);\n        } else if (isForSearch && assignedNodesKeys.length === 0) {\n            treeData = {};\n            this.setTreeData(treeData, assigndata);\n        } else {\n            treeData = this._getflatDataToNested(assigndata);\n            this.setTreeData(treeData, assigndata);\n        }\n    }\n\n    private setTreeData(treeData, assigndata) {\n        const topologyParentAssignedGroup = new Map<string, string[]>();\n        for (let i = 0; i < treeData.length; i++) {\n            topologyParentAssignedGroup[treeData[i].nodeId] = this._getAssignedNestedNodes(treeData[i].children);\n        }\n        const dataAssignedNodes = this.database.buildFileTree(topologyParentAssignedGroup, 0, 'assignednode');\n        this.database.dataChangeAssigned.next(dataAssignedNodes);\n        this.assingedDataNodes = assigndata;\n    }\n\n    /*\n     * this function return array of nested item.\n     * param arr\n     * private\n     */\n    private _getAssignedNestedNodes(arr: ITopologyNodes []): Array<any> {\n        const arrNodes = [];\n        if (arr) {\n            for (let i = 0; i < arr.length; i++) {\n                if (arr[i] && arr[i].children && arr[i].children.length > 0) {\n                    arrNodes[arr[i]['nodeId']] = this._getAssignedNestedNodes(arr[i].children);\n                } else {\n                    arrNodes.push(arr[i]['nodeId']);\n                }\n            }\n        }\n        return arrNodes;\n    }\n\n    /*\n     * this function build the nested objects from flat object.\n     * param arr\n     * param parentid\n     */\n    private _getflatDataToNested(arr: Array<any>, parentId?: number) {\n        let output = [];\n        const nodeIdsArr = Object.keys(arr);\n        const len = nodeIdsArr.length;\n        const lastKey = parseInt(nodeIdsArr[len - 1], 10);\n        if (!parentId) {\n            output.push(arr[0][0]);\n            output = this.setParentChildren(output, arr, nodeIdsArr);\n        } else {\n            const nodesDetail = this._topologyService.topologyNodeNames;\n            output.push(nodesDetail[parentId]);\n            delete output[0].children;\n            output[0].children = arr[parentId];\n        }\n        if (output[0].children && (output[0].children).length > 0) {\n            this.setChildrenOfChildren(output[0], nodeIdsArr, arr, lastKey);\n        }\n        return output;\n    }\n\n    private setChildrenOfChildren(nodeObj, nodeIdsArr, arr, lastKey) {  // recursive function for fetching children of children\n        for (const i in nodeObj.children) {\n            if (nodeObj.children.hasOwnProperty(i) && !(nodeObj.children[i] > lastKey) &&\n                this.checkIfChildren(nodeIdsArr, nodeObj.children[i].nodeId)) {\n                nodeObj.children[i].children = arr[nodeObj.children[i].nodeId];\n                this.setChildrenOfChildren(nodeObj.children[i], nodeIdsArr, arr, lastKey);\n            }\n        }\n    }\n\n    private setParentChildren(output, arr, nodeIdsArr) {  // set children of parent\n        if (this.checkIfChildren(nodeIdsArr, output[0].nodeId)) {\n            output[0].children = arr[output[0].nodeId];\n        }\n        return output;\n    }\n\n    private checkIfChildren(nodesArr, nodeId) {  // check if node has children\n        return (nodesArr.indexOf(nodeId.toString()) > -1);\n    }\n\n\n    getLevel = (node: DragDropItemFlatNode) => node.level;\n\n    isExpandable = (node: DragDropItemFlatNode) => node.expandable;\n\n    getChildren = (node: DragDropItemNode): DragDropItemNode[] => node.children;\n\n    hasChild = (_: number, _nodeData: DragDropItemFlatNode) => _nodeData.expandable;\n\n    hasNoContent = (_: number, _nodeData: DragDropItemFlatNode) => _nodeData.item === '';\n\n    /*\n     * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n     */\n    transformer = (node: DragDropItemNode, level: number) => {\n        if (node.dataSourceName === 'accessgroup' && node.children && node.children.length > 0) {\n            for (let i = 0, iLen = node.children.length; i < iLen; i++) {\n                node.children[i].parentName = node.item;\n            }\n        }\n        const existingNode = this.nestedNodeMap.get(node);\n        const flatNode = existingNode && existingNode.item === node.item\n            ? existingNode\n            : new DragDropItemFlatNode();\n        flatNode.item = node.item;\n        flatNode.level = level;\n        flatNode.expandable = (node.children && node.children.length > 0);\n        flatNode.dataSourceName = node.dataSourceName;\n        if (flatNode.dataSourceName === 'accessgroup' && flatNode.level === 1) {\n            flatNode.parentName = node.parentName;\n        }\n        this.flatNodeMap.set(flatNode, node);\n        this.nestedNodeMap.set(node, flatNode);\n        return flatNode;\n    };\n\n    handleDragStart(event, node) {\n        if (!this.permissionToAccess) {\n            return false;\n        }\n        event.dataTransfer.setData('text/plan', node.item);\n        this.emptyItem.nativeElement.text = node.item;\n        event.dataTransfer.setDragImage(this.emptyItem.nativeElement, 0, 0);\n        this.dragNode = node;\n        this.treeControl.collapse(node);\n    }\n\n    handleDragOver(event, node) {\n        event.preventDefault();\n        // Handle node expand\n        if (node === this.dragNodeExpandOverNode) {\n            if (this.dragNode !== node && !this.treeControl.isExpanded(node)) {\n                if ((new Date().getTime() - this.dragNodeExpandOverTime) > this.dragNodeExpandOverWaitTimeMs) {\n                    this.treeControl.expand(node);\n                }\n            }\n        } else {\n            this.dragNodeExpandOverNode = node;\n            this.dragNodeExpandOverTime = new Date().getTime();\n        }\n\n        // Handle drag area\n        const percentageX = event.offsetX / event.target.clientWidth;\n        const percentageY = event.offsetY / event.target.clientHeight;\n        if (percentageY < 0.25) {\n            this.dragNodeExpandOverArea = 'above';\n        } else if (percentageY > 0.75) {\n            this.dragNodeExpandOverArea = 'below';\n        } else {\n            this.dragNodeExpandOverArea = 'center';\n        }\n    }\n\n    // handleDrop: called when a node is dropped , this is called when node of any type is dropped\n    handleDrop(event, node) {\n        if (!this.permissionToAccess) {\n            return false;\n        }\n        const draggedNodeId = parseInt(this.flatNodeMap.get(this.dragNode).item, 10);\n        const nodeDetail = this._topologyService.topologyNodeNames[draggedNodeId];\n        if (this.dragNode.dataSourceName === 'assignednode' && this.flatNodeMap.get(node).dataSourceName === 'assignednode') {\n            if (nodeDetail && nodeDetail.hasOwnProperty('parentNodeId')) {\n                if (nodeDetail.hasOwnProperty('type') && nodeDetail.type === 1200) {\n                    const dragNodeObject = this.dragNode;\n                    this._cageService.getLocalGamingDay(draggedNodeId).subscribe( (res) => {\n                        if (res !== null && res.hasOwnProperty('successObj')) {\n                            const localGamingDay = res.successObj;\n                            if (localGamingDay) {\n                                this._casinoManagerService.getTopologyStatistics(localGamingDay, draggedNodeId, 1, {})\n                                    .subscribe((response) => {\n                                    if (response !== null) {\n                                        let openTables;\n                                        if (response.hasOwnProperty('data') && response.data[0].hasOwnProperty('stats')) {\n                                           openTables = response.data[0].stats[0].split('/');\n                                        }\n                                        if (openTables[0] != null && parseInt(openTables[0], 10) === 1) {\n                                            this.snackBar.open(this.translate.instant\n                                            ('application.app.CONFIGURATION_LABELS.cannot_move_open_table'), '', {\n                                                duration: 3000,\n                                                horizontalPosition: 'right',\n                                                panelClass: 'snack__warn'\n                                            });\n                                        } else if (openTables[0] != null && parseInt(openTables[0], 10) === 0) {\n                                            this.dragNode = dragNodeObject;\n                                            event.preventDefault();\n                                            this.dragAssignedToAssigned(node, draggedNodeId, nodeDetail);\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    });\n                } else {\n                    event.preventDefault();\n                    this.dragAssignedToAssigned(node, draggedNodeId, nodeDetail);\n                }\n            } else {\n                this.snackBar.open(this.translate.instant\n                ('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.CANNOT_ADD_ROOT_LOCATION'), '', {\n                    duration: 3000,\n                    horizontalPosition: 'right',\n                    panelClass: 'snack__warn'\n                });\n            }\n        } else if (this.dragNode.dataSourceName === 'assignednode' && this.flatNodeMap.get(node).dataSourceName === 'accessgroup') {\n            if (!this.isTerminal(draggedNodeId)) {\n                if (!this.nodeAlreadyExists(draggedNodeId, node)) {\n                    event.preventDefault();\n                    this.dragToAccessGroup(node, draggedNodeId);\n                } else {\n                    this.snackBar.open(this.translate.instant\n                    ('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.LOCATION_ALREADY_EXISTS'), '', {\n                        duration: 3000,\n                        horizontalPosition: 'right',\n                        panelClass: 'snack__warn'\n                    });\n                }\n            } else {\n                this.snackBar.open(this.translate.instant\n                ('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.CANNOT_ADD_TERMN'), '', {\n                    duration: 3000,\n                    horizontalPosition: 'right',\n                    panelClass: 'snack__warn'\n                });\n            }\n        } else if (this.dragNode.dataSourceName === 'unassignednode' && this.flatNodeMap.get(node).dataSourceName === 'assignednode') {\n            event.preventDefault();\n            this.dragUnassignedNode(node);\n        }\n        this.handleDragEnd(event);\n    }\n\n    // handleDragEnd: reset all the variables used for handling drag and drop\n    handleDragEnd(event) {\n        this.dragNode = null;\n        this.dragNodeExpandOverNode = null;\n        this.dragNodeExpandOverTime = 0;\n    }\n\n    // dragToAccessGroup: saves the dragged assigned node to the access group nodes tree structure\n    dragToAccessGroup(node, draggedNodeId) {\n        if (node !== this.dragNode && !this.isTerminal(draggedNodeId)) {\n            const siteChildren = this._topologyService.getSiteChildren(this._topologyService.topologyNodeNames);\n            const parentNode = this.flatNodeMap.get(node);\n            for (let i = 0, iLen = this._topologyService.accessGroupNodes.length; i < iLen; i++) {\n                const accessNode =  this._topologyService.accessGroupNodes[i];\n                if (accessNode.groupName === this.flatNodeMap.get(node).item) {\n                    this.dragNodeToAccess(siteChildren, accessNode, draggedNodeId, parentNode);\n                }\n            }\n        }\n    }\n\n    // dragNodeToAccess: called inside dragToAccessGroup\n    dragNodeToAccess(siteChildren, accessNode, draggedNodeId, parentNode) {\n        for (const obj in siteChildren) {\n            if (siteChildren.hasOwnProperty(obj) && siteChildren[obj].id === accessNode.topologyId) {\n                const children = siteChildren[obj].children;\n                // const children = this.refineSiteChildren(siteChildren[obj].children, accessNode.topologyId, draggedNodeId);\n                if (children.indexOf(draggedNodeId) > -1) {\n                    if (this.dragNodeExpandOverArea === 'below' || this.dragNodeExpandOverArea === 'center') {\n                        for (let j = 0, jLen = this._topologyService.accessGroupNodes.length; j < jLen; j++) {\n                            if (this._topologyService.accessGroupNodes[j].groupName === parentNode.item) {\n                                const agNode = this._topologyService.accessGroupNodes[j];\n                                const idArr = this._topologyService.accessGroupNodes[j].topologyNodeIds;\n                                idArr.push(this.dragNode.item);\n                                const keysArr = [];\n                                for (let a = 0 , aLen = idArr.length; a < aLen; a++) {\n                                    keysArr.push(parseInt(idArr[a], 10));\n                                }\n                                const accessObj = {\n                                    groupName: parentNode.item,\n                                    groupType: agNode.groupType,\n                                    topologyGroupId: agNode.topologyGroupId,\n                                    topologyId: agNode.topologyId,\n                                    topologyNodeIds: keysArr,\n                                    userId: agNode.userId\n                                };\n                                this._topologyService.updateAccessGroupNode(agNode.topologyGroupId, accessObj)\n                                    .subscribe( (res) => {\n                                        if (res[0] && res[0].code === 20001) {\n                                            this.snackBar.open('Error Occurred. Pls try again later.', '', {\n                                                duration: 3000,\n                                                horizontalPosition: 'right',\n                                                panelClass: 'snack__error'\n                                            });\n                                            return;\n                                        }\n                                        for (let b = 0, bLen = this._topologyService.accessGroupNodes.length;\n                                             b < bLen; b++) {\n                                            if (this._topologyService.\n                                                accessGroupNodes[b].groupName === parentNode.item) {\n                                                this._topologyService.\n                                                    accessGroupNodes[j].topologyNodeIds = keysArr;\n                                                break;\n                                            }\n                                        }\n                                        this.updateAccessGroup();\n                                        this.snackBar.open(this.translate.instant\n                                            ('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.SUCCESSFULLY_DROPPED'),\n                                            '', {\n                                                duration: 3000,\n                                                horizontalPosition: 'right',\n                                                panelClass: 'snack__success'\n                                            });\n                                    });\n                            }\n                        }\n                    }\n                } else if (accessNode.topologyId === draggedNodeId) {\n                    if (this.dragNodeExpandOverArea === 'below' || this.dragNodeExpandOverArea === 'center') {\n                        for (let j = 0, jLen = this._topologyService.accessGroupNodes.length; j < jLen; j++) {\n                            if (this._topologyService.accessGroupNodes[j].groupName === parentNode.item) {\n                                const agNode = this._topologyService.accessGroupNodes[j];\n                                const idArr = this._topologyService.accessGroupNodes[j].topologyNodeIds;\n                                idArr.push(this.dragNode.item);\n                                const keysArr = [];\n                                for (let a = 0 , aLen = idArr.length; a < aLen; a++) {\n                                    keysArr.push(parseInt(idArr[a], 10));\n                                }\n                                const accessObj = {\n                                    groupName: parentNode.item,\n                                    groupType: agNode.groupType,\n                                    topologyGroupId: agNode.topologyGroupId,\n                                    topologyId: agNode.topologyId,\n                                    topologyNodeIds: keysArr,\n                                    userId: agNode.userId\n                                };\n                                this._topologyService.updateAccessGroupNode(agNode.topologyGroupId, accessObj)\n                                    .subscribe( (res) => {\n                                        if (res[0] && res[0].code === 20001) {\n                                            this.snackBar.open('Error Occurred. Pls try again later.', '', {\n                                                duration: 3000,\n                                                horizontalPosition: 'right',\n                                                panelClass: 'snack__error'\n                                            });\n                                            return;\n                                        }\n                                        for (let b = 0, bLen = this._topologyService.accessGroupNodes.length;\n                                             b < bLen; b++) {\n                                            if (this._topologyService.\n                                                accessGroupNodes[b].groupName === parentNode.item) {\n                                                this._topologyService.\n                                                    accessGroupNodes[j].topologyNodeIds = keysArr;\n                                                break;\n                                            }\n                                        }\n                                        this.updateAccessGroup();\n                                        this.snackBar.open(this.translate.instant\n                                            ('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.SUCCESSFULLY_DROPPED'),\n                                            '', {\n                                                duration: 3000,\n                                                horizontalPosition: 'right',\n                                                panelClass: 'snack__success'\n                                            });\n                                    });\n                            }\n                        }\n                    }\n                } else {\n                    this.snackBar.open(this.translate.instant\n                    ('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.CANNOT_ADD'), '', {\n                        duration: 3000,\n                        horizontalPosition: 'right',\n                        panelClass: 'snack__warn'\n                    });\n                }\n            }\n        }\n    }\n\n    // dragAssignedToAssigned: saves the dragged assigned node to the assigned nodes tree structure\n    dragAssignedToAssigned(node, draggedNodeId, nodeDetail) {\n        if (node !== this.dragNode) {\n            const prevParentId = nodeDetail.parentNodeId;\n            let childNodeId, parentNodeId, childTypeId, parentTypeId, isActualChild;\n            childNodeId = parseInt(this.flatNodeMap.get(this.dragNode).item, 10);\n            parentNodeId = parseInt(this.flatNodeMap.get(node).item, 10);\n            let parentChildren;\n            if (parentNodeId && this._topologyService.topologyNodeNames[parentNodeId]) {\n                parentChildren =  this._topologyService.topologyNodeNames[parentNodeId].children;\n            }\n            childTypeId = this._topologyService.topologyNodeNames[childNodeId].type;\n            parentTypeId = this._topologyService.topologyNodeNames[parentNodeId].type;\n            if (parentChildren && parentChildren.length > 0) {\n                for (let i = 0 , iLen = parentChildren.length; i < iLen; i++) {\n                    if (parentChildren[i].nodeId === childNodeId) {\n                        isActualChild = true;\n                        break;\n                    } else {\n                        isActualChild = false;\n                    }\n                }\n            }\n            let allChildren;\n            if (this._topologyService.topologyTypes && parentTypeId && this._topologyService.topologyTypes.get(parentTypeId)) {\n                allChildren = this._topologyService.topologyTypes.get(parentTypeId).childTypeIds;\n            }\n            if ((this.dragNodeExpandOverArea === 'below' || this.dragNodeExpandOverArea === 'center') && !isActualChild) {\n                this.dragNodeToAssigned(allChildren, childTypeId, parentNodeId, childNodeId, nodeDetail, prevParentId);\n            }\n        }\n    }\n\n    // dragNodeToAssigned: called inside dragAssignedToAssigned\n    dragNodeToAssigned(allChildren, childTypeId, parentNodeId, childNodeId, nodeDetail, prevParentId) {\n        if (allChildren && allChildren.length > 0 && allChildren.indexOf(childTypeId) > -1) {\n            const objToDrag = {\n                description: nodeDetail.description,\n                nodeId: childNodeId,\n                parentNodeId: parentNodeId,\n                type: childTypeId\n            };\n            this._topologyService.updateTopologyNode(childNodeId, objToDrag).subscribe( (res) => {\n                if (res) {\n                    if (res[0] && res[0].code === 20001) {\n                        this.snackBar.open('Error Occurred. Pls try again later.', '', {\n                            duration: 3000,\n                            horizontalPosition: 'right',\n                            panelClass: 'snack__error'\n                        });\n                        return;\n                    }\n                    const response = res;\n                    this.addToTopologyNodesArr(response, prevParentId);\n                    this.updateAssignedNodes();\n                    this.snackBar.open(this.translate.instant\n                        ('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.SUCCESSFULLY_DROPPED'),\n                        '', {\n                            duration: 3000,\n                            horizontalPosition: 'right',\n                            panelClass: 'snack__success'\n                        });\n                    this.handleClick(this.currentClickedNode.node, this.currentClickedNode.nodeDetails);\n                }\n            });\n        } else {\n            const parentName = this._topologyService.topologyNodeNames[parentNodeId].name;\n            const childName = this._topologyService.topologyNodeNames[childNodeId].name;\n            const label = this.translate.instant('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.CANNOT_ADD')\n                + '  ' + childName + '  ' +\n                this.translate.instant('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.AS_CHILD') + ' ' + parentName;\n            this.snackBar.open(label, '', {\n                duration: 3000,\n                horizontalPosition: 'right',\n                panelClass: 'snack__warn'\n            });\n        }\n    }\n\n    // dragUnassignedNode: saves the dragged unassigned node to the assigned nodes tree structure\n    dragUnassignedNode(node) {\n        let parentNodeId, parentTypeId, allTypeChildren, unassignedNodeId, unassignedNodeType, unassignedNodeName, unassignedNodeDesc;\n        parentNodeId = parseInt(this.flatNodeMap.get(node).item, 10);\n        parentTypeId = this._topologyService.topologyNodeNames[parentNodeId].type;\n        for (let i = 0, iLen = this._topologyService.unassignedNodesArr.length; i < iLen; i++) {\n            if (this.dragNode.item === this._topologyService.unassignedNodesArr[i].name) {\n                unassignedNodeId = this._topologyService.unassignedNodesArr[i].nodeId;\n                unassignedNodeType = this._topologyService.unassignedNodesArr[i].type;\n                unassignedNodeName = this._topologyService.unassignedNodesArr[i].name;\n                unassignedNodeDesc = this._topologyService.unassignedNodesArr[i].description;\n            }\n        }\n        if (this._topologyService.topologyTypes && parentTypeId && this._topologyService.topologyTypes.get(parentTypeId)) {\n            allTypeChildren = this._topologyService.topologyTypes.get(parentTypeId).childTypeIds;\n        }\n        if ((this.dragNodeExpandOverArea === 'below' || this.dragNodeExpandOverArea === 'center')) {\n           this.dragUnassignedToAssigned(allTypeChildren, unassignedNodeType, unassignedNodeDesc,\n               unassignedNodeId, parentNodeId, unassignedNodeName);\n        }\n    }\n\n    // dragUnassignedToAssigned: called inside dragUnassignedNode\n    dragUnassignedToAssigned(allTypeChildren, unassignedNodeType, unassignedNodeDesc, unassignedNodeId, parentNodeId, unassignedNodeName) {\n        if (allTypeChildren && allTypeChildren.length > 0 && allTypeChildren.indexOf(unassignedNodeType) > -1) {\n            const nodeToDrag = {\n                description: unassignedNodeDesc,\n                nodeId: unassignedNodeId,\n                parentNodeId: parentNodeId,\n                type: unassignedNodeType\n            };\n            this._topologyService.updateTopologyNode(unassignedNodeId, nodeToDrag).subscribe( (res) => {\n                if (res) {\n                    if (res[0] && res[0].code === 20001) {\n                        this.snackBar.open('Error Occurred. Pls try again later.', '', {\n                            duration: 3000,\n                            horizontalPosition: 'right',\n                            panelClass: 'snack__error'\n                        });\n                        return;\n                    }\n                    const responseArr = res;\n                    for (let j = 0, jLen = this._topologyService.unassignedNodesArr.length; j < jLen; j++) {\n                        if (this._topologyService.unassignedNodesArr[j] &&\n                            unassignedNodeId === this._topologyService.unassignedNodesArr[j].nodeId) {\n                            this._topologyService.unassignedNodesArr.splice(j, 1);\n                        }\n                    }\n                    this.updateUnassignedItems();\n                    this.addToTopologyNodesArr(responseArr);\n                    this.snackBar.open(this.translate.instant\n                        ('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.SUCCESSFULLY_DROPPED'),\n                        '', {\n                            duration: 3000,\n                            horizontalPosition: 'right',\n                            panelClass: 'snack__success'\n                        });\n                    if (this.currentClickedNode) {\n                        this.handleClick(this.currentClickedNode.node, this.currentClickedNode.nodeDetails);\n                    }\n                }\n            });\n        } else {\n            const parentName = this._topologyService.topologyNodeNames[parentNodeId].name;\n            const label = this.translate.instant('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.CANNOT_ADD')\n                + '  ' + unassignedNodeName + '  ' +\n                this.translate.instant('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.AS_CHILD') + ' ' + parentName;\n            this.snackBar.open(label, '', {\n                duration: 3000,\n                horizontalPosition: 'right',\n                panelClass: 'snack__warn'\n            });\n        }\n    }\n\n    // handleClick: called when a node is clicked within the topology tree of assigned nodes type\n    handleClick(node, nodeData?: string) {\n        if (nodeData){\n            if (nodeData['type'] === 1200){\n                this.openTableProperties(nodeData);\n                return;\n            }\n        }\n        if (node === 'areas') {\n            this._topologyService.areasLabelClicked.next();\n        } else {\n            this.currentClickedNode = {node: node , nodeDetails: nodeData};\n            const typeVal = nodeData['type'];\n            if (typeVal !== 1000) {\n                const objToSend = {\n                    nodeClicked: node,\n                    topologyData: this._topologyService.topologyNodes,\n                    nodeDetails: this._topologyService.topologyNodeNames\n                };\n                this.selectedNode = node.item;\n                this._topologyService.nodeClicked.next(objToSend);\n            } else if (typeVal === 1000) {\n                this._topologyService.terminalClicked.next();\n            }\n        }\n    }\n\n    // checkSearchText: checks whether the searched text is available or not\n    checkSearchText(event) {\n        const searchText = event.target.value;\n        this.searchText = searchText;\n        const assignedKeys = [];\n        for (const key in this._topologyService.topologyNodeNames) {\n            if (this._topologyService.topologyNodeNames.hasOwnProperty(key)) {\n                const node = this._topologyService.topologyNodeNames[key];\n                const str = node.name.toLowerCase();\n                if (str.indexOf(searchText.toLowerCase()) > -1) {\n                    assignedKeys.push(parseInt(key, 10));\n                }\n            }\n        }\n        if (assignedKeys.length > 0) {\n            this.filterAssignedNodes(assignedKeys);\n        }\n    }\n\n    // filterAssignedNodes: searches the text entered only within the assigned nodes\n    filterAssignedNodes(keysArr) {\n        const nodesData = this._topologyService.topologyNodes;\n        let filteredAssignedNodes = {};\n        for (const key in nodesData) {\n            if (nodesData.hasOwnProperty(key) && nodesData[key].length > 0) {\n                for (let j = 0, jLen = nodesData[key].length; j < jLen; j++) {\n                    const reqNodeId = nodesData[key][j].nodeId;\n                    if (keysArr.indexOf(reqNodeId) > -1) {\n                        filteredAssignedNodes[key] = nodesData[key];\n                    }\n                }\n            }\n        }\n        filteredAssignedNodes = this.rectifyFilteredObject(filteredAssignedNodes, keysArr);\n        this._getAssignedNodes(true, filteredAssignedNodes);\n    }\n\n    // rectifyFilteredObject: returns only the searched nodes\n    rectifyFilteredObject(obj, keys) {\n        const data = obj;\n        for (const val in data) {\n            if (data.hasOwnProperty(val) && data[val].length > 0) {\n                const tempArr = [];\n                for (let i = 0, iLen = data[val].length; i < iLen; i++) {\n                    if (keys.indexOf(data[val][i].nodeId) > -1) {\n                        tempArr.push(data[val][i]);\n                        if (data[val][i].children && data[val][i].children.length > 0) {\n                            const arr = [];\n                            for (let j = 0, jLen = data[val][i].children.length; j < jLen; j++) {\n                                const child = data[val][i].children[j];\n                                if (keys.indexOf(child.nodeId) > -1) {\n                                    arr.push(child);\n                                }\n                            }\n                            data[val][i].children = arr;\n                        }\n                    }\n                }\n                data[val] = tempArr;\n            }\n        }\n        return data;\n    }\n\n    // cancelSearch: reset all the variables when the search is cancelled\n    cancelSearch() {\n        this.searchText = '';\n        const assignData = this._topologyService.topologyNodes;\n        this.setAssignedNodes(assignData);\n    }\n\n    // openTableProperties: opens the table properties screen of the table clicked from the topology tree\n    openTableProperties(clickedTable) {\n        const tableId = clickedTable.nodeId;\n        this._router.navigate(['/configuration/table-properties/' + tableId]);\n    }\n\n    ngOnDestroy() {\n        this.nodeUpdated.unsubscribe();\n    }\n\n    // delete the selected node of the access group nodes\n    deleteAccessGroup(node) {\n        const nodeNames = this._topologyService.topologyNodeNames;\n        const accessNodes = this._topologyService.accessGroupNodes;\n        if (node.level === 0) {\n          this.isActiveAccessGroup(node, nodeNames, accessNodes);\n        } else if (node.level === 1) {\n           if (!this.isLastChild(node, nodeNames, accessNodes)) {\n               this.removeAccessGroupChild(node, accessNodes, nodeNames);\n           } else {\n              this.isChildOfActiveAG(node, nodeNames, accessNodes);\n           }\n        }\n    }\n\n    isLastChild(node, nodeNames, accessNodes) {\n       let arrLength;\n        for (const i in nodeNames) {\n            if (nodeNames.hasOwnProperty(i) && nodeNames[i].name === node.item) {\n                for (let j = 0, jLen = accessNodes.length; j < jLen; j++) {\n                    const index = accessNodes[j].topologyNodeIds.indexOf(nodeNames[i].nodeId);\n                    if (index > -1) {\n                        arrLength = accessNodes[j].topologyNodeIds.length;\n                    }\n                }\n            }\n        }\n        return arrLength === 1;\n    }\n\n    isChildOfActiveAG(node, nodeNames, accessNodes) {\n       let accessGroupId, response;\n       for (const i in nodeNames) {\n            if (nodeNames.hasOwnProperty(i) && nodeNames[i].name === node.item) {\n                for (let j = 0, jLen = accessNodes.length; j < jLen; j++) {\n                    const index = accessNodes[j].topologyNodeIds.indexOf(nodeNames[i].nodeId);\n                    if (index > -1) {\n                       accessGroupId = accessNodes[j].topologyGroupId;\n                    }\n                }\n            }\n       }\n        this._topologyService.getAccessGroupUsers(accessGroupId, {}).subscribe((res) => {\n            if (res) {\n                response = res;\n                if (response.totalRecordsReturned > 0) {\n                    this.openConfirmDeleteBox(node, accessNodes, nodeNames);\n                } else {\n                    this.removeAccessGroupChild(node, accessNodes, nodeNames);\n                }\n            }\n        });\n    }\n\n    // removeAccessGroup : deletes the access group node\n    removeAccessGroup(node, accessNodes) {\n        for (let a = 0, aLen = accessNodes.length; a < aLen; a++) {\n            if (node.item === accessNodes[a].groupName) {\n                const objToDelete = {\n                    groupName: accessNodes[a].groupName,\n                    groupType: accessNodes[a].groupType,\n                    topologyGroupId: accessNodes[a].topologyGroupId,\n                    topologyId: accessNodes[a].topologyId,\n                    topologyNodeIds: accessNodes[a].topologyNodeIds,\n                    userId: accessNodes[a].userId\n                };\n                this._topologyService.deleteAccessGroupNode(accessNodes[a].topologyGroupId, objToDelete).subscribe( (res) => {\n                    if (res && res[0] && res[0].code === 20001) {\n                        this.snackBar.open('Error Occurred. Pls try again later.', '', {\n                            duration: 3000,\n                            horizontalPosition: 'right',\n                            panelClass: 'snack__error'\n                        });\n                        return;\n                    }\n                    for (let b = 0, bLen = this._topologyService.accessGroupNodes.length; b < bLen; b++) {\n                        if (this._topologyService.accessGroupNodes[b].groupName === objToDelete.groupName) {\n                            this._topologyService.accessGroupNodes.splice(b, 1);\n                            break;\n                        }\n                    }\n                    this.snackBar.open(this.translate.instant\n                        ('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.AG_REMOVED'),\n                        '', {\n                            duration: 3000,\n                            horizontalPosition: 'right',\n                            panelClass: 'snack__success'\n                        });\n                    this.updateAccessGroup();\n                });\n            }\n        }\n    }\n\n    // removeAccessGroupChild : deletes the access group child node\n    removeAccessGroupChild(node, accessNodes, nodeNames) {\n        for (const i in nodeNames) {\n            if (nodeNames.hasOwnProperty(i) && nodeNames[i].name === node.item) {\n                for (let j = 0, jLen = accessNodes.length; j < jLen; j++) {\n                    if (accessNodes[j].groupName === node.parentName) {\n                        const index = accessNodes[j].topologyNodeIds.indexOf(nodeNames[i].nodeId);\n                        if ( index > -1) {\n                            const idArr = accessNodes[j].topologyNodeIds;\n                            idArr.splice(index, 1);\n                            const accessNodeObj = {\n                                groupName: accessNodes[j].groupName,\n                                groupType: accessNodes[j].groupType,\n                                topologyGroupId: accessNodes[j].topologyGroupId,\n                                topologyId: accessNodes[j].topologyId,\n                                topologyNodeIds: idArr,\n                                userId: accessNodes[j].userId\n                            };\n                            this._topologyService.updateAccessGroupNode(accessNodes[j].topologyGroupId, accessNodeObj).subscribe( (res) => {\n                                if (res[0] && res[0].code === 20001) {\n                                    this.snackBar.open('Error Occurred. Pls try again later.', '', {\n                                        duration: 3000,\n                                        horizontalPosition: 'right',\n                                        panelClass: 'snack__error'\n                                    });\n                                    return;\n                                }\n                                for (let c = 0, cLen = this._topologyService.accessGroupNodes.length; c < cLen; c++) {\n                                    if (this._topologyService.accessGroupNodes[c].groupName === accessNodeObj.groupName) {\n                                        this._topologyService.accessGroupNodes[c].topologyNodeIds = idArr;\n                                    }\n                                }\n                                this.snackBar.open(this.translate.instant\n                                    ('application.app.CONFIGURATION_LABELS.CHIPSETS.MESSAGE.LOCATION_REMOVED'),\n                                    '', {\n                                        duration: 3000,\n                                        horizontalPosition: 'right',\n                                        panelClass: 'snack__success'\n                                    });\n                                this.updateAccessGroup();\n                            });\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    isActiveAccessGroup(node, nodeNames, accessNodes) {\n        let responseData;\n        for (let a = 0, aLen = accessNodes.length; a < aLen; a++) {\n            if (node.item === accessNodes[a].groupName) {\n                const topologyGroupId = accessNodes[a].topologyGroupId;\n                this._topologyService.getAccessGroupUsers(topologyGroupId, {}).subscribe((res) => {\n                    if (res) {\n                        if (res[0] && res[0].code === 20001) {\n                            this.snackBar.open('Error Occurred. Pls try again later.', '', {\n                                duration: 3000,\n                                horizontalPosition: 'right',\n                                panelClass: 'snack__error'\n                            });\n                            return;\n                        }\n                       responseData = res;\n                       if (responseData.totalRecordsReturned > 0) {\n                           this.openConfirmDeleteBox(node, accessNodes, nodeNames);\n                       } else {\n                           this.removeAccessGroup(node, accessNodes);\n                       }\n                    }\n                });\n            }\n        }\n    }\n\n    // editAccessGroupName : called when access group node name is changed\n    editAccessGroupName(node) {\n        this.isEditable = true;\n        this.nodeToEdit = node.item;\n        this.accessGroupForm.value.groupName = '';\n        this.accessGroupEditForm.value.groupParentName = '';\n    }\n\n    // getNodeName : saves the new name of the node to changedName variable\n    getNodeName(value) {\n        this.changedName = value;\n    }\n\n    // updateAccessGroup: updates the tree structure of access group nodes\n    updateAccessGroup() {\n        this.createAccessGroupNodes(this._topologyService.accessGroupNodes);\n        this.databaseSubscriber();\n        this._createDataSources();\n    }\n\n    // updateUnassignedItems : updates the tree structure of unassigned nodes available\n    updateUnassignedItems() {\n        const childNodes = [];\n        for (const item of this._topologyService.unassignedNodesArr) {\n            childNodes.push(item.name);\n        }\n        const dataUnassigned = this.database.buildFileTree(childNodes, 0, 'unassignednode');\n        this._topologyService.unAssignedNodes = dataUnassigned;\n        this.database.dataChangeUnassigned.next(dataUnassigned);\n    }\n\n    // updateAssignedNodes : updates the tree structure of assigned nodes\n    updateAssignedNodes() {\n        this.setAssignedNodes(this._topologyService.topologyNodes);\n        this._topologyService.topologyNodeNames = this._topologyService.createNodeNamesObject(this._topologyService.topologyNodes);\n        this._topologyService.siteChildren = this._topologyService.getSiteChildren(this._topologyService.topologyNodeNames);\n        this._topologyService.nodeDragged.next();\n        this.databaseSubscriber();\n        this._createDataSources();\n    }\n\n    // updateNodeName : updates the name of access group node\n    updateNodeName(node, formName) {\n        let newValue;\n        if (formName === 'accessGroupForm') {\n            newValue = this.accessGroupForm.value.groupName;\n        } else {\n            newValue = this.accessGroupEditForm.value.groupParentName;\n        }\n        if (newValue && newValue !== this.nodeToEdit) {\n            const accessNodes = this._topologyService.accessGroupNodes;\n            let prevName;\n            for (let a = 0, aLen = accessNodes.length; a < aLen; a++) {\n                if (node.item === accessNodes[a].groupName) {\n                    prevName = node.item;\n                    const accessObj = {\n                        groupName: newValue,\n                        groupType: accessNodes[a].groupType,\n                        topologyGroupId: accessNodes[a].topologyGroupId,\n                        topologyId: accessNodes[a].topologyId,\n                        topologyNodeIds: accessNodes[a].topologyNodeIds,\n                        userId: accessNodes[a].userId\n                    };\n                    this._topologyService.updateAccessGroupNode(accessNodes[a].topologyGroupId, accessObj).subscribe( (res) => {\n                        if (res[0] && res[0].code === 20001) {\n                            this.snackBar.open('Error Occurred. Pls try again later.', '', {\n                                duration: 3000,\n                                horizontalPosition: 'right',\n                                panelClass: 'snack__error'\n                            });\n                            return;\n                        }\n                        for (let b = 0, bLen = this._topologyService.accessGroupNodes.length; b < bLen; b++) {\n                            if (this._topologyService.accessGroupNodes[b].groupName === prevName) {\n                                this._topologyService.accessGroupNodes[b].groupName = newValue;\n                                break;\n                            }\n                        }\n                        this.updateAccessGroup();\n                        this.snackBar.open(this.translate.instant('application.app.common.labels.NAME_UPDATED'), '', {\n                            duration: 3000,\n                            horizontalPosition: 'right',\n                            panelClass: 'snack__success'\n                        });\n                    });\n                }\n            }\n        }\n        this.clearNodeName();\n    }\n\n    isDuplicateName(formName) {\n        let value;\n        if (formName === 'accessGroupEditForm') {\n           value = this.accessGroupEditForm.value.groupParentName;\n        } else {\n           value = this.accessGroupForm.value.groupName;\n        }\n        let isRedundant = false;\n        const accessGroups = this._topologyService.accessGroupNodes;\n        for (let i =0, iLen = accessGroups.length; i < iLen; i++) {\n            if (accessGroups[i].groupName === value && value !== this.nodeToEdit) {\n                isRedundant = true;\n            }\n        }\n        return isRedundant;\n    }\n\n    validateGroupName: ErrorStateMatcher = {\n        isErrorState: (control: FormControl) => {\n            this.isGroupNameInvalid = this.isDuplicateName('accessGroupForm');\n            return this.isGroupNameInvalid;\n        }\n    };\n\n    validateAccessGroupName: ErrorStateMatcher = {\n        isErrorState: (control: FormControl) => {\n            this.isGroupNameInvalid = this.isDuplicateName('accessGroupEditForm');\n            return this.isGroupNameInvalid;\n        }\n    };\n\n    // clearNodeName : reset the variables changes while editing the access group name\n    clearNodeName() {\n        this.isEditable = false;\n        this.nodeToEdit = '';\n        /*this.accessGroupForm.value.groupName = '';\n        this.accessGroupEditForm.value.groupParentName = '';*/\n        this.accessGroupForm = this.fb.group({\n        });\n        this.accessGroupEditForm = this.fb.group({\n        });\n        this.addFormValidations();\n    }\n    valChangeFunction(evt, gName, fName) {\n        const valObj = {};\n        valObj[fName] = evt;\n        this[gName].patchValue(valObj, {onlySelf: true});\n    }\n\n    // addToTopologyNodesArr :  adds the dragged assigned node to the topology tree of assigned nodes\n    addToTopologyNodesArr(res, prevParentId?: number) {\n       const draggedNode = res[0].nodeId;\n       const newParentId = res[0].parentNodeId;\n       const nodeKeys = Object.keys(this._topologyService.topologyNodes);\n       const parentIdString = newParentId.toString();\n       if (nodeKeys.indexOf(parentIdString) > -1) {\n           this._topologyService.topologyNodes[newParentId].push(res[0]);\n       } else {\n           this._topologyService.topologyNodes[newParentId] = res;\n       }\n       this._topologyService.topologyNodeNames[draggedNode] = res[0];\n       if (prevParentId) {\n           this.deleteFromTopologyNodesArr(prevParentId, res);\n       }\n       this._topologyService.siteChildren = this._topologyService.getSiteChildren(this._topologyService.topologyNodeNames);\n       this.setAssignedNodes(this._topologyService.topologyNodes);\n    }\n\n    // deleteFromTopologyNodesArr : updates the topology nodes data\n    deleteFromTopologyNodesArr(prevParentId, res) {\n       const node = res[0];\n       const newArr = this._topologyService.topologyNodes[prevParentId];\n       if (newArr.length === 1) {\n           for (let i = 0, iLen = newArr.length; i < iLen; i++) {\n               if (node.nodeId === newArr[i].nodeId) {\n                   newArr.splice(i, 1);\n                   break;\n               }\n           }\n           if (newArr.length === 0) {\n               delete this._topologyService.topologyNodes[prevParentId];\n           }\n       } else if (newArr.length > 1) {\n           for (let i = 0, iLen = newArr.length; i < iLen; i++) {\n               if (node.nodeId === newArr[i].nodeId) {\n                   newArr.splice(i, 1);\n                   break;\n               }\n           }\n           this._topologyService.topologyNodes[prevParentId] = newArr;\n       }\n    }\n\n    isTerminal(draggedNodeId) {\n        let isNodeATerminal = false;\n        for (const nodeObj in this._topologyService.topologyNodeNames) {\n            if (this._topologyService.topologyNodeNames.hasOwnProperty(nodeObj) && parseInt(nodeObj, 10) === draggedNodeId) {\n                if (this._topologyService.topologyNodeNames[nodeObj].type === 1000) {\n                    isNodeATerminal = true;\n                }\n            }\n        }\n        return isNodeATerminal;\n    }\n\n    nodeAlreadyExists(draggedNodeId, node) {\n        let isNodePresent = false;\n        for (let i = 0, iLen = this._topologyService.accessGroupNodes.length; i < iLen; i++) {\n            const accessNode =  this._topologyService.accessGroupNodes[i];\n            if (accessNode.groupName === this.flatNodeMap.get(node).item) {\n                if (accessNode.topologyNodeIds.indexOf(draggedNodeId) > -1) {\n                   isNodePresent = true;\n                }\n            }\n        }\n        return isNodePresent;\n    }\n\n    openConfirmDeleteBox(node, accessNodes, nodeNames): void {\n        const dialogRef = this.dialog.open(ConfirmDeleteComponent, {\n            width: dialogSize.small,\n            data: {nodeToDelete: node}\n        });\n        dialogRef.afterClosed().subscribe(result => {\n            if (result && result === true) {\n                if (node.level === 0) {\n                    this.removeAccessGroup(node, accessNodes);\n                } else if (node.level === 1) {\n                    this.removeAccessGroupChild(node, accessNodes, nodeNames);\n                }\n            }\n        });\n    }\n\n    isTerminalOfPit(node): boolean {\n        const parentID = this.nodeNames[node.item].parentNodeId;\n        const parentType = this.nodeNames[parentID].type;\n        return parentType === 1200;\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {TopologytreeService} from '../services/topologytree.service';\nimport {MaterialComponentModule} from '../material-component/material-component.module';\nimport {CommonModule} from '@angular/common';\nimport {TopologyTreeDragDropComponent} from './topology-tree-drag-drop.component';\nimport {CommonTranslationModule} from '../common-translation/common-translation.module';\nimport { MatInputModule } from '@angular/material/input';\nimport { ConfirmDeleteComponent } from './confirm-delete/confirm-delete.component';\nimport {AppTablesModule} from '../app-tables/app-tables.module';\n\n/**\n * this module provide the topology tree component, service etc.. as you will add later like Pipe, Filters etc...\n * exported into the CommonUILib Module.\n */\n@NgModule({\n    imports: [MaterialComponentModule, CommonModule, CommonTranslationModule, MatInputModule, AppTablesModule],\n    declarations: [TopologyTreeDragDropComponent, ConfirmDeleteComponent],\n    exports: [TopologyTreeDragDropComponent],\n    providers: [TopologytreeService],\n    entryComponents: [ConfirmDeleteComponent]\n})\nexport class TopologyTreeModule {\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {urls} from '../constants/urls';\nimport {Observable, of} from 'rxjs';\nimport {BuyInTransactionInterface} from '../interface/cage.interface';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransactionsService {\n    gamingDay = ''\n  constructor(private http: HttpClient) { }\n\n  getBuyInData(): Observable<BuyInTransactionInterface[]> {\n\n    const url = `${urls.cage.buyInTransaction + '?gamingDay=' + urls.cage.gamingDay + '&txnTypes=BUYIN&topologyIds=1009&start=1&limit=1000'}`;\n      //console.log('localgamingdays:::', url);\n    return this.http.get<BuyInTransactionInterface[]>(url);\n  }\n    getCreditData(): Observable<HttpResponse<Object>> {\n        const url = `${urls.cage.buyInTransaction + '?gamingDay=' + urls.cage.gamingDay + '&txnTypes=CREDIT&topologyIds=1009&start=1&limit=1000'}`;\n        return this.http.get<HttpResponse<Object>>(url);\n    }\n    getFillData(): Observable<HttpResponse<Object>> {\n        const url = `${urls.cage.buyInTransaction + '?gamingDay=' + urls.cage.gamingDay + '&txnTypes=FILL&topologyIds=1009&start=1&limit=1000'}`;\n        return this.http.get<HttpResponse<Object>>(url);\n    }\n    getChipTrayScanData(): Observable<HttpResponse<Object>> {\n            const url = `${urls.cage.chipTrayScan + '1001' + '?gamingDay=' + urls.cage.gamingDay + '&reqFilter=1'}`;\n            return this.http.get<HttpResponse<Object>>(url);\n        }\n\n    /**\n     * Handle Http operation that failed.\n     * Let the app continue.\n     * @param operation - name of the operation that failed\n     * @param result - optional value to return as the observable result\n     */\n    private handleError<T> (operation = 'operation', result?: T) {\n        return (error: any): Observable<T> => {\n\n            // TODO: send the error to remote logging infrastructure\n            console.error(error); // log to console instead\n\n            // TODO: better job of transforming error for user consumption\n            console.log(`${operation} failed: ${error.message}`);\n\n            // Let the app keep running by returning an empty result.\n            return of(result as T);\n        };\n    }\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {TranslateService} from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-footer-nav',\n  templateUrl: './footer-nav.component.html',\n  styleUrls: ['./footer-nav.component.scss']\n})\nexport class FooterNavComponent implements OnInit {\n    @Input() objFooterNavData;\n    @Input() objTabsNameToDisplay;\n    @Input() translateLabel: string\n    constructor(public translate: TranslateService) { }\n\n  ngOnInit() {\n    //console.log('FooterNavComponent:::', this.objFooterNavData);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'minussigntoparenthesis'\n})\nexport class MinusSignToParenthesisPipe implements PipeTransform {\n\n    transform(value: any, args?: any): any {\n        return value.charAt(0) === '-' ?\n            '(' + value.substring(1, value.length) + ')' :\n            value;\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FooterNavComponent } from './footer-nav.component';\nimport {MaterialComponentModule} from '../material-component/material-component.module';\nimport {MinusSignToParenthesisPipe} from '../pipes/minussigntoparenthesis.pipe';\nimport {CommonTranslationModule} from '../common-translation/common-translation.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialComponentModule,\n    CommonTranslationModule\n  ],\n  declarations: [FooterNavComponent, MinusSignToParenthesisPipe],\n  exports: [FooterNavComponent, MinusSignToParenthesisPipe]\n})\nexport class FooterNavModule { }\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {urls} from '../constants/urls';\nimport {TopologyStatisticsTabularView} from '../interface/topology-types.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableDashboardService {\n\n  constructor(private http: HttpClient) {\n  }\n    getPlayers(options: {}): Observable<HttpResponse<Object>> {\n      // const url = 'http://172.31.2.102:8080/api/table/v1/players';\n        const url = urls.table.playerSearch;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n    getBetsUsingUuid(options: {}): Observable<HttpResponse<Object>> {\n        const url = urls.game.bets;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n    getPlayerById(playerId, options: {}): Observable<HttpResponse<Object>> {\n        const url = urls.table.playerSearch + '/' + playerId;\n        return this.http.get<HttpResponse<Object>>(url, options);\n    }\n    getSessionDetailBySessionID(sessionId , options: {}): Observable<HttpResponse<Object>> {\n        const finalUrl = urls.game.sessions + '?&sessionId=' + sessionId;\n        return this.http.post<HttpResponse<Object>>(finalUrl , options) ;\n    }\n    getSessionDetailSessionsByIds(sessionIdAry , options: {}): Observable<HttpResponse<Object>> {\n        const finalUrl = urls.game.sessionsByIds + '?sessionIds=' + sessionIdAry + '&identifier=2';\n        return this.http.post<HttpResponse<Object>>(finalUrl , options) ;\n    }\n    updatePlayer(reqObj , options: {}): Observable<HttpResponse<Object>> {\n      const finalUrl = urls.casinoMgr.updatePlayer + '?&UpdatedPlayerId=' + reqObj.UpdatedPlayerId +\n          '&gamingDay=' + reqObj.gamingDay + '&topologyId=' + reqObj.topologyId\n          + ' &userId=1&updateTime= ' + reqObj.updateTime + '&sessionIds=' + reqObj.sessionIds\n          + '&identifier=2&ircNumbers=' + reqObj.ircNumbers;\n        return this.http.post<HttpResponse<Object>>(finalUrl, options) ;\n    }\n    updateIrcNumber(body): Observable<HttpResponse<Object>> {\n        const finalUrl = urls.game.updateIrcNumber;\n        return this.http.post<HttpResponse<Object>>(finalUrl , body) ;\n    }\n    updateNotes(body): Observable<HttpResponse<Object>> {\n        const finalUrl = urls.game.sessionNote;\n        return this.http.post<HttpResponse<Object>>(finalUrl , body) ;\n    }\n    updateManualRating(body, sessionId): Observable<HttpResponse<Object>> {\n       // const finalUrl = 'http://172.31.2.102:8080/api/game/v1/manualRatings' + sessionId;\n        const finalUrl = urls.game.manualRatings + '/' + sessionId;\n        return this.http.post<HttpResponse<Object>>(finalUrl , body) ;\n    }\n    createManualRating(body): Observable<HttpResponse<Object>> {\n      //  const finalUrl = 'http://172.31.2.102:8080/api/game/v1/manualRatings';\n        const finalUrl = urls.game.manualRatings;\n        return this.http.post<HttpResponse<Object>>(finalUrl , body) ;\n    }\n}\n"]}