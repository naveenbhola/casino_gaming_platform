{"version":3,"file":"roll-time-dialog.component.d.ts","sources":["roll-time-dialog.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { CageService } from '../../services/cage.service';\nimport { CurrentTopologyService } from '../../services/current-topology.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { GamingDayDDInterface, RollTimeInterface } from '../../interface/cage.interface';\nexport declare class RollTimeDialogComponent implements OnInit {\n    private dialog;\n    private dialogRef;\n    private cageService;\n    private currentTopologyService;\n    private snackBar;\n    private translate;\n    private dateTime;\n    startAt: Date;\n    minStartTime: Date;\n    maxDateTime: Date;\n    private requestObject;\n    private rollTimeData;\n    renderedRollTimeData: Array<RollTimeInterface>;\n    displayedColumns: Array<string>;\n    currentGamingDays: Array<GamingDayDDInterface>;\n    selectedGamingDay: Date;\n    private currentGamingDay;\n    disableRollTimeSelection: Boolean;\n    private rollTimeTopologyMap;\n    selectedNodeIds: Array<number>;\n    private rollTimePayloadData;\n    constructor(dialog: MatDialog, dialogRef: MatDialogRef<any>, cageService: CageService, currentTopologyService: CurrentTopologyService, snackBar: MatSnackBar, translate: TranslateService);\n    setCurrentData(): void;\n    ngOnInit(): void;\n    getRollTimeData(): void;\n    userConditions(): void;\n    setTimeOnCalender(selectedRollTime: Date): void;\n    selectedRollTime(rollTime: string): void;\n    selectLocation(location: RollTimeInterface): void;\n    locationSelection(location: RollTimeInterface): void;\n    childrenNodes(childrenNodeMap: Object): void;\n    callRecursively(childrenNodeMap: Object, currentChildrenNodes: any, allChildrenNodes: string[]): void;\n    extractNodeIdFromHref(hrefArray: string): number[];\n    processTopology(topologyObj: Array<RollTimeInterface>): void;\n    locationPath(currentTopologyName: any, path: any): Array<string>;\n    onClose(): void;\n    onGamingDaySelection(): void;\n    renderView(): void;\n    sortDataObj(obj: any): Array<RollTimeInterface>;\n    submitRollTime(): void;\n}\n"]}