{"version":3,"file":"app-add-node-topology.component.d.ts","sources":["app-add-node-topology.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { FormBuilder, FormControl } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { TopologyService } from '../services/topology.service';\nexport declare class AppAddNodeTopologyComponent implements OnInit {\n    dialogRef: MatDialog;\n    data: any;\n    _topologyService: TopologyService;\n    fb: FormBuilder;\n    snackBar: MatSnackBar;\n    translate: TranslateService;\n    optionArr: any[];\n    typeVal: any;\n    longName: any;\n    shortName: any;\n    description: any;\n    host: any;\n    min: number;\n    max: number;\n    isHost: boolean;\n    loader: boolean;\n    addedNodeEvent: EventEmitter<any>;\n    siteTopologyCode: any;\n    sitesFromTopology: any[];\n    companyLevelCode: any;\n    isAccessGroup: boolean;\n    isAGNameInvalid: boolean;\n    isShortNameInvalid: boolean;\n    isLongNameInvalid: boolean;\n    savedAccessGroup: string;\n    savedLocation: any;\n    constructor(dialogRef: MatDialog, data: any, _topologyService: TopologyService, fb: FormBuilder, snackBar: MatSnackBar, translate: TranslateService);\n    limitForm: import(\"@angular/forms\").FormGroup;\n    validateShortName: ErrorStateMatcher;\n    validateName: ErrorStateMatcher;\n    validateAccessGroupName: ErrorStateMatcher;\n    valChangeFunction(evt: any, fName: any): void;\n    addValidations(): void;\n    noWhitespace(control: FormControl): {\n        whitespace: boolean;\n    };\n    showHost(opt: any): void;\n    ngOnInit(): void;\n    createDataForDropdownForAccessGroup(topologyTypes: any): void;\n    createDataForDropdownForAssingedNode(types: any): void;\n    createAccessGroup(): void;\n    createAssingedNode(): void;\n    createNode(): void;\n    closeDialogBox(): void;\n    isDuplicate(field: any, value: any): boolean;\n    isSaveDisabled(): boolean;\n}\n"]}